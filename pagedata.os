// Сделано на основе https://github.com/tsukanov-as/kojura

Перем Данные;
Перем Шаблон;
Перем КодУзла;
Перем Узлы;
Перем Окружение Экспорт;

Функция СтруктуруВСтроку(Структ)
	Если НЕ ТипЗнч(Структ) = Тип("Структура") Тогда
		Возврат Структ;
	КонецЕсли;
	Результат = "";
	Для каждого Элемент Из Структ Цикл
		Результат = Результат + ?(Результат = "", "", Символы.Таб) + Элемент.Ключ + "=" + Элемент.Значение;
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция Узел(Знач Имя, Знач Значение, Знач Соседний)
	Возврат Новый Структура("Имя, Значение, Соседний", Имя, Значение, Соседний);
КонецФункции // Узел()

#Область Окружение

Процедура ОткрытьОкружение(Окружение) Экспорт
	Окружение = Новый Структура("ВнешнееОкружение, Элементы", Окружение, Новый Соответствие);
КонецПроцедуры // ОткрытьОкружение()

Процедура ЗакрытьОкружение(Окружение) Экспорт
	Окружение = Окружение.ВнешнееОкружение;
КонецПроцедуры // ЗакрытьОкружение()

Функция ЭлементОкружения(Знач Окружение, Знач ИмяЭлемента) Экспорт
	Перем Элемент;
	Элемент = Окружение.Элементы[ИмяЭлемента];
	Пока Элемент = Неопределено И Окружение.ВнешнееОкружение <> Неопределено Цикл
		Окружение = Окружение.ВнешнееОкружение;
		Элемент = Окружение.Элементы[ИмяЭлемента];
	КонецЦикла;
	Если Элемент = Неопределено Тогда
		ВызватьИсключение СтрШаблон("Неизвестный Узел %1", ИмяЭлемента);
	КонецЕсли;
	Возврат Элемент;
КонецФункции // ЭлементОкружения()

#КонецОбласти // Окружение

#Область Интерпретатор

Функция Сумма(Знач Окружение, Знач Аргумент)
	Перем Значение;
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Значение = Интерпретировать(Окружение, Аргумент);
	Аргумент = Соседний(Аргумент);
	Пока Аргумент <> Неопределено Цикл
		Значение = Значение + Интерпретировать(Окружение, Аргумент);
		Аргумент = Соседний(Аргумент);
	КонецЦикла;
	Возврат Значение;
КонецФункции // Сумма()

Функция Разность(Знач Окружение, Знач Аргумент)
	Перем Значение;
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Значение = Интерпретировать(Окружение, Аргумент);
	Аргумент = Соседний(Аргумент);
	Если Аргумент = Неопределено Тогда
		Возврат -Значение;
	КонецЕсли;
	Пока Аргумент <> Неопределено Цикл
		Значение = Значение - Интерпретировать(Окружение, Аргумент);
		Аргумент = Соседний(Аргумент);
	КонецЦикла;
	Возврат Значение;
КонецФункции // Разность()

Функция Произведение(Знач Окружение, Знач Аргумент)
	Перем Значение;
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Значение = Интерпретировать(Окружение, Аргумент);
	Аргумент = Соседний(Аргумент);
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Пока Аргумент <> Неопределено Цикл
		Значение = Значение * Интерпретировать(Окружение, Аргумент);
		Аргумент = Соседний(Аргумент);
	КонецЦикла;
	Возврат Значение;
КонецФункции // Произведение()

Функция Частное(Знач Окружение, Знач Аргумент)
	Перем Значение;
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Значение = Интерпретировать(Окружение, Аргумент);
	Аргумент = Соседний(Аргумент);
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Пока Аргумент <> Неопределено Цикл
		Значение = Значение / Интерпретировать(Окружение, Аргумент);
		Аргумент = Соседний(Аргумент);
	КонецЦикла;
	Возврат Значение;
КонецФункции // Частное()

Функция Остаток(Знач Окружение, Знач Аргумент)
	Перем Значение;
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Значение = Интерпретировать(Окружение, Аргумент);
	Аргумент = Соседний(Аргумент);
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Пока Аргумент <> Неопределено Цикл
		Значение = Значение % Интерпретировать(Окружение, Аргумент);
		Аргумент = Соседний(Аргумент);
	КонецЦикла;
	Возврат Значение;
КонецФункции // Остаток()

Функция ЗначениеФункции(Знач Окружение, Знач СоставнаяФункция, Знач Аргумент)
	Перем Значение;
	ОткрытьОкружение(Окружение);
	Параметр = Значение(СоставнаяФункция);
	Пока Параметр <> Неопределено Цикл
		Если Аргумент = Неопределено Тогда
			ВызватьИсключение "Недостаточно фактических параметров";
		КонецЕсли;
		Окружение.Элементы[Значение(Параметр)] = Интерпретировать(Окружение, Аргумент);
		Параметр = Соседний(Параметр);
		Аргумент = Соседний(Аргумент);
	КонецЦикла;
	Выражение = Соседний(СоставнаяФункция);
	Если Выражение = Неопределено Тогда
		ВызватьИсключение "Ожидается тело функции";
	КонецЕсли;
	Пока Выражение <> Неопределено Цикл
		Значение = Интерпретировать(Окружение, Выражение);
		Выражение = Соседний(Выражение);
	КонецЦикла;
	ЗакрытьОкружение(Окружение);
	Возврат Значение;
КонецФункции // ЗначениеФункции()

Функция ОпределениеФункции(Знач Окружение, Знач Список)
	Перем Имя, Параметры, Выражение;
	Имя = Значение(Список);
	Параметры = Соседний(Список);
	Выражение = Соседний(Параметры);
	Если Параметры.Имя = "Список" Тогда
		Параметры = Дочерний(Параметры);
		Если Не ПараметрыКорректны(Параметры) Тогда
			ВызватьИсключение "Ожидается имя параметра";
		КонецЕсли;
	ИначеЕсли Параметры.Имя <> "Объект" Тогда
		ВызватьИсключение "Ожидается имя параметра";
	Иначе
		Параметры = Узел("Объект", Значение(Параметры), Неопределено);
	КонецЕсли;
	Окружение.Элементы[Имя] = Узел("Лямбда", Параметры, Выражение);
	Возврат Неопределено;
КонецФункции // ОпределениеФункции()

Функция Лямбда(Знач Окружение, Знач Параметры)
	Перем Выражение;
	Выражение = Соседний(Параметры);
	Если Параметры.Имя = "Список" Тогда
		Параметры = Значение(Дочерний(Параметры));
		Если Не ПараметрыКорректны(Параметры) Тогда
			ВызватьИсключение "Ожидается имя параметра";
		КонецЕсли;
	ИначеЕсли Параметры.Имя <> "Объект" Тогда
		ВызватьИсключение "Ожидается имя параметра";
	Иначе
		Параметры = Узел("Объект", Значение(Параметры), Неопределено);
	КонецЕсли;
	Возврат Узел("Лямбда", Параметры, Выражение);
КонецФункции // Лямбда()

// вспомогательная функция
Функция ПараметрыКорректны(Параметры)
	Возврат Параметры = Неопределено Или Параметры.Имя = "Объект" И ПараметрыКорректны(Соседний(Параметры));
КонецФункции // ПараметрыКорректны()

Функция Пусть(Знач Окружение, Знач Список)
	Перем Имя, Значение;
	Имя = Значение(Список);
	Значение = Интерпретировать(Окружение, Соседний(Список));
	Окружение.Элементы[Имя] = Значение;
	Возврат Неопределено;
КонецФункции // Пусть()

Функция ЗначениеВыраженияЕсли(Знач Окружение, Знач Список)
	Перем СписокЕсли, СписокТогда, СписокИначе;
	СписокЕсли = Список;
	СписокТогда = Соседний(Список);
	СписокИначе = Соседний(СписокТогда);
	Возврат ?(
		Интерпретировать(Окружение, СписокЕсли),
			Интерпретировать(Окружение, СписокТогда),
			Интерпретировать(Окружение, СписокИначе)
	);
КонецФункции // ЗначениеВыраженияЕсли()

Функция ЗначениеВыраженияВыбор(Знач Окружение, Знач Список)
	Перем СписокКогда, СписокТогда;
	СписокКогда = Список;
	Если СписокКогда = Неопределено Тогда
		ВызватьИсключение "Ожидается условие";
	КонецЕсли;
	Пока СписокКогда <> Неопределено Цикл
		СписокТогда = Соседний(СписокКогда);
		Если СписокТогда = Неопределено Тогда
			ВызватьИсключение "Ожидается выражение";
		КонецЕсли;
		Если Интерпретировать(Окружение, СписокКогда) Тогда
			Возврат Интерпретировать(Окружение, СписокТогда);
		КонецЕсли;
		СписокКогда = Соседний(СписокТогда);
	КонецЦикла;
	ВызватьИсключение "Ни одно из условий не сработало!";
КонецФункции // ЗначениеВыраженияВыбор()

Функция Равно(Знач Окружение, Знач Аргумент)
	Перем Значение, Результат;
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Значение = Интерпретировать(Окружение, Аргумент);
	Аргумент = Соседний(Аргумент);
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Результат = Истина;
	Пока Аргумент <> Неопределено И Результат Цикл
		Результат = Результат И Значение = Интерпретировать(Окружение, Аргумент);
		Аргумент = Соседний(Аргумент);
	КонецЦикла;
	Возврат Результат;
КонецФункции // Равно()

Функция Больше(Знач Окружение, Знач Аргумент)
	Перем Значение1, Значение2;
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Значение1 = Интерпретировать(Окружение, Аргумент);
	Аргумент = Соседний(Аргумент);
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Результат = Истина;
	Пока Аргумент <> Неопределено И Результат Цикл
		Значение2 = Интерпретировать(Окружение, Аргумент);
		Результат = Результат И Значение1 > Значение2;
		Значение1 = Значение2;
		Аргумент = Соседний(Аргумент);
	КонецЦикла;
	Возврат Результат;
КонецФункции // Больше()

Функция Меньше(Знач Окружение, Знач Аргумент)
	Перем Значение1, Значение2;
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Значение1 = Интерпретировать(Окружение, Аргумент);
	Аргумент = Соседний(Аргумент);
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Результат = Истина;
	Пока Аргумент <> Неопределено И Результат Цикл
		Значение2 = Интерпретировать(Окружение, Аргумент);
		Результат = Результат И Значение1 < Значение2;
		Значение1 = Значение2;
		Аргумент = Соседний(Аргумент);
	КонецЦикла;
	Возврат Результат;
КонецФункции // Меньше()

Функция БольшеИлиРавно(Знач Окружение, Знач Аргумент)
	Перем Значение1, Значение2;
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Значение1 = Интерпретировать(Окружение, Аргумент);
	Аргумент = Соседний(Аргумент);
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Результат = Истина;
	Пока Аргумент <> Неопределено И Результат Цикл
		Значение2 = Интерпретировать(Окружение, Аргумент);
		Результат = Результат И Значение1 >= Значение2;
		Значение1 = Значение2;
		Аргумент = Соседний(Аргумент);
	КонецЦикла;
	Возврат Результат;
КонецФункции // БольшеИлиРавно()

Функция МеньшеИлиРавно(Знач Окружение, Знач Аргумент)
	Перем Значение1, Значение2;
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Значение1 = Интерпретировать(Окружение, Аргумент);
	Аргумент = Соседний(Аргумент);
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Результат = Истина;
	Пока Аргумент <> Неопределено И Результат Цикл
		Значение2 = Интерпретировать(Окружение, Аргумент);
		Результат = Результат И Значение1 <= Значение2;
		Значение1 = Значение2;
		Аргумент = Соседний(Аргумент);
	КонецЦикла;
	Возврат Результат;
КонецФункции // МеньшеИлиРавно()

Функция НеРавно(Знач Окружение, Знач Аргумент)
	Перем Значение1, Значение2;
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Значение1 = Интерпретировать(Окружение, Аргумент);
	Аргумент = Соседний(Аргумент);
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Результат = Истина;
	Пока Аргумент <> Неопределено И Результат Цикл
		Значение2 = Интерпретировать(Окружение, Аргумент);
		Результат = Результат И Значение1 <> Значение2;
		Значение1 = Значение2;
		Аргумент = Соседний(Аргумент);
	КонецЦикла;
	Возврат Результат;
КонецФункции // НеРавно()

Функция ЛогическоеИ(Знач Окружение, Знач Аргумент)
	Перем Значение;
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Результат = Истина;
	Пока Аргумент <> Неопределено И Результат Цикл
		Значение = Интерпретировать(Окружение, Аргумент);
		Результат = Результат И Значение;
		Аргумент = Соседний(Аргумент);
	КонецЦикла;
	Возврат Результат;
КонецФункции // ЛогическоеИ()

Функция ЛогическоеИли(Знач Окружение, Знач Аргумент)
	Перем Значение;
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Результат = Ложь;
	Пока Аргумент <> Неопределено И Не Результат Цикл
		Значение = Интерпретировать(Окружение, Аргумент);
		Результат = Результат Или Значение;
		Аргумент = Соседний(Аргумент);
	КонецЦикла;
	Возврат Результат;
КонецФункции // ЛогическоеИли()

Функция ЛогическоеНе(Знач Окружение, Знач Аргумент)
	Перем Значение;
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Результат = Истина;
	Пока Аргумент <> Неопределено И Результат Цикл
		Значение = Интерпретировать(Окружение, Аргумент);
		Результат = Результат И Не Значение;
		Аргумент = Соседний(Аргумент);
	КонецЦикла;
	Возврат Результат;
КонецФункции // ЛогическоеНе()

Функция ВывестиСообщение(Знач Окружение, Знач Аргумент)
	Перем Значения;
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Значения = Новый Массив;
	Пока Аргумент <> Неопределено Цикл
		Значения.Добавить(Интерпретировать(Окружение, Аргумент));
		Аргумент = Соседний(Аргумент);
	КонецЦикла;
	Возврат(СтрСоединить(Значения, " "));
	//Возврат Неопределено;
КонецФункции // ВывестиСообщение

Функция Интерпретировать(Знач Окружение, Знач Узел, Знач Применить = Ложь) Экспорт
	Сообщить("Узел:" + Символы.Таб + СтруктуруВСтроку(Узел));
	Значение = Интерпретировать1(Окружение, Узел, Применить);
	Сообщить("Знач:" + Символы.Таб + СтруктуруВСтроку(Значение));
	Возврат Значение;
КонецФункции

Функция Интерпретировать1(Знач Окружение, Знач Узел, Знач Применить = Ложь) Экспорт
	Перем Имя, Значение, Лямбда;

	Если НЕ ТипЗнч(Узел) = Тип("Структура") Тогда
		ВызватьИсключение "Неверный узел";
	КонецЕсли;

	Имя = Узел.Имя;
	Значение = Значение(Узел);

	Если Имя = "Объект" Тогда
		//Сообщить(Значение);
		Если Значение = "Функция" Тогда
			Возврат ОпределениеФункции(Окружение, Соседний(Узел));
		ИначеЕсли Значение = "Пусть" Тогда
			Возврат Пусть(Окружение, Соседний(Узел));
		ИначеЕсли Значение = "Лямбда" Тогда
			Возврат Лямбда(Окружение, Соседний(Узел));
		ИначеЕсли Значение = "Список" Тогда
			Возврат Узел("Список", Соседний(Узел), Неопределено);
		ИначеЕсли Значение = "Пустой" Тогда
			Возврат Интерпретировать(Окружение, Значение(Соседний(Узел))) = Неопределено;
		ИначеЕсли Значение = "Морда" Тогда
			Список = Интерпретировать(Окружение, Соседний(Узел));
			Возврат Интерпретировать(Окружение, Значение(Список));
		ИначеЕсли Значение = "Хвост" Тогда
			Список = Интерпретировать(Окружение, Соседний(Узел));
			Возврат Узел("Список", Соседний(Значение(Список)), Неопределено);
		ИначеЕсли Значение = "Если" Тогда
			Возврат ЗначениеВыраженияЕсли(Окружение, Соседний(Узел));
		ИначеЕсли Значение = "Выбор" Тогда
			Возврат ЗначениеВыраженияВыбор(Окружение, Соседний(Узел));
		ИначеЕсли Значение = "Сообщить" Тогда
			Возврат ВывестиСообщение(Окружение, Соседний(Узел));
		ИначеЕсли Значение = "+" Тогда
			Возврат Сумма(Окружение, Соседний(Узел));
		ИначеЕсли Значение = "-" Тогда
			Возврат Разность(Окружение, Соседний(Узел));
		ИначеЕсли Значение = "*" Тогда
			Возврат Произведение(Окружение, Соседний(Узел));
		ИначеЕсли Значение = "/" Тогда
			Возврат Частное(Окружение, Соседний(Узел));
		ИначеЕсли Значение = "%" Тогда
			Возврат Остаток(Окружение, Соседний(Узел));
		ИначеЕсли Значение = "=" Тогда
			Возврат Равно(Окружение, Соседний(Узел));
		ИначеЕсли Значение = ">" Тогда
			Возврат Больше(Окружение, Соседний(Узел));
		ИначеЕсли Значение = "<" Тогда
			Возврат Меньше(Окружение, Соседний(Узел));
		ИначеЕсли Значение = ">=" Тогда
			Возврат БольшеИлиРавно(Окружение, Соседний(Узел));
		ИначеЕсли Значение = "<=" Тогда
			Возврат МеньшеИлиРавно(Окружение, Соседний(Узел));
		ИначеЕсли Значение = "<>" Тогда
			Возврат НеРавно(Окружение, Соседний(Узел));
		ИначеЕсли Значение = "И" Тогда
			Возврат ЛогическоеИ(Окружение, Соседний(Узел));
		ИначеЕсли Значение = "Или" Тогда
			Возврат ЛогическоеИли(Окружение, Соседний(Узел));
		ИначеЕсли Значение = "Не" Тогда
			Возврат ЛогическоеНе(Окружение, Соседний(Узел));
		ИначеЕсли Значение = "Истина" Тогда
			Возврат Истина;
		ИначеЕсли Значение = "Ложь" Тогда
			Возврат Ложь;
		ИначеЕсли Значение = "Неопределено" Тогда
			Возврат Неопределено;
		Иначе
			ЭлементОкружения = ЭлементОкружения(Окружение, Значение(Узел));
			Если ТипЗнч(ЭлементОкружения) = Тип("Структура") Тогда
				Если ЭлементОкружения.Имя = "Лямбда" Тогда
					Если Применить Тогда
						Возврат ЗначениеФункции(Окружение, ЭлементОкружения, Соседний(Узел));
					Иначе
					    Возврат ЭлементОкружения;
					КонецЕсли;
				ИначеЕсли ЭлементОкружения.Имя = "Список" Тогда
					Возврат ЭлементОкружения;
				Иначе
					ВызватьИсключение "Неизвестный объект";
				КонецЕсли;
			Иначе
				Возврат ЭлементОкружения;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Имя = "Число" Тогда
		Возврат Число(Значение);
	ИначеЕсли Имя = "Строка" Тогда
		Возврат Значение;
	ИначеЕсли Применить Тогда
		Лямбда = Интерпретировать(Окружение, Значение);
		Возврат ЗначениеФункции(Окружение, Лямбда, Соседний(Узел));
	Иначе // Список
		Возврат Интерпретировать(Окружение, Значение, Истина);
	КонецЕсли;
КонецФункции // Интерпретировать()

#КонецОбласти // Интерпретатор

Функция ПолучитьУзел(Код) Экспорт
	Рез = Узлы.Получить(Код);
	Если НЕ Рез = Неопределено Тогда
		Возврат Рез;
	КонецЕсли;
	Стр = Данные.ПолучитьСтроку(Код);
	Стр = СтрЗаменить(Стр, Символы.Таб, Символы.ПС);
	Ключ = Неопределено;
	Для н = 1 по СтрЧислоСтрок(Стр) Цикл
		знСтр  = СтрПолучитьСтроку(Стр, н);
		Если Ключ = Неопределено Тогда
			Ключ = знСтр;
		Иначе
			Если Рез = Неопределено Тогда
				Рез = Новый Структура;
			КонецЕсли;
			Рез.Вставить(Ключ, знСтр);
			Ключ = Неопределено;
		КонецЕсли;
	КонецЦикла;
	Узлы.Вставить(Код, Рез);
	Возврат Рез;
КонецФункции // ПолучитьУзел()

Функция Соседний(Знач Узел)
	Если НЕ ТипЗнч(Узел) = Тип("Структура") Тогда
		ВызватьИсключение "Неверный узел";
	КонецЕсли;
	Если Узел.Свойство("Соседний", Узел) Тогда
		Если ТипЗнч(Узел) = Тип("Строка") Тогда
			Узел = ПолучитьУзел(Узел);
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	Возврат Узел;
КонецФункции // Соседний()

Функция Дочерний(Знач Узел)
	Если НЕ ТипЗнч(Узел) = Тип("Структура") Тогда
		ВызватьИсключение "Неверный узел";
	КонецЕсли;
	Если Узел.Свойство("Дочерний", Узел) Тогда
		Узел = ПолучитьУзел(Узел);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	Возврат Узел;
КонецФункции // Дочерний()

Функция Значение(Знач Узел)
	Если НЕ ТипЗнч(Узел) = Тип("Структура") Тогда
		ВызватьИсключение "Неверный узел";
	КонецЕсли;
	Если Узел.Свойство("Дочерний") Тогда
		Возврат ПолучитьУзел(Узел.Дочерний);
	Иначе
		Возврат Узел.Значение;
	КонецЕсли;
КонецФункции // Значение()

Функция ПриСозданииОбъекта(ИмяФайлаДанных, знШаблон)
	Данные = Новый ТекстовыйДокумент;
	Данные.Прочитать(ИмяФайлаДанных);
	Шаблон = знШаблон;
	Узлы = Новый Соответствие;
	ОткрытьОкружение(Окружение);
КонецФункции
