// Сделано на основе https://github.com/tsukanov-as/kojura

Перем Данные;
Перем КодУзла;
Перем Узлы Экспорт;
Перем Изменены Экспорт;
Перем Количество Экспорт;
Перем Пустой;
Перем УзлыОбновить Экспорт;
Перем Обновить Экспорт;
Перем Представление Экспорт;
Перем Библиотеки;
Перем Рефлектор;
Перем Процесс;
Перем Корень Экспорт;
Перем Фронт Экспорт;
Перем Шаг Экспорт;

Функция ПередатьСтроку(Соединение, СтрокаДанные) Экспорт
	Процесс.ПередатьСтроку(Соединение, СтрокаДанные);
КонецФункции // ПередатьСтроку()


Функция УзелСостояние(Узел, СостояниеИмя) Экспорт
	Перем УзелСостояния, УзелСостояние;
	Если Узел.Свойство("Состояния", УзелСостояния) Тогда
		УзелСостояния.Свойство(СостояниеИмя, УзелСостояние);
	КонецЕсли;
	Возврат УзелСостояние;
КонецФункции // УзелСостояние(Узел)

Функция УзелСостояниеЗначение(Узел, СостояниеИмя, Знач СостояниеЗначение) Экспорт
	Перем УзелСостояния;
	Если НЕ Узел.Свойство("Состояния", УзелСостояния) Тогда
		УзелСостояния = Новый Структура();
		Узел.Вставить("Состояния", УзелСостояния);
	КонецЕсли;
	УзелСостояния.Вставить(СостояниеИмя, СостояниеЗначение);
	//Сообщить("" + Узел.Код + " " + СостояниеИмя + "=" + (Лев(СостояниеЗначение,30)));
	Возврат СостояниеЗначение;
КонецФункции // УзелСостояниеЗначение(Узел)

Функция СтруктуруВСтроку(знСтруктура) Экспорт
	Если НЕ ТипЗнч(знСтруктура) = Тип("Структура") Тогда
		Возврат знСтруктура;
	КонецЕсли;
	Результат = "";
	Для каждого Элемент Из знСтруктура Цикл
		Ключ = Элемент.Ключ;
		Значение = Элемент.Значение;

		Если ТипЗнч(Значение) = Тип("Структура") ИЛИ Ключ = "Код" ИЛИ Ключ = "Старший" ИЛИ Ключ = "Родитель" Тогда
			Продолжить;
		ИначеЕсли Ключ = "Имя" Тогда
			Ключ = "И";
		ИначеЕсли Ключ = "Значение" Тогда
			Если "" + Значение = "" Тогда
				Продолжить;
			КонецЕсли;
			Ключ = "З";
			Значение = СтрЗаменить(Значение, Символы.Таб, "#x9");
			Значение = СтрЗаменить(Значение, Символы.ПС, "#xA");
			Значение = СтрЗаменить(Значение, Символы.ВК, "#xD");
		ИначеЕсли Ключ = "Дочерний" Тогда
			Если Лев(Значение, 1) = "s" Тогда
				Продолжить;
			КонецЕсли;
			Ключ = "Д";
		ИначеЕсли Ключ = "Соседний" Тогда
			Ключ = "С";
		ИначеЕсли Ключ = "Атрибут" Тогда
			Ключ = "А";
		КонецЕсли;
		Результат = Результат + ?(Результат = "", "", Символы.Таб) + Ключ + Символы.Таб + Значение;
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция СтрокуВСтруктуру(Знач Стр) Экспорт
	Стр = СтрРазделить(Стр, Символы.Таб);
	Ключ = Неопределено;
	Рез = Неопределено;
	Для Каждого знСтр Из Стр Цикл
		Если Ключ = Неопределено Тогда
			Ключ = знСтр;
		Иначе
			Если Рез = Неопределено Тогда
				Рез = Новый Структура;
			КонецЕсли;
			Рез.Вставить(Ключ, знСтр);
			Ключ = Неопределено;
		КонецЕсли;
	КонецЦикла;
	Возврат Рез;
КонецФункции

Функция УзелСвойство(Узел, Свойство) Экспорт
	УзелСвойство = Неопределено;
	Если НЕ Узел = Неопределено Тогда
		Узел.Свойство(Свойство, УзелСвойство);
	КонецЕсли;
	Возврат УзелСвойство;
КонецФункции // УзелСвойство(Узел)

Функция ОбновитьОбъект(Знач Узел) Экспорт
	Объекты = Новый Соответствие;
	Объекты.Вставить(Узел.Код, Узел);
	УзлыОбновить.Вставить("ОбновитьОбъект", Объекты);
КонецФункции

Функция ПоказатьУзел(Знач Узел, Атрибуты = "", Дочерний = "", ЭтоАтрибут = Ложь) Экспорт

	Представление = "";

	УзелИмя = Узел.Имя;
	УзелЗначение = "";
	Если Узел.Свойство("Значение") Тогда
		УзелЗначение = 	Узел.Значение;
	КонецЕсли;

	Если ЭтоАтрибут Тогда

		АтрибутИмя = СтрЗаменить(УзелИмя, "xml_lang", "xml:lang");
		АтрибутИмя = СтрЗаменить(АтрибутИмя, "_", "-");
		Представление = Представление + " " + АтрибутИмя + "=""" + УзелЗначение + """";

	Иначе

		Если УзелИмя = "Узел" Тогда
			УзелИмя = "div";
			УзелЗначение = "";
		КонецЕсли;

		Если Узел.Имя = "comment" Тогда
			Представление = Представление + "<!-- " + УзелЗначение + " -->";
		Иначе
			Представление = Представление + "<" + УзелИмя + Атрибуты + " id=""" + "_" + Узел.Код + """>";
			Представление = Представление + УзелЗначение;
			Представление = Представление + Дочерний + "</" + УзелИмя + ">";
		КонецЕсли;

	КонецЕсли;

	Возврат Представление;

КонецФункции // ПоказатьУзел()

#Область Интерпретатор

Функция Сумма(Знач Аргумент)
	Перем Значение;
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Значение = Интерпретировать(Аргумент);
	Аргумент = Соседний(Аргумент);
	Пока Аргумент <> Неопределено Цикл
		Значение = Значение + Интерпретировать(Аргумент);
		Аргумент = Соседний(Аргумент);
	КонецЦикла;
	Возврат Значение;
КонецФункции // Сумма()

Функция Разность(Знач Аргумент)
	Перем Значение;
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Значение = Интерпретировать(Аргумент);
	Аргумент = Соседний(Аргумент);
	Если Аргумент = Неопределено Тогда
		Возврат -Значение;
	КонецЕсли;
	Пока Аргумент <> Неопределено Цикл
		Значение = Значение - Интерпретировать(Аргумент);
		Аргумент = Соседний(Аргумент);
	КонецЦикла;
	Возврат Значение;
КонецФункции // Разность()

Функция Произведение(Знач Аргумент)
	Перем Значение;
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Значение = Интерпретировать(Аргумент);
	Аргумент = Соседний(Аргумент);
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Пока Аргумент <> Неопределено Цикл
		Значение = Значение * Интерпретировать(Аргумент);
		Аргумент = Соседний(Аргумент);
	КонецЦикла;
	Возврат Значение;
КонецФункции // Произведение()

Функция Частное(Знач Аргумент)
	Перем Значение;
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Значение = Интерпретировать(Аргумент);
	Аргумент = Соседний(Аргумент);
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Пока Аргумент <> Неопределено Цикл
		Значение = Значение / Интерпретировать(Аргумент);
		Аргумент = Соседний(Аргумент);
	КонецЦикла;
	Возврат Значение;
КонецФункции // Частное()

Функция Остаток(Знач Аргумент)
	Перем Значение;
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Значение = Интерпретировать(Аргумент);
	Аргумент = Соседний(Аргумент);
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Пока Аргумент <> Неопределено Цикл
		Значение = Значение % Интерпретировать(Аргумент);
		Аргумент = Соседний(Аргумент);
	КонецЦикла;
	Возврат Значение;
КонецФункции // Остаток()

// Создать копию тела функции
Функция КопироватьВетку(Узел, Старший, Родитель, Аргументы = Неопределено, ЭтоАтрибут = Ложь, ПервыйВызов = Истина, Служебный = Истина) Экспорт

	ИмяУзла = УзелСвойство(Узел, "Имя");
	ЗначениеУзла = УзелСвойство(Узел, "Значение");

	// Заменить имя параметра на имя аргумента
	Если ИмяУзла = "Объект" Тогда
		Если НЕ Аргументы = Неопределено Тогда
			Аргумент = Аргументы.Получить(ЗначениеУзла);
			Если НЕ Аргумент = Неопределено Тогда
				ЗначениеУзла = Аргумент;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	КопияУзел = НовыйУзел(Новый Структура("Имя, Значение, Старший, Родитель", ИмяУзла, ЗначениеУзла, Старший, Родитель), Служебный);

	Если НЕ ЭтоАтрибут Тогда

		УзелАтрибут = Атрибут(Узел);
		Если НЕ УзелАтрибут = Неопределено Тогда
			УзелАтрибут = КопироватьВетку(УзелАтрибут, КопияУзел, КопияУзел.Код, Аргументы, Истина, Ложь, Служебный);
			КопияУзел.Вставить("Атрибут", УзелАтрибут.Код);
		КонецЕсли;

		УзелДочерний = Дочерний(Узел);
		Если НЕ УзелДочерний = Неопределено Тогда
			УзелДочерний = КопироватьВетку(УзелДочерний, КопияУзел, КопияУзел.Код, Аргументы, , Ложь, Служебный);
		КопияУзел.Вставить("Дочерний", УзелДочерний.Код);
		КонецЕсли;

	КонецЕсли;

	Если ПервыйВызов Тогда
		КопияУзел.Вставить("Соседний", Неопределено);
	Иначе
		УзелСоседний = Соседний(Узел);
		Если НЕ УзелСоседний = Неопределено Тогда
			УзелСоседний = КопироватьВетку(УзелСоседний, КопияУзел, Родитель, Аргументы, ЭтоАтрибут, Ложь, Служебный);
			КопияУзел.Вставить("Соседний", УзелСоседний.Код);
		КонецЕсли;
	КонецЕсли;

	Возврат КопияУзел;

КонецФункции // КопироватьВетку()

// Получить копию фунции
Функция ТелоФункции(Объявление, Применение)

	Аргументы = Новый Соответствие;
	Атрибут = Атрибут(Применение);
	Пока НЕ Атрибут = Неопределено Цикл
		Аргументы.Вставить(Атрибут.Имя, Атрибут.Значение);
		Атрибут = Соседний(Атрибут);
	КонецЦикла;

	Возврат КопироватьВетку(Дочерний(Объявление), Применение, Применение.Родитель, Аргументы);

КонецФункции // ТелоФункции()

Функция Лямбда(Знач Параметр)
	Выражение = Соседний(Параметр);
	Аргумент = Соседний(Выражение);
	Если Параметр.Имя = "Список" Тогда
		Параметр = Дочерний(Параметр);
		Если Не ПараметрыКорректны(Параметр) Тогда
			ВызватьИсключение "Ожидается имя параметра";
		КонецЕсли;
	ИначеЕсли Параметр.Имя <> "Объект" Тогда
		ВызватьИсключение "Ожидается имя параметра";
	КонецЕсли;
	Возврат Аргумент;
КонецФункции // Лямбда()

// вспомогательная функция
Функция ПараметрыКорректны(Параметр)
	Возврат Параметр = Неопределено Или Параметр.Имя = "Объект" И ПараметрыКорректны(Соседний(Параметр));
КонецФункции // ПараметрыКорректны()

Функция ЗначениеВыраженияЕсли(Знач Узел)
	Перем СписокЕсли, СписокТогда, СписокИначе;
	СписокЕсли = Узел;
	СписокТогда = Соседний(СписокЕсли);
	СписокИначе = Соседний(СписокТогда);
	Если Интерпретировать(СписокЕсли) = Истина Тогда
		Возврат Интерпретировать(СписокТогда)
	ИначеЕсли НЕ СписокИначе = Неопределено Тогда
		Возврат Интерпретировать(СписокИначе)
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции // ЗначениеВыраженияЕсли()

Функция ЗначениеВыраженияВыбор(Знач Список)
	Перем СписокКогда, СписокТогда;
	СписокКогда = Список;
	Если СписокКогда = Неопределено Тогда
		ВызватьИсключение "Ожидается условие";
	КонецЕсли;
	Пока СписокКогда <> Неопределено Цикл
		СписокТогда = Соседний(СписокКогда);
		Если СписокТогда = Неопределено Тогда
			ВызватьИсключение "Ожидается выражение";
		КонецЕсли;
		Если Интерпретировать(СписокКогда) = Истина Тогда
			Возврат Интерпретировать(СписокТогда);
		КонецЕсли;
		СписокКогда = Соседний(СписокТогда);
	КонецЦикла;
	ВызватьИсключение "Ни одно из условий не сработало!";
КонецФункции // ЗначениеВыраженияВыбор()

Функция Равно(Знач Аргумент)
	Перем Значение, Результат;
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Значение = Интерпретировать(Аргумент);
	Аргумент = Соседний(Аргумент);
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Результат = Истина;
	Пока Аргумент <> Неопределено И Результат Цикл
		Результат = Результат И Значение = Интерпретировать(Аргумент);
		Аргумент = Соседний(Аргумент);
	КонецЦикла;
	Возврат Результат;
КонецФункции // Равно()

Функция Больше(Знач Аргумент)
	Перем Значение1, Значение2;
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Значение1 = Интерпретировать(Аргумент);
	Аргумент = Соседний(Аргумент);
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Результат = Истина;
	Пока Аргумент <> Неопределено И Результат Цикл
		Значение2 = Интерпретировать(Аргумент);
		Результат = Результат И Значение1 > Значение2;
		Значение1 = Значение2;
		Аргумент = Соседний(Аргумент);
	КонецЦикла;
	Возврат Результат;
КонецФункции // Больше()

Функция Меньше(Знач Аргумент)
	Перем Значение1, Значение2;
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Значение1 = Интерпретировать(Аргумент);
	Аргумент = Соседний(Аргумент);
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Результат = Истина;
	Пока Аргумент <> Неопределено И Результат Цикл
		Значение2 = Интерпретировать(Аргумент);
		Результат = Результат И Значение1 < Значение2;
		Значение1 = Значение2;
		Аргумент = Соседний(Аргумент);
	КонецЦикла;
	Возврат Результат;
КонецФункции // Меньше()

Функция БольшеИлиРавно(Знач Аргумент)
	Перем Значение1, Значение2;
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Значение1 = Интерпретировать(Аргумент);
	Аргумент = Соседний(Аргумент);
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Результат = Истина;
	Пока Аргумент <> Неопределено И Результат Цикл
		Значение2 = Интерпретировать(Аргумент);
		Результат = Результат И Значение1 >= Значение2;
		Значение1 = Значение2;
		Аргумент = Соседний(Аргумент);
	КонецЦикла;
	Возврат Результат;
КонецФункции // БольшеИлиРавно()

Функция МеньшеИлиРавно(Знач Аргумент)
	Перем Значение1, Значение2;
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Значение1 = Интерпретировать(Аргумент);
	Аргумент = Соседний(Аргумент);
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Результат = Истина;
	Пока Аргумент <> Неопределено И Результат Цикл
		Значение2 = Интерпретировать(Аргумент);
		Результат = Результат И Значение1 <= Значение2;
		Значение1 = Значение2;
		Аргумент = Соседний(Аргумент);
	КонецЦикла;
	Возврат Результат;
КонецФункции // МеньшеИлиРавно()

Функция НеРавно(Знач Аргумент)
	Перем Значение1, Значение2;
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Значение1 = Интерпретировать(Аргумент);
	Аргумент = Соседний(Аргумент);
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Результат = Истина;
	Пока Аргумент <> Неопределено И Результат Цикл
		Значение2 = Интерпретировать(Аргумент);
		Результат = Результат И Значение1 <> Значение2;
		Значение1 = Значение2;
		Аргумент = Соседний(Аргумент);
	КонецЦикла;
	Возврат Результат;
КонецФункции // НеРавно()

Функция ЛогическоеИ(Знач Аргумент)
	Перем Значение;
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Результат = Истина;
	Пока Аргумент <> Неопределено И Результат Цикл
		Значение = Интерпретировать(Аргумент);
		Результат = Результат И Значение;
		Аргумент = Соседний(Аргумент);
	КонецЦикла;
	Возврат Результат;
КонецФункции // ЛогическоеИ()

Функция ЛогическоеИли(Знач Аргумент)
	Перем Значение;
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Результат = Ложь;
	Пока Аргумент <> Неопределено И Не Результат Цикл
		Значение = Интерпретировать(Аргумент);
		Результат = Результат Или Значение;
		Аргумент = Соседний(Аргумент);
	КонецЦикла;
	Возврат Результат;
КонецФункции // ЛогическоеИли()

Функция ЛогическоеНе(Знач Аргумент)
	Перем Значение;
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Результат = Истина;
	Пока Аргумент <> Неопределено И Результат Цикл
		Значение = Интерпретировать(Аргумент);
		Результат = Результат И Не Значение;
		Аргумент = Соседний(Аргумент);
	КонецЦикла;
	Возврат Результат;
КонецФункции // ЛогическоеНе()

Функция ВывестиСообщение(Знач Аргумент)
	Перем Значения;
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Значения = Новый Массив;
	Пока Аргумент <> Неопределено Цикл
		Значения.Добавить(Интерпретировать(Аргумент));
		Аргумент = Соседний(Аргумент);
	КонецЦикла;
	Процесс.ЗаписатьСобытие("Интерпретатор", СтрСоединить(Значения, " "), 1);
	Возврат Неопределено;
КонецФункции // ВывестиСообщение

// Установка значения объекта узла
Функция ОбъектЗначение(Знач Узел)
	ИмяЭлемента = Узел.Значение;
	Значение = Дочерний(Узел);
	// Если Значение = Неопределено Тогда
	// 	Узел.Вставить("Дочерний", Пустой.Код);
	// 	Значение = Пустой;
	// КонецЕсли;
	// Установить для обновления узлы которые нужно обновить
	Объекты = УзелСостояние(Узел, "Объекты");
	Если НЕ Объекты = Неопределено Тогда
		УзлыОбновить.Вставить(Значение, Объекты);
	КонецЕсли;
	// поиск поиск глобального обявления
	Узел = Узел.Старший;
	Пока НЕ Узел = Неопределено Цикл
		Если Узел.Имя = "Перем" Тогда
			Если Узел.Значение = ИмяЭлемента Тогда
				// Установить для обновления узлы которые нужно обновить
				Объекты = УзелСостояние(Узел, "Объекты");
				Если НЕ Объекты = Неопределено Тогда
					УзлыОбновить.Вставить(Значение, Объекты);
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЕсли;
		Узел = Узел.Старший;
	КонецЦикла;
КонецФункции

// поиск объекта вглубь
Функция НайтиОбъект(Знач Узел, ИмяЭлемента) Экспорт
	Объявление = Неопределено;
	Если Узел.Имя = "Пусть" ИЛИ Узел.Имя = "Перем" Тогда
		Если Узел.Значение = ИмяЭлемента Тогда
			Возврат Узел;
		КонецЕсли;
	Иначе
		УзелДочерний = Дочерний(Узел);
		Если НЕ УзелДочерний = Неопределено Тогда
			Объявление = НайтиОбъект(УзелДочерний, ИмяЭлемента);
		КонецЕсли;
	КонецЕсли;
	Если Объявление = Неопределено Тогда
		УзелСоседний = Соседний(Узел);
		Если НЕ УзелСоседний = Неопределено Тогда
			Объявление = НайтиОбъект(УзелСоседний, ИмяЭлемента);
		КонецЕсли;
	КонецЕсли;
	Возврат Объявление;
КонецФункции // НайтиОбъект()

// Поиск объявления объекта
Функция ОбъявлениеОбъекта(Знач Узел, Знач ИмяЭлемента) Экспорт
	НачальныйУзел = Узел;
	// Поиск объявления объекта
	Узел = Узел.Старший;
	Пока НЕ Узел = Неопределено Цикл
		Если Узел.Имя = "Функция" Тогда
			Если Узел.Значение = ИмяЭлемента Тогда
				Прервать;
			КонецЕсли;
		ИначеЕсли Узел.Имя = "Использовать" Тогда
			ИмяФункции = СтрРазделить(НачальныйУзел.Значение, ".");
			Если ИмяФункции.Количество() = 2 Тогда
				Если ИмяФункции[0] = Узел.Значение Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Узел.Имя = "Пусть" ИЛИ Узел.Имя = "Перем" Тогда
			Если Узел.Значение = ИмяЭлемента Тогда
				// объявление найдено, зарегистрируем свой узел для обновлений
				Объекты = УзелСостояние(Узел, "Объекты");
				Если Объекты = Неопределено Тогда
					Объекты = Новый Соответствие;
					УзелСостояниеЗначение(Узел, "Объекты", Объекты);
				КонецЕсли;
				Объекты.Вставить(НачальныйУзел.Код, НачальныйУзел);
				Прервать;
			КонецЕсли;
		КонецЕсли;
		Узел = Узел.Старший;
	КонецЦикла;
	Если Узел = Неопределено Тогда
		Процесс.ЗаписатьСобытие("Интерпретатор", СтрШаблон("Неизвестный объект %1", ИмяЭлемента), 3);
		Возврат Неопределено;
	КонецЕсли;

	ОпределениеОбъекта = Неопределено;

	Если Узел.Имя = "Функция" Тогда
		ОпределениеОбъекта = ТелоФункции(Узел, НачальныйУзел);
	ИначеЕсли Узел.Имя = "Использовать" Тогда
		// если это библиотечная функция
		ИмяФункции = СтрРазделить(НачальныйУзел.Значение, ".");
		Если ИмяФункции.Количество() = 2 Тогда
			ИмяБиблиотеки = ИмяФункции[0];
			ИмяФункции = ИмяФункции[1];
			Рефлектор = Новый Рефлектор;
			Библиотека = Библиотеки.Получить(ИмяБиблиотеки);
			Если Библиотека = Неопределено Тогда
				Библиотека = ЗагрузитьСценарий(ОбъединитьПути(ТекущийКаталог(), "lib", ИмяБиблиотеки + ".os"));
				Библиотеки.Вставить(ИмяБиблиотеки, Библиотека);
			КонецЕсли;
			Если НЕ Библиотека = Неопределено Тогда
				ОпределениеОбъекта = Неопределено;
				ТаблицаМетодов = Рефлектор.ПолучитьТаблицуМетодов(Библиотека);
				Для каждого Метод Из ТаблицаМетодов Цикл
					Если Метод.Имя = ИмяФункции Тогда
						Аргументы = Новый Массив;
						Аргумент = Атрибут(НачальныйУзел);
						Пока НЕ Аргумент = Неопределено Цикл
							Аргументы.Добавить(Интерпретировать(Аргумент));
							Аргумент = Соседний(Аргумент);
						КонецЦикла;
						Параметры = Новый Массив;
						Параметры.Добавить(ЭтотОбъект);
						Параметры.Добавить(Аргументы);
						ОпределениеОбъекта = Рефлектор.ВызватьМетод(Библиотека, ИмяФункции, Параметры);
						Прервать;
					КонецЕсли
				КонецЦикла;
				Если ОпределениеОбъекта = Неопределено Тогда
					ВызватьИсключение "Функция " + ИмяФункции + " не найдена";
				КонецЕсли;
				Возврат ОпределениеОбъекта;
			КонецЕсли;
			ВызватьИсключение "Библиотека " + ИмяБиблиотеки + " не найдена";
		КонецЕсли;
	КонецЕсли;

	Если Узел.Имя = "Функция" ИЛИ Узел.Имя = "Использовать" Тогда
		Если НЕ ОпределениеОбъекта = Неопределено Тогда
			НачальныйУзел.Вставить("Дочерний", ОпределениеОбъекта.Код);
			ОпределениеОбъекта.Вставить("Старший", НачальныйУзел);
		КонецЕсли;
	ИначеЕсли Узел.Имя = "Пусть" Тогда
		ОпределениеОбъекта = УзелСостояние(Узел, "ОпределениеОбъекта");
		Если ОпределениеОбъекта = Неопределено Тогда
			ОпределениеОбъекта = Дочерний(Узел);
		КонецЕсли;
	ИначеЕсли Узел.Имя = "Перем" Тогда
		ОпределениеОбъекта = УзелСостояние(Узел, "ОпределениеОбъекта");
	КонецЕсли;

	Возврат ОпределениеОбъекта;
КонецФункции // ОбъявлениеОбъекта()

Функция ОбновитьПредставление(знОбновить = Ложь) Экспорт
	Представление = "";
	Если знОбновить Тогда
		Обновить = Истина;
	КонецЕсли;
	Если Обновить Тогда
		Представление = Интерпретировать(Фронт);
	КонецЕсли;

	Циклов = 0;
	Пока Циклов < 5 И УзлыОбновить.Количество() Цикл

		СписокУзлов = Новый Соответствие;
		// узлы которые нужно обновить
		Для каждого элУзел Из УзлыОбновить Цикл
			Объекты = элУзел.Значение;
			НовоеЗначениеУзла = элУзел.Ключ;
			Для каждого элОбъект Из Объекты Цикл
				РодительУзел = элОбъект.Значение;
				ПервыйНайден = Ложь;
				Если НЕ НовоеЗначениеУзла = "ОбновитьОбъект" Тогда
					РодительУзел.Вставить("Дочерний", НовоеЗначениеУзла.Код);
				КонецЕсли;
				Пока НЕ РодительУзел = Неопределено Цикл
					Если РодительУзел.Имя = "Узел" Тогда
						УзелСостояниеЗначение(РодительУзел, "Состояние", Неопределено);
						Если НЕ ПервыйНайден Тогда
							// будет обновлено состояние узла
							СписокУзлов.Вставить(РодительУзел.Код, РодительУзел);
							УзелСостояниеЗначение(РодительУзел, "ОбновитьУзел", Истина);
							ПервыйНайден = Истина;
						КонецЕсли;
					КонецЕсли;
					РодительУзел = Родитель(РодительУзел);
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		УзлыОбновить.Очистить();

		Если СписокУзлов.Количество() Тогда
			Для каждого элУзел Из СписокУзлов Цикл
				Если НЕ элУзел.Значение = Корень Тогда
					Представление = Представление + Интерпретировать(элУзел.Значение);
				Иначе
					Сообщить("Зачем корень обновлять?");
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		Циклов = Циклов + 1;
		Сообщить("цикл:" + Циклов);

	КонецЦикла;
	УзлыОбновить.Очистить();

	Обновить = Ложь;
КонецФункции


Функция ПолучитьОпределениеОбъекта(Знач Узел) Экспорт
	ОпределениеОбъекта = Дочерний(Узел);
	Если ОпределениеОбъекта = Неопределено Тогда
		ОпределениеОбъекта = ОбъявлениеОбъекта(Узел, Узел.Значение);
	КонецЕсли;
КонецФункции // ПолучитьОпределениеОбъекта()


Функция Интерпретировать(Знач Узел, ЭтоАтрибут = Ложь, НачальныйУзел = Истина) Экспорт
	Перем Имя, Значение, Лямбда, Состояние;

	Если НЕ ТипЗнч(Узел) = Тип("Структура") Тогда
		//Возврат Узел;
		ВызватьИсключение "Неверный узел: " + Узел;
	КонецЕсли;

	Состояние = "";

	Имя = Узел.Имя;
	Значение = УзелСвойство(Узел, "Значение");

	Если Имя = "Объект" Тогда
		//Сообщить(Значение);
		Если Значение = "Пустой" Тогда
			Состояние = (Интерпретировать(Дочерний(Узел)) = Пустой);
		ИначеЕсли Значение = "Если" Тогда
			Состояние = ЗначениеВыраженияЕсли(Дочерний(Узел));
		ИначеЕсли Значение = "Выбор" Тогда
			Состояние = ЗначениеВыраженияВыбор(Дочерний(Узел));
		ИначеЕсли Значение = "Сообщить" Тогда
			ВывестиСообщение(Дочерний(Узел));
		ИначеЕсли Значение = "+" Тогда
			Состояние = Сумма(Дочерний(Узел));
		ИначеЕсли Значение = "-" Тогда
			Состояние = Разность(Дочерний(Узел));
		ИначеЕсли Значение = "*" Тогда
			Состояние = Произведение(Дочерний(Узел));
		ИначеЕсли Значение = "/" Тогда
			Состояние = Частное(Дочерний(Узел));
		ИначеЕсли Значение = "%" Тогда
			Состояние = Остаток(Дочерний(Узел));
		ИначеЕсли Значение = "=" Тогда
			Состояние = Равно(Дочерний(Узел));
		ИначеЕсли Значение = ">" Тогда
			Состояние = Больше(Дочерний(Узел));
		ИначеЕсли Значение = "<" Тогда
			Состояние = Меньше(Дочерний(Узел));
		ИначеЕсли Значение = ">=" Тогда
			Состояние = БольшеИлиРавно(Дочерний(Узел));
		ИначеЕсли Значение = "<=" Тогда
			Состояние = МеньшеИлиРавно(Дочерний(Узел));
		ИначеЕсли Значение = "<>" Тогда
			Состояние = НеРавно(Дочерний(Узел));
		ИначеЕсли Значение = "И" Тогда
			Состояние = ЛогическоеИ(Дочерний(Узел));
		ИначеЕсли Значение = "ИЛИ" Тогда
			Состояние = ЛогическоеИли(Дочерний(Узел));
		ИначеЕсли Значение = "НЕ" Тогда
			Состояние = ЛогическоеНе(Дочерний(Узел));
		ИначеЕсли Значение = "Истина" Тогда
			Состояние = Истина;
		ИначеЕсли Значение = "Ложь" Тогда
			Состояние = Ложь;
		ИначеЕсли Значение = "Неопределено" Тогда
			Состояние = Неопределено;
		Иначе
			// получить значение объекта
			ОпределениеОбъекта = Дочерний(Узел);
			Если ОпределениеОбъекта = Неопределено Тогда
				ОпределениеОбъекта = ОбъявлениеОбъекта(Узел, Значение);
			КонецЕсли;
			Если НЕ ОпределениеОбъекта = Неопределено Тогда
				Состояние = УзелСостояние(ОпределениеОбъекта, "ЗначениеОбъекта"); // оптимизация
				Если Состояние = Неопределено Тогда
					Состояние = Интерпретировать(ОпределениеОбъекта);
					УзелСостояниеЗначение(ОпределениеОбъекта, "ЗначениеОбъекта", Состояние); // оптимизация
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;
	ИначеЕсли Имя = "Пустой" Тогда
		Состояние = Пустой;
	ИначеЕсли Имя = "Перем" Тогда
		ОбъектЗначение(Узел);
	ИначеЕсли Имя = "Пусть" Тогда
		ОбъектЗначение(Узел);
	ИначеЕсли Имя = "Ссылка" Тогда
		Состояние = Дочерний(Узел);
	ИначеЕсли Имя = "Число" Тогда
		Состояние = Число(Значение);
	ИначеЕсли Имя = "Строка" Тогда
		Состояние = "" + Значение;
	ИначеЕсли Имя = "Функция" Тогда
		// это объявление
	ИначеЕсли Имя = "Свойство" Тогда
		Элемент = Интерпретировать(Дочерний(Узел));
		Состояние = УзелСвойство(Элемент, Значение);
	ИначеЕсли Имя = "Значение" Тогда
		Элемент = Интерпретировать(Дочерний(Узел));
		Состояние = Интерпретировать(Элемент);
	ИначеЕсли Имя = "Атрибут" Тогда
		Элемент = Интерпретировать(Дочерний(Узел));
		Состояние = НайтиАтрибут(Атрибут(Элемент), Значение);
	ИначеЕсли Имя = "Первый" Тогда
		Список = Интерпретировать(Дочерний(Узел));
		Элемент = Дочерний(Список);
		Если Элемент = Неопределено Тогда
			Элемент = Пустой;
		КонецЕсли;
		Состояние = Элемент;
	ИначеЕсли Имя = "Соседний" Тогда
		Элемент = Интерпретировать(Дочерний(Узел));
		Если НЕ Элемент = Неопределено Тогда
			Элемент = Соседний(Элемент);
		КонецЕсли;
		Если Элемент = Неопределено Тогда
			Элемент = Пустой;
		КонецЕсли;
		Состояние = Элемент;
	ИначеЕсли Имя = "Список" Тогда
		Состояние = Интерпретировать(Дочерний(Узел), , Ложь);
	ИначеЕсли Имя = "Лямбда" Тогда
		// Параметры = Дочерний(Узел);
		// Аргументы = Лямбда(Параметры);
		// Состояние = ТелоФункции(Параметры, Аргументы);
	ИначеЕсли Имя = "Использовать" Тогда

	Иначе

		Если Имя = "Узел" Тогда

			Состояние = Неопределено;

			Если Значение = "Фронт" Тогда
				Если Фронт = Неопределено Тогда
					Фронт = Узел;
					Состояние = "";
				КонецЕсли;
			КонецЕсли;

			Если УзелСостояние(Узел, "ОбновитьУзел") = Ложь ИЛИ Обновить Тогда
				Если НачальныйУзел И НЕ Обновить Тогда
					Состояние = "";
				Иначе
					Состояние = УзелСостояние(Узел, "Состояние");
				КонецЕсли;
			КонецЕсли;

			Если Состояние = Неопределено Тогда
				УзелДочерний = Дочерний(Узел);
				Если НЕ УзелДочерний = Неопределено Тогда
					Состояние = ПоказатьУзел(Узел, , Интерпретировать(Дочерний(Узел), , Ложь));
				Иначе
					Состояние = "";
				КонецЕсли;
				УзелСостояниеЗначение(Узел, "Состояние", Состояние);
				УзелСостояниеЗначение(Узел, "ОбновитьУзел", Ложь);
			КонецЕсли;

		Иначе

			Если НЕ ЭтоАтрибут Тогда
				УзелДочерний = Дочерний(Узел);
				Если НЕ УзелДочерний = Неопределено Тогда
					ЗначениеУзелДочерний = Интерпретировать(УзелДочерний, , Ложь);
				КонецЕсли;
				УзелАтрибут = Атрибут(Узел);
				Если НЕ УзелАтрибут = Неопределено Тогда
					ЗначениеУзелАтрибут = Интерпретировать(УзелАтрибут, Истина, Ложь);
				КонецЕсли;
				Состояние = ПоказатьУзел(Узел, ЗначениеУзелАтрибут, ЗначениеУзелДочерний);
			Иначе
				Состояние = ПоказатьУзел(Узел, , , Истина);
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Если НЕ НачальныйУзел Тогда
		УзелСоседний = Соседний(Узел);
		Если НЕ УзелСоседний = Неопределено Тогда
			Состояние = "" + Состояние + Интерпретировать(УзелСоседний, ЭтоАтрибут, Ложь);
		КонецЕсли;
	КонецЕсли;

	Шаг = Шаг + 1;

	Возврат Состояние;

КонецФункции // Интерпретировать()

#КонецОбласти // Интерпретатор

Функция ПолучитьУзел(Код, Старший = Неопределено) Экспорт
	Узел = Узлы.Получить(Код);
	Если НЕ Узел = Неопределено Тогда
		Возврат Узел;
	КонецЕсли;
	// Если Лев(Код, 1) = "s" Тогда
	// 	Возврат Неопределено
	// КонецЕсли;
	Стр = Данные.ПолучитьСтроку(Число(Код));
	// Попытка
	// 	Стр = Данные.ПолучитьСтроку(Число(Код));
	// Исключение
	// 	ВызватьИсключение "Неверный код узла: " + Код;
	// КонецПопытки;
	Стр = СтрРазделить(Стр, Символы.Таб);
	Ключ = Неопределено;
	Для Каждого знСтр Из Стр Цикл
		Если Ключ = Неопределено Тогда
			Ключ = знСтр;
			Если Ключ = "И" Тогда
				Ключ = "Имя";
			ИначеЕсли Ключ = "З" Тогда
				Ключ = "Значение";
			ИначеЕсли Ключ = "Д" Тогда
				Ключ = "Дочерний";
			ИначеЕсли Ключ = "С" Тогда
				Ключ = "Соседний";
			ИначеЕсли Ключ = "А" Тогда
				Ключ = "Атрибут";
			КонецЕсли;
		Иначе
			Если Узел = Неопределено Тогда
				Узел = Новый Структура("Код", Код);
			КонецЕсли;
			Если Ключ = "Значение" Тогда
				знСтр = СтрЗаменить(знСтр, "#x9", Символы.Таб);
				знСтр = СтрЗаменить(знСтр, "#xA", Символы.ПС);
				знСтр = СтрЗаменить(знСтр, "#xD", Символы.ВК);
			КонецЕсли;
			Узел.Вставить(Ключ, знСтр);
			Ключ = Неопределено;
		КонецЕсли;
	КонецЦикла;
	Если НЕ Старший = Неопределено Тогда
		Узел.Вставить("Старший", Старший);
		Если УзелСвойство(Старший, "Соседний") = Код Тогда
			Узел.Вставить("Родитель", Старший.Родитель);
		Иначе
			Узел.Вставить("Родитель", Старший.Код);
		КонецЕсли;
	КонецЕсли;
	Узлы.Вставить(Код, Узел);
	Возврат Узел;
КонецФункции // ПолучитьУзел()

Функция НовыйУзел(Узел, Служебный = Ложь) Экспорт
	Если Служебный Тогда
		Количество = "s" + Узлы.Количество();
	Иначе
		Данные.ДобавитьСтроку("");
		Количество = Данные.КоличествоСтрок();
	КонецЕсли;
	Узел.Вставить("Код", "" + Количество);
	Узлы.Вставить(Узел.Код, Узел);
	Возврат Узел;
КонецФункции // НовыйУзел(СтруктураУзла)

Функция НовыйРодитель(Дочерний, СтруктураУзла, Служебный = Ложь) Экспорт
	СтруктураУзла.Вставить("Старший", Дочерний.Старший);
	СтруктураУзла.Вставить("Родитель", Дочерний.Родитель);
	СтруктураУзла.Вставить("Дочерний", Дочерний.Код);
	НовыйУзел = НовыйУзел(СтруктураУзла, Служебный);
	СтаршийУзел = Старший(Дочерний);
	Если НЕ Дочерний(СтаршийУзел) = Неопределено Тогда
		Если СтаршийУзел.Дочерний = Дочерний.Код Тогда
			СтаршийУзел.Дочерний = НовыйУзел.Код;
		КонецЕсли;
	КонецЕсли;
	Если НЕ Соседний(СтаршийУзел) = Неопределено Тогда
		Если СтаршийУзел.Соседний = Дочерний.Код Тогда
			СтаршийУзел.Соседний = НовыйУзел.Код;
		КонецЕсли;
	КонецЕсли;
	СоседнийУзел = Соседний(Дочерний);
	Если НЕ СоседнийУзел = Неопределено Тогда
		СоседнийУзел.Старший = НовыйУзел;
		НовыйУзел.Вставить("Соседний", СоседнийУзел.Код);
	КонецЕсли;
	Дочерний.Вставить("Соседний", Неопределено);
	Дочерний.Вставить("Старший", НовыйУзел);
	Дочерний.Вставить("Родитель", НовыйУзел.Код);
	Возврат НовыйУзел;
КонецФункции // НовыйРодитель()

Функция УдалитьРодителя(Дочерний) Экспорт
	РодительУзел = Родитель(Дочерний);
	СтаршийУзел = Старший(РодительУзел);
	Если УзелСвойство(СтаршийУзел, "Дочерний") = РодительУзел.Код Тогда
		СтаршийУзел.Дочерний = Дочерний.Код;
	КонецЕсли;
	Если УзелСвойство(СтаршийУзел, "Соседний") = РодительУзел.Код Тогда
		СтаршийУзел.Соседний = Дочерний.Код;
	КонецЕсли;
	Дочерний.Вставить("Старший", РодительУзел.Старший);
	Дочерний.Вставить("Родитель", РодительУзел.Родитель);
	СоседнийУзел = Дочерний;
	Пока НЕ УзелСвойство(СоседнийУзел, "Соседний") = Неопределено Цикл
		СоседнийУзел = Соседний(СоседнийУзел);
	КонецЦикла;
	СоседнийУзелРодитель = Соседний(РодительУзел);
	Если НЕ СоседнийУзелРодитель = Неопределено Тогда
		СоседнийУзел.Вставить("Соседний", СоседнийУзелРодитель.Код);
		СоседнийУзелРодитель.Старший = СоседнийУзел;
	КонецЕсли;
КонецФункции // УдалитьРодителя()

Функция НовыйДочерний(Старший, СтруктураУзла, Служебный = Ложь) Экспорт
	СтруктураУзла.Вставить("Старший", Старший);
	УзелСоседний = Дочерний(Старший);
	Если НЕ УзелСоседний = Неопределено Тогда
		СтруктураУзла.Вставить("Соседний", УзелСоседний.Код);
	КонецЕсли;
	НовыйУзел = НовыйУзел(СтруктураУзла, Служебный);
	Старший.Вставить("Дочерний", НовыйУзел.Код);
	Если НЕ УзелСоседний = Неопределено Тогда
		УзелСоседний.Вставить("Старший", НовыйУзел);
	КонецЕсли;
	Возврат НовыйУзел;
КонецФункции // НовыйДочерний()

Функция НовыйСоседний(Старший, СтруктураУзла, Служебный = Ложь) Экспорт
	СтруктураУзла.Вставить("Старший", Старший);
	УзелСоседний = Соседний(Старший);
	Если НЕ УзелСоседний = Неопределено Тогда
		СтруктураУзла.Вставить("Соседний", УзелСоседний.Код);
	КонецЕсли;
	НовыйУзел = НовыйУзел(СтруктураУзла, Служебный);
	Старший.Вставить("Соседний", НовыйУзел.Код);
	Если НЕ УзелСоседний = Неопределено Тогда
		УзелСоседний.Вставить("Старший", НовыйУзел);
	КонецЕсли;
	Возврат НовыйУзел;
КонецФункции // НовыйСоседний()

Функция НовыйАтрибут(Старший, СтруктураУзла, Служебный = Ложь) Экспорт
	СтруктураУзла.Вставить("Старший", Старший);
	УзелСоседний = Атрибут(Старший);
	Если НЕ УзелСоседний = Неопределено Тогда
		СтруктураУзла.Вставить("Соседний", УзелСоседний.Код);
	КонецЕсли;
	НовыйУзел = НовыйУзел(СтруктураУзла, Служебный);
	Старший.Вставить("Атрибут", НовыйУзел.Код);
	Если НЕ УзелСоседний = Неопределено Тогда
		УзелСоседний.Вставить("Старший", НовыйУзел);
	КонецЕсли;
	Возврат НовыйУзел;
КонецФункции // НовыйАтрибут()

Функция УдалитьУзел(Узел, Совсем = Истина, НачальныйУзел = Истина) Экспорт

	УзелСоседний = Соседний(Узел);

	Если НачальныйУзел Тогда
		УзелСтарший = Старший(Узел);
		Если НЕ УзелСвойство(УзелСтарший, "Атрибут") = Неопределено Тогда
			Если УзелСтарший.Атрибут = Узел.Код Тогда
				Если УзелСоседний = Неопределено Тогда
					//УзелСтарший.Удалить("Атрибут");
					УзелСтарший.Атрибут = Неопределено;
				Иначе
					УзелСтарший.Атрибут = УзелСоседний.Код;
					УзелСоседний.Старший = УзелСтарший;
				КонецЕсли
			КонецЕсли;
		КонецЕсли;
		Если НЕ УзелСвойство(УзелСтарший, "Дочерний") = Неопределено Тогда
			Если УзелСтарший.Дочерний = Узел.Код Тогда
				Если УзелСоседний = Неопределено Тогда
					//УзелСтарший.Удалить("Дочерний");
					УзелСтарший.Дочерний = Неопределено;
				Иначе
					УзелСтарший.Дочерний = УзелСоседний.Код;
					УзелСоседний.Старший = УзелСтарший;
				КонецЕсли
			КонецЕсли;
		КонецЕсли;
		Если НЕ УзелСвойство(УзелСтарший, "Соседний") = Неопределено Тогда
			Если УзелСтарший.Соседний = Узел.Код Тогда
				Если УзелСоседний = Неопределено Тогда
					//УзелСтарший.Удалить("Соседний");
					УзелСтарший.Соседний = Неопределено;
				Иначе
					УзелСтарший.Соседний = УзелСоседний.Код;
					УзелСоседний.Старший = УзелСтарший;
				КонецЕсли
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если НЕ УзелСоседний = Неопределено Тогда
			УдалитьУзел(УзелСоседний, Совсем, Ложь);
		КонецЕсли;
	КонецЕсли;

	Узлы.Удалить(Узел.Код);
	Если НЕ Лев(Узел.Код, 1) = "s" Тогда
		Данные.ЗаменитьСтроку(Узел.Код, "");
	КонецЕсли;

	Если Совсем Тогда
		Если НЕ УзелСвойство(Узел, "Атрибут") = Неопределено Тогда
			УдалитьУзел(Атрибут(Узел), Совсем, Ложь);
		КонецЕсли;
		Если НЕ УзелСвойство(Узел, "Дочерний") = Неопределено Тогда
			УдалитьУзел(Дочерний(Узел), Совсем, Ложь);
		КонецЕсли;
		ОсвободитьОбъект(Узел);
	КонецЕсли;

КонецФункции // УдалитьУзел(Узел)

Функция КопироватьУзел(Узел, Буфер, ПервыйВызов = Истина) Экспорт

	Буфер.Вставить(Узел.Код, Узел);

	Если НЕ УзелСвойство(Узел, "Атрибут") = Неопределено Тогда
		КопироватьУзел(Атрибут(Узел), Буфер, Ложь);
	КонецЕсли;

	Если НЕ УзелСвойство(Узел, "Дочерний") = Неопределено Тогда
		КопироватьУзел(Дочерний(Узел), Буфер, Ложь);
	КонецЕсли;

	Если НЕ ПервыйВызов Тогда
		Если НЕ УзелСвойство(Узел, "Соседний") = Неопределено Тогда
			КопироватьУзел(Соседний(Узел), Буфер, Ложь);
		КонецЕсли;
	КонецЕсли;

КонецФункции // КопироватьУзел()

Функция НайтиСоседний(Знач Узел, ИмяУзла) Экспорт
	Пока НЕ Узел = Неопределено Цикл
		Если Узел.Имя = ИмяУзла Тогда
			Прервать;
		КонецЕсли;
		Узел = Соседний(Узел);
	КонецЦикла;
	Возврат Узел;
КонецФункции // НайтиСоседний()

Функция НайтиАтрибут(Знач Узел, ИмяАтрибута) Экспорт
	Пока НЕ Узел = Неопределено Цикл
		Если Узел.Имя = ИмяАтрибута Тогда
			Возврат Узел.Значение;
		КонецЕсли;
		Узел = Соседний(Узел);
	КонецЦикла;
	Возврат Неопределено;
КонецФункции // НайтиАтрибут()

Функция Соседний(Знач Узел) Экспорт
	Если НЕ ТипЗнч(Узел) = Тип("Структура") Тогда
		ВызватьИсключение "Неверный узел";
	КонецЕсли;
	СоседнийУзел = УзелСвойство(Узел, "Соседний");
	Если НЕ СоседнийУзел = Неопределено Тогда
		СоседнийУзел = ПолучитьУзел(СоседнийУзел, Узел);
	КонецЕсли;
	Возврат СоседнийУзел;
КонецФункции // Соседний()

Функция Дочерний(Знач Узел) Экспорт
	Если НЕ ТипЗнч(Узел) = Тип("Структура") Тогда
		ВызватьИсключение "Неверный узел";
	КонецЕсли;
	ДочернийУзел = УзелСвойство(Узел, "Дочерний");
	Если НЕ ДочернийУзел = Неопределено Тогда
		ДочернийУзел = ПолучитьУзел(ДочернийУзел, Узел);
	КонецЕсли;
	Возврат ДочернийУзел;
КонецФункции // Дочерний()

Функция Старший(Знач Узел) Экспорт
	Если НЕ ТипЗнч(Узел) = Тип("Структура") Тогда
		ВызватьИсключение "Неверный узел";
	КонецЕсли;
	Возврат Узел.Старший;
КонецФункции // Старший()

Функция Родитель(Знач Узел, НайтиРодителя = Истина) Экспорт
	Если НЕ ТипЗнч(Узел) = Тип("Структура") Тогда
		ВызватьИсключение "Неверный узел";
	КонецЕсли;
	Если НЕ НайтиРодителя Тогда
		Если НЕ УзелСвойство(Узел, "Родитель") = Неопределено Тогда
			УзелРодитель = ПолучитьУзел(Узел.Родитель);
			Если НЕ УзелРодитель = Неопределено Тогда
				Возврат УзелРодитель;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	УзелКод = Узел.Код;
	СтаршийУзел = Старший(Узел);
	Пока НЕ СтаршийУзел = Неопределено Цикл
		Если НЕ УзелСвойство(СтаршийУзел, "Атрибут") = Неопределено Тогда
			Если СтаршийУзел.Атрибут = УзелКод Тогда
				Узел.Вставить("Родитель", СтаршийУзел.Код);
				Возврат СтаршийУзел;
			КонецЕсли;
		КонецЕсли;
		Если НЕ УзелСвойство(СтаршийУзел, "Дочерний") = Неопределено Тогда
			Если СтаршийУзел.Дочерний = УзелКод Тогда
				Узел.Вставить("Родитель", СтаршийУзел.Код);
				Возврат СтаршийУзел;
			КонецЕсли;
		КонецЕсли;
		УзелКод = СтаршийУзел.Код;
		СтаршийУзел = Старший(СтаршийУзел);
	КонецЦикла;
	//ВызватьИсключение "Родитель узла " + Узел.Код + " не найден";
	Возврат Неопределено;
КонецФункции // Родитель()

Функция Атрибут(Знач Узел) Экспорт
	Если НЕ ТипЗнч(Узел) = Тип("Структура") Тогда
		ВызватьИсключение "Неверный узел";
	КонецЕсли;
	АтрибутУзел = УзелСвойство(Узел, "Атрибут");
	Если НЕ АтрибутУзел = Неопределено Тогда
		АтрибутУзел = ПолучитьУзел(АтрибутУзел, Узел);
	КонецЕсли;
	Возврат АтрибутУзел;
КонецФункции // Атрибут()

Функция СохранитьДанные(ИмяФайлаДанных) Экспорт
	Для каждого элУзел Из Узлы Цикл
		Если НЕ элУзел.Значение = Неопределено И НЕ Лев(элУзел.Ключ, 1) = "s" Тогда
			Данные.ЗаменитьСтроку(ЭлУзел.Ключ, СтруктуруВСтроку(элУзел.Значение));
		КонецЕсли;
	КонецЦикла;
	Данные.Записать(ИмяФайлаДанных);
КонецФункции // СохранитьДанные()


Функция ПрочитатьВетку(Знач Узел, Знач СтаршийУзел = Неопределено)
	Если НЕ Узел = Неопределено Тогда

		Если НЕ СтаршийУзел = Неопределено Тогда
			УзелСтарший = УзелСвойство(Узел, "Старший");
			Если НЕ УзелСтарший = СтаршийУзел Тогда
				Сообщить("Узел " + Узел.Код + " неверный код старшего узла");
				Узел.Вставить("Старший", СтаршийУзел);
			КонецЕсли;
		КонецЕсли;

		ПолучитьУзел(Узел.Код, СтаршийУзел);
		ПрочитатьВетку(Атрибут(Узел), Узел);
		ПрочитатьВетку(Дочерний(Узел), Узел);
		ПрочитатьВетку(Соседний(Узел), Узел);
	КонецЕсли;
КонецФункции

Функция ПроверитьДанные()
	ПрочитатьВетку(Дочерний(Корень));
	Для нСтр = 1 По Данные.КоличествоСтрок() Цикл
		Если Узлы.Получить(Строка(нСтр)) = Неопределено Тогда
			Стр = Данные.ПолучитьСтроку(нСтр);
			Если НЕ Стр = "" Тогда
				Сообщить("Забытая строка " + нСтр);
				Данные.ЗаменитьСтроку(нСтр, "");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецФункции


Функция ПриСозданииОбъекта(обПроцесс, ИмяФайлаДанных = Неопределено)
	Процесс = обПроцесс;
	Количество = 0;
	Шаг = 0;
	Пустой = Новый Структура;
	Данные = Новый ТекстовыйДокумент;
	Если НЕ ИмяФайлаДанных = Неопределено Тогда
		Сообщить(ИмяФайлаДанных);
		Данные.Прочитать(ИмяФайлаДанных);
		Количество = Данные.КоличествоСтрок();
	КонецЕсли;
	Библиотеки = Новый Соответствие;
	Узлы = Новый Соответствие;
	УзлыОбновить = Новый Соответствие;
	Корень = ПолучитьУзел("1");
	Корень.Вставить("Старший", Неопределено);
	Корень.Вставить("Родитель", Неопределено);
	Обновить = Ложь;
	Изменены = Ложь;
	//ПроверитьДанные();
	Интерпретировать(Корень);
	Если Фронт = Неопределено Тогда
		Сообщить("Фронт не найден");
		Фронт = Корень;
	КонецЕсли;
КонецФункции
