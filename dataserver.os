// MIT License
// Copyright (c) 2018 Vladimir Vasiliev
// https://github.com/vasvl123/OneScriptDB
//


Перем Хост, Порт;
Перем ПерезапуститьСервер, ОстановитьСервер;
Перем Ресурсы;
Перем Загрузка;
Перем ВсеДанные;
Перем Профили;
Перем Соль;


Функция СтрокуВСтруктуру(Знач Стр)
	Стр = СтрРазделить(Стр, Символы.Таб);
	Ключ = Неопределено;
	Рез = Новый Структура;
	Для Каждого знСтр Из Стр Цикл
		Если Ключ = Неопределено Тогда
			Ключ = знСтр;
		Иначе
			Значение = РаскодироватьСтроку(знСтр, СпособКодированияСтроки.КодировкаURL);
			Если Лев(Ключ, 1) = "*" Тогда
				Ключ = Сред(Ключ, 2);
				Значение = СтрокуВСтруктуру(Значение);
			КонецЕсли;
			Рез.Вставить(Ключ, Значение);
			Ключ = Неопределено;
		КонецЕсли;
	КонецЦикла;
	Возврат Рез;
КонецФункции


Функция СтруктуруВДвоичныеДанные(Структ)
	Результат = Новый Массив;
	Если НЕ Структ = Неопределено Тогда
		Для каждого Элемент Из Структ Цикл
			Ключ = Элемент.Ключ;
			Значение = Элемент.Значение;
			Если ТипЗнч(Значение) = Тип("Структура") Тогда
				Ключ = "*" + Ключ;
				дЗначение = СтруктуруВДвоичныеДанные(Значение);
			ИначеЕсли ТипЗнч(Значение) = Тип("ДвоичныеДанные") Тогда
				Ключ = "#" + Ключ;
				дЗначение = Значение;
			Иначе
				дЗначение = ПолучитьДвоичныеДанныеИзСтроки(Значение);
			КонецЕсли;
			дКлюч = ПолучитьДвоичныеДанныеИзСтроки(Ключ);
			рдКлюч = дКлюч.Размер();
			рдЗначение = дЗначение.Размер();
			бРезультат = Новый БуферДвоичныхДанных(6);
			бРезультат.ЗаписатьЦелое16(0, рдКлюч);
			бРезультат.ЗаписатьЦелое32(2, рдЗначение);
			Результат.Добавить(ПолучитьДвоичныеДанныеИзБуфераДвоичныхДанных(бРезультат));
			Результат.Добавить(дКлюч);
			Результат.Добавить(дЗначение);
		КонецЦикла;
	КонецЕсли;
	Возврат СоединитьДвоичныеДанные(Результат);
КонецФункции


Функция ДвоичныеДанныеВСтруктуру(Данные, Рекурсия = Истина)
	Если ТипЗнч(Данные) = Тип("ДвоичныеДанные") Тогда
		рдДанные = Данные.Размер();
		бдДанные = ПолучитьБуферДвоичныхДанныхИзДвоичныхДанных(Данные);
	Иначе
		рдДанные = Данные.Размер;
		бдДанные = Данные;
	КонецЕсли;
	Позиция = 0;
	Рез = Новый Структура;
	Пока Позиция < рдДанные - 1 Цикл
		рдКлюч = бдДанные.ПрочитатьЦелое16(Позиция);
		рдЗначение = бдДанные.ПрочитатьЦелое32(Позиция + 2);
		Ключ = ПолучитьСтрокуИзДвоичныхДанных(ПолучитьДвоичныеДанныеИзБуфераДвоичныхДанных(бдДанные.Прочитать(Позиция + 6, рдКлюч)));
		бЗначение = бдДанные.Прочитать(Позиция + 6 + рдКлюч, рдЗначение);
		Позиция = Позиция + 6 + рдКлюч + рдЗначение;
		Л = Лев(Ключ, 1);
		Если Л = "*" Тогда
			Если НЕ Рекурсия Тогда
				Продолжить;
			КонецЕсли;
			Ключ = Сред(Ключ, 2);
			Значение = ДвоичныеДанныеВСтруктуру(бЗначение);
		ИначеЕсли Л = "#" Тогда
			Ключ = Сред(Ключ, 2);
			Значение = ПолучитьДвоичныеДанныеИзБуфераДвоичныхДанных(бЗначение);
		Иначе
			Значение = ПолучитьСтрокуИзДвоичныхДанных(ПолучитьДвоичныеДанныеИзБуфераДвоичныхДанных(бЗначение));
		КонецЕсли;
		Рез.Вставить(Ключ, Значение);
	КонецЦикла;
	Возврат Рез;
КонецФункции


Функция СтруктуруВСтроку(Структ)
	Результат = "";
	Если НЕ Структ = Неопределено Тогда
		Для каждого Элемент Из Структ Цикл
			Ключ = Элемент.Ключ;
			Значение = Элемент.Значение;
			Если ТипЗнч(Значение) = Тип("Структура") Тогда
				Ключ = "*" + Ключ;
				Значение = СтруктуруВСтроку(Значение);
			КонецЕсли;
			Результат = ?(Результат = "", "", Результат + Символы.Таб) + Ключ + Символы.Таб + КодироватьСтроку(Значение, СпособКодированияСтроки.КодировкаURL);
		КонецЦикла;
	КонецЕсли;
	Возврат Результат;
КонецФункции


Функция Раскодировать(знПараметра)
	Возврат РаскодироватьСтроку(знПараметра, СпособКодированияСтроки.КодировкаURL);
КонецФункции


Функция Кодировать(знПараметра)
	Возврат КодироватьСтроку(знПараметра, СпособКодированияСтроки.КодировкаURL);
КонецФункции


Функция УдаленныйУзелАдрес(УдаленныйУзел)
	Возврат Лев(УдаленныйУзел, Найти(УдаленныйУзел, ":") - 1);
КонецФункции

Функция НовоеУсловиеОтбора(ЗапросДанных = Неопределено, КлючИмя, Сравнение, КлючЗначение)
	Если ЗапросДанных = Неопределено Тогда
		ЗапросДанных = Новый Структура("УсловияОтбора", Новый Структура);
	КонецЕсли;
	ЗапросДанных.УсловияОтбора.Вставить(КлючИмя, Новый Структура("Сравнение, Значение", Сравнение, КлючЗначение));
	Возврат ЗапросДанных;
КонецФункции

// расшифровывает данные по ключу
Функция Расшифровать(Шифр, КлючШифрования) Экспорт
	бШифр = ПолучитьБуферДвоичныхДанныхИзДвоичныхДанных(ПолучитьДвоичныеДанныеИзBase64Строки(Шифр));
	бКлючШифрования = ПолучитьБуферДвоичныхДанныхИзДвоичныхДанных(ПолучитьДвоичныеДанныеИзBase64Строки(КлючШифрования));
	ЗакодированныеДанные = Новый БуферДвоичныхДанных(32);
	Для Счетчик = 0 ПО 31 Цикл
		ЗначениеКлюча = бКлючШифрования.Получить(Счетчик);
		ЗакодированноеЗначение 	= бШифр.Получить(Счетчик);
		ЗначениеИсходныхДанных = ЗакодированноеЗначение - ЗначениеКлюча;
		Если ЗначениеИсходныхДанных < 0 Тогда
			ЗначениеИсходныхДанных = ЗначениеИсходныхДанных + 256;
		КонецЕсли;
		ЗакодированныеДанные.Установить(Счетчик, ЗначениеИсходныхДанных);
	КонецЦикла;
	Возврат ПолучитьBase64СтрокуИзДвоичныхДанных(ПолучитьДвоичныеДанныеИзБуфераДвоичныхДанных(ЗакодированныеДанные));
КонецФункции


Функция ПроверкаАвторизации(Параметры)
	ПрошелАвторизацию = Ложь;
	СтатусСубъекта = "Гость";
	Имя = "Гость";
	Если Параметры.Свойство("unm", Имя) Тогда
		СтатусСубъекта = "Не авторизован";
		Если НЕ "" + Имя = "" Тогда
			//Профиль = Профили.НайтиКлюч("Имя" + Символы.Таб + Имя + Символы.Таб);
			Результат = Профили.НайтиЗаголовок(НовоеУсловиеОтбора(, "Имя", "Равно", Имя));
			СтатусСубъекта = "Неизвестный субъект";
			Если Результат.Результат = "ЗаголовокНайден" Тогда
				Профиль = Результат.Заголовок;
				СтатусСубъекта = "Неверный пароль";
				Если НЕ "" + Профиль.Пароль = "" Тогда
					Хэш = Новый ХешированиеДанных(ХешФункция.SHA256);
					Хэш.Добавить(Параметры.procid + Параметры.uid + Профиль.Пароль);
					Если ПолучитьBase64СтрокуИзДвоичныхДанных(Хэш.ХешСумма) = Параметры.pwd Тогда
						СтатусСубъекта = "Прошел авторизацию";
						ПрошелАвторизацию = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Параметры.Вставить("ПрошелАвторизацию", ПрошелАвторизацию);
	Параметры.Вставить("Субъект", Имя);
	Параметры.Вставить("СтатусСубъекта", СтатусСубъекта);
	Сообщить(СтатусСубъекта);
	Возврат Результат;
КонецФункции // ПроверкаАвторизации()


Функция ВыполнитьРегистрацию(Параметры)
	Перем Имя;
	Перем Почта;
	Перем Профиль;
	Перем Пароль;
	ПрошелАвторизацию = Ложь;
	ТекстСообщение = "Введите свое имя";
	ТекстСтатус = "Внимание";
	Если Параметры.Свойство("unm", Имя) Тогда
		Если НЕ Имя = "" Тогда
			//Профиль = Профили.НайтиКлюч("Имя" + Символы.Таб + Имя + Символы.Таб);
			Результат = Профили.НайтиЗаголовок(НовоеУсловиеОтбора(, "Имя", "Равно", Имя));
			Если Результат.Результат = "ЗаголовокНеНайден" Тогда
				Сообщить("Профиль не найден");
				Профиль = Новый Структура("Имя, Пароль, Почта, Ключ, Дата, УдаленныйУзел", Имя, "", "", "", ТекущаяДата(), Параметры.УдаленныйУзел);
			Иначе
				Профиль = Результат.Заголовок;
			КонецЕсли;
			Если НЕ Профиль.Пароль = "" Тогда
				ТекстСообщение = "Такое имя уже существует";
			Иначе
				ТекстСообщение = "Укажите свой почтовый ящик";
				Если Параметры.Свойство("mail", Почта) Тогда
					Если НЕ Почта = "" Тогда
						Параметры.Вставить("Этап", "Подтверждение");
						Профиль.Почта = Почта;
						Если Профиль.Ключ = "" Тогда
							Хэш = Новый ХешированиеДанных(ХешФункция.SHA256);
							Хэш.Добавить(Соль + ТекущаяУниверсальнаяДатаВМиллисекундах());
							Ключ = ПолучитьBase64СтрокуИзДвоичныхДанных(Хэш.ХешСумма);
							Профиль.Ключ = Ключ;
							//ТекстСообщение = "Секретный ключ отправлен на почту";
							ТекстСообщение = "Секретный ключ:<br><br>" + Ключ;
							ТекстСтатус = "Информация";
							Сообщить(Ключ);
							Профили.ДобавитьДанные(Профиль);
						Иначе
							ТекстСообщение = "Введите пароль два раза";
							Если Параметры.Свойство("pwd2", Пароль) Тогда
								Хэш = Новый ХешированиеДанных(ХешФункция.SHA256);
								Хэш.Добавить("");
								ПустойПароль = ПолучитьBase64СтрокуИзДвоичныхДанных(Хэш.ХешСумма);
								Пароль = Расшифровать(Пароль, Профиль.Ключ);
								Если НЕ Пароль = ПустойПароль Тогда // не пустой
									ТекстСообщение = "Пароли не совпадают";
									Хэш.Добавить(Параметры.procid + Параметры.uid + Пароль);
									Если ПолучитьBase64СтрокуИзДвоичныхДанных(Хэш.ХешСумма) = Параметры.pwd Тогда
										Параметры.Вставить("Этап", "");
										ТекстСообщение = "Регистрация выполнена";
										ТекстСтатус = "Информация";
										Профиль.Пароль = Пароль;
										ПрошелАвторизацию = Истина;
										Профили.ДобавитьДанные(Профиль);
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Параметры.Вставить("ПрошелАвторизацию", ПрошелАвторизацию);
	Параметры.Вставить("Субъект", Имя);
	Параметры.Вставить("ТекстСтатус", ТекстСтатус);
	Параметры.Вставить("ТекстСообщение", ТекстСообщение);
	Возврат Результат;
КонецФункции // ВыполнитьРегистрацию()


Функция ОбработатьДанные(Запрос)
	Перем Команда, ИмяДанных, БазаДанных, ПозицияДанных, ЗапросДанных;

	ВремяНачало = ТекущаяДата();

	Запрос.Свойство("БазаДанных", БазаДанных);

	Ответ = Новый Структура();

	Если НЕ "" + БазаДанных = "" Тогда // имя контейнера указано
		Данные = ВсеДанные.Получить(БазаДанных);
		Если Данные = Неопределено Тогда // открыть контейнер
			Данные = Новый dbaccess(ОбъединитьПути(ТекущийКаталог(), "data" , БазаДанных));
			ВсеДанные.Вставить(БазаДанных, Данные);
		КонецЕсли;
	КонецЕсли;

	Запрос.Свойство("cmd", Команда);

	Если Команда = Неопределено Тогда
		Запрос.Свойство("Команда", Команда);
	КонецЕсли;

	Сообщить(Команда);

	Если Команда = "stopserver" Тогда
		ОстановитьСервер = Истина;

	ИначеЕсли Команда = "restartserver" Тогда
		ПерезапуститьСервер = Истина;

	ИначеЕсли Команда = "auth" Тогда
		ПроверкаАвторизации(Запрос);
		Ответ = Запрос;

	ИначеЕсли Команда = "reg" Тогда
		ВыполнитьРегистрацию(Запрос);
		Ответ = Запрос;

	ИначеЕсли Команда = "ЗаписатьЗаголовок" Тогда // запись заголовка
		Если Данные.ОткрытьПотокДанных(Истина) Тогда
			Если Запрос.Свойство("Заголовок") Тогда
				Ответ.Вставить("Результат", Данные.ДобавитьДанные(Запрос.Заголовок));
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли Команда = "ЗаписатьДанные" Тогда // запись данных
		Попытка
			Если НЕ "" + БазаДанных = "" Тогда // имя контейнера указано
				Если Данные.ОткрытьПотокДанных(Истина) Тогда
					Если Запрос.Свойство("Заголовок") Тогда
						Ответ.Вставить("ПозицияДанных", Данные.ДобавитьДанные(Запрос.Заголовок, Запрос.дДанные));
						Ответ.Вставить("Результат", "Успешно");
					КонецЕсли;
				КонецЕсли;
			Иначе // записать в файл
				ИмяФайлаДанных = ОбъединитьПути(ТекущийКаталог(), "data", ".files", Запрос.Заголовок.ИмяДанных);
				Запрос.дДанные.Записать(ИмяФайлаДанных);
				Ответ.Вставить("Результат", "Успешно");
			КонецЕсли;
		Исключение
			Ответ.Вставить("Результат", "Ошибка");
			Сообщить(ОписаниеОшибки());
		КонецПопытки;

	ИначеЕсли Команда = "НайтиЗаголовок" Тогда // найти заголовок по запросу
		Ответ = Данные.НайтиЗаголовок(Запрос);

	ИначеЕсли НЕ "" + БазаДанных = "" Тогда // чтение данных

		Запрос.Свойство("ПозицияДанных", ПозицияДанных);

		Если НЕ "" + ПозицияДанных = "" Тогда // прочитать файл по позиции в контейнере
			Ответ.Вставить("дДанные", Данные.ПолучитьДанные(Число(ПозицияДанных)));

		Иначе // получить список контейнеров
			Ответ = Данные.ПолучитьЗаголовки();
		КонецЕсли;
	Иначе // прочитать из файла
		Попытка
			ИмяФайлаДанных = ОбъединитьПути(ТекущийКаталог(), "data", ".files", Запрос.ИмяДанных);
			Ответ.Вставить("дДанные", Новый ДвоичныеДанные(ИмяФайлаДанных));
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;

	Сообщить("" + ТекущаяДата() + " time=" + (ТекущаяДата() - ВремяНачало) + Загрузка);

	Возврат СтруктуруВДвоичныеДанные(Ответ);

КонецФункции


Процедура ОбработатьСоединения() Экспорт

	Соль = "123";

	Версия = "0.0.1";
	Хост = "127.0.0.1";

	Таймаут = 10;
	Если АргументыКоманднойСтроки.Количество() Тогда
		Порт = Число(АргументыКоманднойСтроки[0]);
	Иначе
		Порт = 8887;
	КонецЕсли;

	TCPСервер = Новый TCPСервер(Порт);
	TCPСервер.Запустить();
	Сообщить(СокрЛП(ТекущаяДата()) + " - Сервер данных запущен на порту: " + СокрЛП(Порт));

	ОстановитьСервер = Ложь;
	ПерезапуститьСервер = Ложь;
	Соединение = Неопределено;

	ПодключитьСценарий(ОбъединитьПути(ТекущийКаталог(), "dbaccess.os"), "dbaccess");
	ВсеДанные = Новый Соответствие();

	Профили = Новый dbaccess(ОбъединитьПути(ТекущийКаталог(), "data" , "users"));

	ПустойЦикл = 0;
	РабочийЦикл = 0;
	ЗамерВремени = ТекущаяДата();

	Пока Истина Цикл

		Если ПустойЦикл + РабочийЦикл > 999 Тогда
			ПредЗамер = ЗамерВремени;
			ЗамерВремени = ТекущаяДата();
			Загрузка = " " + РабочийЦикл / 10 + "% " + Цел(РабочийЦикл/(ЗамерВремени - ПредЗамер)) + " q/s";
			ПустойЦикл = 0;
			РабочийЦикл = 0;
		КонецЕсли;

		Попытка
			Соединение = TCPСервер.ОжидатьСоединения(Таймаут);
			Соединение.ТаймаутОтправки = 500;
			Соединение.ТаймаутЧтения = 50;
		Исключение
			ПустойЦикл = ПустойЦикл + 1;
			Продолжить;
		КонецПопытки;

		Попытка
			дДанныеВходящие	= Соединение.ПрочитатьДвоичныеДанные();
		Исключение
			дДанныеВходящие = "";
		КонецПопытки;

		Если дДанныеВходящие = "" Тогда
			Если НЕ Соединение = Неопределено Тогда
				Соединение.Закрыть();
			КонецЕсли;
			ПустойЦикл = ПустойЦикл + 1;
			Продолжить;
		КонецЕсли;

		РабочийЦикл = РабочийЦикл + 1;

		Попытка
			Соединение.ОтправитьДвоичныеДанные(ОбработатьДанные(ДвоичныеДанныеВСтруктуру(дДанныеВходящие)));
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		Если НЕ Соединение = Неопределено Тогда
			Соединение.Закрыть();
		КонецЕсли;

		Если ПерезапуститьСервер ИЛИ ОстановитьСервер Тогда
			Прервать;
		КонецЕсли;

		Соединение = Неопределено;

	КонецЦикла;

	TCPСервер.Остановить();

	Если ПерезапуститьСервер Тогда
		ЗапуститьПриложение("oscript dataserver.os " + Порт, ТекущийКаталог());
	КонецЕсли;

КонецПроцедуры

ОбработатьСоединения();
