// MIT License
// Copyright (c) 2018 Vladimir Vasiliev
// https://github.com/vasvl123/OneScriptDB
//
// Включает программный код https://github.com/tsukanov-as/kojura


Функция ОператорПустой(Данные, Знач Аргумент) Экспорт
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Аргумент = Данные.Интерпретировать(Аргумент, , Ложь);
	Возврат (Аргумент = Данные.Пустой);
КонецФункции // Пустой()

Функция ОператорСумма(Данные, Знач Аргумент) Экспорт
	Перем Значение;
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Значение = Данные.Интерпретировать(Аргумент);
	Аргумент = Данные.Соседний(Аргумент);
	Пока Аргумент <> Неопределено Цикл
		Значение = Значение + Данные.Интерпретировать(Аргумент);
		Аргумент = Данные.Соседний(Аргумент);
	КонецЦикла;
	Возврат Значение;
КонецФункции // Сумма()

Функция ОператорРазность(Данные, Знач Аргумент) Экспорт
	Перем Значение;
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Значение = Данные.Интерпретировать(Аргумент);
	Аргумент = Данные.Соседний(Аргумент);
	Если Аргумент = Неопределено Тогда
		Возврат -Значение;
	КонецЕсли;
	Пока Аргумент <> Неопределено Цикл
		Значение = Значение - Данные.Интерпретировать(Аргумент);
		Аргумент = Данные.Соседний(Аргумент);
	КонецЦикла;
	Возврат Значение;
КонецФункции // Разность()

Функция ОператорПроизведение(Данные, Знач Аргумент) Экспорт
	Перем Значение;
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Значение = Данные.Интерпретировать(Аргумент);
	Аргумент = Данные.Соседний(Аргумент);
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Пока Аргумент <> Неопределено Цикл
		Значение = Значение * Данные.Интерпретировать(Аргумент);
		Аргумент = Данные.Соседний(Аргумент);
	КонецЦикла;
	Возврат Значение;
КонецФункции // Произведение()

Функция ОператорЧастное(Данные, Знач Аргумент) Экспорт
	Перем Значение;
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Значение = Данные.Интерпретировать(Аргумент);
	Аргумент = Данные.Соседний(Аргумент);
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Пока Аргумент <> Неопределено Цикл
		Значение = Значение / Данные.Интерпретировать(Аргумент);
		Аргумент = Данные.Соседний(Аргумент);
	КонецЦикла;
	Возврат Значение;
КонецФункции // Частное()

Функция ОператорОстаток(Данные, Знач Аргумент) Экспорт
	Перем Значение;
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Значение = Данные.Интерпретировать(Аргумент);
	Аргумент = Данные.Соседний(Аргумент);
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Пока Аргумент <> Неопределено Цикл
		Значение = Значение % Данные.Интерпретировать(Аргумент);
		Аргумент = Данные.Соседний(Аргумент);
	КонецЦикла;
	Возврат Значение;
КонецФункции // Остаток()

Функция ОператорЕсли(Данные, Знач Узел) Экспорт
	Перем СписокЕсли, СписокТогда, СписокИначе;
	СписокЕсли = Узел;
	СписокТогда = Данные.Соседний(СписокЕсли);
	СписокИначе = Данные.Соседний(СписокТогда);
	Если Данные.Интерпретировать(СписокЕсли) = Истина Тогда
		Возврат Данные.Интерпретировать(СписокТогда)
	ИначеЕсли НЕ СписокИначе = Неопределено Тогда
		Возврат Данные.Интерпретировать(СписокИначе)
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции // ЗначениеВыраженияЕсли()

Функция ОператорВыбор(Данные, Знач Список) Экспорт
	Перем СписокКогда, СписокТогда;
	СписокКогда = Список;
	Если СписокКогда = Неопределено Тогда
		ВызватьИсключение "Ожидается условие";
	КонецЕсли;
	Пока СписокКогда <> Неопределено Цикл
		СписокТогда = Данные.Соседний(СписокКогда);
		Если СписокТогда = Неопределено Тогда
			ВызватьИсключение "Ожидается выражение";
		КонецЕсли;
		Если Данные.Интерпретировать(СписокКогда) = Истина Тогда
			Возврат Данные.Интерпретировать(СписокТогда);
		КонецЕсли;
		СписокКогда = Данные.Соседний(СписокТогда);
	КонецЦикла;
	ВызватьИсключение "Ни одно из условий не сработало!";
КонецФункции // ЗначениеВыраженияВыбор()

Функция ОператорРавно(Данные, Знач Аргумент) Экспорт
	Перем Значение, Результат;
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Значение = Данные.Интерпретировать(Аргумент);
	Аргумент = Данные.Соседний(Аргумент);
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Результат = Истина;
	Пока Аргумент <> Неопределено И Результат Цикл
		Результат = Результат И Значение = Данные.Интерпретировать(Аргумент);
		Аргумент = Данные.Соседний(Аргумент);
	КонецЦикла;
	Возврат Результат;
КонецФункции // Равно()

Функция ОператорБольше(Данные, Знач Аргумент) Экспорт
	Перем Значение1, Значение2;
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Значение1 = Данные.Интерпретировать(Аргумент);
	Аргумент = Данные.Соседний(Аргумент);
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Результат = Истина;
	Пока Аргумент <> Неопределено И Результат Цикл
		Значение2 = Данные.Интерпретировать(Аргумент);
		Результат = Результат И Значение1 > Значение2;
		Значение1 = Значение2;
		Аргумент = Данные.Соседний(Аргумент);
	КонецЦикла;
	Возврат Результат;
КонецФункции // Больше()

Функция ОператорМеньше(Данные, Знач Аргумент) Экспорт
	Перем Значение1, Значение2;
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Значение1 = Данные.Интерпретировать(Аргумент);
	Аргумент = Данные.Соседний(Аргумент);
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Результат = Истина;
	Пока Аргумент <> Неопределено И Результат Цикл
		Значение2 = Данные.Интерпретировать(Аргумент);
		Результат = Результат И Значение1 < Значение2;
		Значение1 = Значение2;
		Аргумент = Данные.Соседний(Аргумент);
	КонецЦикла;
	Возврат Результат;
КонецФункции // Меньше()

Функция ОператорБольшеИлиРавно(Данные, Знач Аргумент) Экспорт
	Перем Значение1, Значение2;
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Значение1 = Данные.Интерпретировать(Аргумент);
	Аргумент = Данные.Соседний(Аргумент);
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Результат = Истина;
	Пока Аргумент <> Неопределено И Результат Цикл
		Значение2 = Данные.Интерпретировать(Аргумент);
		Результат = Результат И Значение1 >= Значение2;
		Значение1 = Значение2;
		Аргумент = Данные.Соседний(Аргумент);
	КонецЦикла;
	Возврат Результат;
КонецФункции // БольшеИлиРавно()

Функция ОператорМеньшеИлиРавно(Данные, Знач Аргумент) Экспорт
	Перем Значение1, Значение2;
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Значение1 = Данные.Интерпретировать(Аргумент);
	Аргумент = Данные.Соседний(Аргумент);
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Результат = Истина;
	Пока Аргумент <> Неопределено И Результат Цикл
		Значение2 = Данные.Интерпретировать(Аргумент);
		Результат = Результат И Значение1 <= Значение2;
		Значение1 = Значение2;
		Аргумент = Данные.Соседний(Аргумент);
	КонецЦикла;
	Возврат Результат;
КонецФункции // МеньшеИлиРавно()

Функция ОператорНеРавно(Данные, Знач Аргумент) Экспорт
	Перем Значение1, Значение2;
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Значение1 = Данные.Интерпретировать(Аргумент);
	Аргумент = Данные.Соседний(Аргумент);
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Результат = Истина;
	Пока Аргумент <> Неопределено И Результат Цикл
		Значение2 = Данные.Интерпретировать(Аргумент);
		Результат = Результат И Значение1 <> Значение2;
		Значение1 = Значение2;
		Аргумент = Данные.Соседний(Аргумент);
	КонецЦикла;
	Возврат Результат;
КонецФункции // НеРавно()

Функция ОператорИ(Данные, Знач Аргумент) Экспорт
	Перем Значение;
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Результат = Истина;
	Пока Аргумент <> Неопределено И Результат Цикл
		Значение = Данные.Интерпретировать(Аргумент);
		Результат = Результат И Значение;
		Аргумент = Данные.Соседний(Аргумент);
	КонецЦикла;
	Возврат Результат;
КонецФункции // ЛогическоеИ()

Функция ОператорИли(Данные, Знач Аргумент) Экспорт
	Перем Значение;
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Результат = Ложь;
	Пока Аргумент <> Неопределено И Не Результат Цикл
		Значение = Данные.Интерпретировать(Аргумент);
		Результат = Результат Или Значение;
		Аргумент = Данные.Соседний(Аргумент);
	КонецЦикла;
	Возврат Результат;
КонецФункции // ЛогическоеИли()

Функция ОператорНе(Данные, Знач Аргумент) Экспорт
	Перем Значение;
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Результат = Истина;
	Пока Аргумент <> Неопределено И Результат Цикл
		Значение = Данные.Интерпретировать(Аргумент);
		Результат = Результат И Не Значение;
		Аргумент = Данные.Соседний(Аргумент);
	КонецЦикла;
	Возврат Результат;
КонецФункции // ЛогическоеНе()

Функция ОператорВывестиСообщение(Данные, Знач Аргумент) Экспорт
	Перем Значения;
	Если Аргумент = Неопределено Тогда
		ВызватьИсключение "Ожидается аргумент";
	КонецЕсли;
	Значения = Новый Массив;
	Пока Аргумент <> Неопределено Цикл
		Значения.Добавить(Данные.Интерпретировать(Аргумент));
		Аргумент = Данные.Соседний(Аргумент);
	КонецЦикла;
	Данные.Процесс.ЗаписатьСобытие("Интерпретатор", СтрСоединить(Значения, " "), 1);
	Возврат Неопределено;
КонецФункции // ВывестиСообщение
