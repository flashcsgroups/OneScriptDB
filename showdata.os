Перем procid;
Перем Шаблон;
Перем Буфер, БуферУзел;
Перем События, ИдСобытия;
Перем Хост, Порт;
Перем Вкладки, ВкладкиСписок, ИдВкладки;
Перем ОбновитьПанель;
Перем ТекущаяВкладка, ТекущиеДанные, ТекущееОкно;
Перем ЗадачиКоличество;
Перем ОбщийРезультат;
Перем КоличествоПопыток;

//Перем ВсеДанные;



Функция СтрЭкранироватьСкрипт(Знач Стр)
	Стр = СтрЗаменить(Стр, """", "\""");
	Стр = СтрЗаменить(Стр, "'", "\'");
	Стр = СтрЗаменить(Стр, "<", "\<");
	Стр = СтрЗаменить(Стр, ">", "\>");
	Возврат Стр;
КонецФункции


Функция СтрЭкранироватьРазметку(Знач Стр)
	Стр = СтрЗаменить(Стр, "&", "&amp;");
	Стр = СтрЗаменить(Стр, """", "&quot;");
	Стр = СтрЗаменить(Стр, "'", "&#39;");
	Стр = СтрЗаменить(Стр, "<", "&lt;");
	Стр = СтрЗаменить(Стр, ">", "&gt;");
	Стр = СтрЗаменить(Стр, Символы.ПС, "<br/>");
	Возврат Стр;
КонецФункции


Функция СтрокаЗапрос(ПараметрыЗапроса)
	Стр = "";
	Для каждого Параметр Из ПараметрыЗапроса Цикл
		Если Стр = "" Тогда
			Стр = "?";
		Иначе
			Стр = Стр + "&amp;";
		КонецЕсли;
		Стр = Стр + Параметр.Ключ + "=" + Параметр.Значение;
	КонецЦикла;
	Возврат "/showdata/" + procid + Стр;
КонецФункции


Функция ПоказатьПанель()
	Текст = "";
	Режим = "";
	Прокрутка = "";
	ТипВкладки = "";
	БазаДанных = "";
	ИмяДанных = "";
	ПараметрыШаблона = Новый Структура;
	Для каждого элВкладка Из ВкладкиСписок Цикл
		Вкладка = элВкладка.Значение;
		ПараметрыШаблона.Вставить("ПараметрВкладка", Вкладка.ИдВкладки);
		ПараметрыШаблона.Вставить("ПараметрЗаголовок", Вкладка.Заголовок);
		ПараметрыШаблона.Вставить("ПараметрАктивный", ?(Вкладка.ИдВкладки = ТекущаяВкладка, "active", ""));
		Если Вкладка.ИдВкладки = ТекущаяВкладка Тогда
			БазаДанных = Вкладка.БазаДанных;
			ИмяДанных = Вкладка.ИмяДанных;
			Режим = Вкладка.Режим;
			Прокрутка = Вкладка.Прокрутка;
			ТипВкладки = Вкладка.ТипВкладки;
		КонецЕсли;
		Текст = Текст + Шаблон.ПолучитьОбласть("ОбластьВкладка", ПараметрыШаблона);
	КонецЦикла;
	ПараметрыШаблона.Вставить("ПараметрВкладка", ИдВкладки);
	Текст = Текст + Шаблон.ПолучитьОбласть("ОбластьНоваяВкладка", ПараметрыШаблона);
	МенюИнструменты = "";
	// ПараметрыШаблона = Новый Структура;
	// МенюИнструменты = МенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);
	ПараметрыШаблона = Новый Структура;
	ПараметрыШаблона.Вставить("ПараметрВкладки", Текст);
	ПараметрыШаблона.Вставить("ПараметрРежим", Режим);
	ПараметрыШаблона.Вставить("ПараметрВкладка", ИдВкладки);
	ПараметрыШаблона.Вставить("ПараметрРежим", Режим);
	ПараметрыШаблона.Вставить("ПараметрТипВкладки", ТипВкладки);
	ПараметрыШаблона.Вставить("ПараметрПрокрутка", Прокрутка);
	ПараметрыШаблона.Вставить("ПараметрИдВкладки", ТекущаяВкладка);
	ПараметрыШаблона.Вставить("ПараметрМенюИнструменты", МенюИнструменты);
	Текст = Шаблон.ПолучитьОбласть("ОбластьПанель", ПараметрыШаблона);
	Возврат Текст;
КонецФункции // ПоказатьПанель()


Функция НоваяВкладка(Параметры)
	БазаДанных = "" + УзелСвойство(Параметры, "osdb");
	ИмяДанных = "" + УзелСвойство(Параметры, "data");
	ФайлДанных = "" + УзелСвойство(Параметры, "datafile");
	Данные = Новый pagedata(ОбъединитьПути(ТекущийКаталог(), "data", БазаДанных + ".files", ФайлДанных));
	ТекущаяВкладка = ИдВкладки;
	структВкладка = Новый Структура("ИдВкладки, ТипВкладки, Данные, Состояния, Заголовок, Режим, ИдУзла, БазаДанных, ИмяДанных, ОбновитьУзел, Прокрутка",
		ИдВкладки,
		"data",
		Данные,
		Новый Соответствие,
		ИмяДанных,
		"view",
		"1",
		БазаДанных,
		ИмяДанных,
		Истина,
		"0");
	ВкладкиСписок.Добавить(структВкладка);
	Вкладки.Вставить(ИдВкладки, структВкладка);
	ИдВкладки = ИдВкладки + 1;
	Возврат структВкладка;
КонецФункции


Функция НачальнаяСтраница()
	Текст = Шаблон.ПолучитьОбласть("ОбластьШапка", Новый Структура("ПараметрИдПроцесса", procid));
	Текст = Текст + Шаблон.ПолучитьОбласть("ОбластьПодвал");
	Возврат Текст;
КонецФункции


Функция СтрокуВСтруктуру(Стр)
	Стр = СтрРазделить(Стр, Символы.Таб);
	Ключ = Неопределено;
	Рез = Неопределено;
	Для Каждого знСтр Из Стр Цикл
		Если Ключ = Неопределено Тогда
			Ключ = знСтр;
		Иначе
			Если Рез = Неопределено Тогда
				Рез = Новый Структура;
			КонецЕсли;
			Рез.Вставить(Ключ, знСтр);
			Ключ = Неопределено;
		КонецЕсли;
	КонецЦикла;
	Возврат Рез;
КонецФункции


Функция СтруктуруВСтроку(Структ)
	Результат = "";
	Для каждого Элемент Из Структ Цикл
		Результат = Результат + ?(Результат = "", "", Символы.Таб) + Элемент.Ключ + Символы.Таб + Элемент.Значение;
	КонецЦикла;
	Возврат Результат;
КонецФункции


Функция ПоказатьУзел(Узел, Вкладка, ЭтоАтрибут = Ложь, Атрибуты = "", Дочерний = "") Экспорт

	Представление = "";

	Если ЭтоАтрибут Тогда

		АтрибутИмя = Узел.Имя;
		Если АтрибутИмя = "id" Тогда
			АтрибутИмя = "old-id";
		КонецЕсли;
		АтрибутИмя = СтрЗаменить(АтрибутИмя, "xml_lang", "xml:lang");
		АтрибутИмя = СтрЗаменить(АтрибутИмя, "_", "-");
		АтрибутЗначение = Узел.Значение;
		Представление = Представление + " " + АтрибутИмя + "=""" + АтрибутЗначение + """";

	Иначе

		Если Узел.Имя = "#text" Тогда
			Узел.Имя = "text";
		КонецЕсли;

		Если Узел.Имя = "#comment" Тогда
			Если Узел.Свойство("Значение") Тогда
				Представление = Представление + "<!-- " + Узел.Значение + " -->";
			КонецЕсли;
		Иначе
			Атрибуты = Атрибуты + " id=""" + Вкладка.ИдВкладки + "_" + Узел.Код + """";
			Представление = Представление + "<" + Узел.Имя + Атрибуты + ">" + Дочерний;
			Если Узел.Свойство("Значение") Тогда
				Представление = Представление + Узел.Значение;
			КонецЕсли;
			Представление = Представление + "</" + Узел.Имя + ">";
		КонецЕсли;

	КонецЕсли;

	УзелСостояниеЗначение(Вкладка, Узел, "Вид", Представление);

	Возврат Представление;

КонецФункции // ПоказатьУзел()


Функция ПоказатьМенюИнструменты(Вкладка, Узел, ЭтоАтрибут = Ложь)

	ПараметрыШаблона = Новый Структура;
	ПараметрыШаблона.Вставить("ПараметрИдУзла", "" + Вкладка.ИдВкладки + "_" + Узел.Код);
	ПараметрыШаблона.Вставить("ПараметрНеактивно", "");
	ПараметрыШаблона.Вставить("ПараметрВидимость", "");

	ПараметрМенюИнструменты = "";

	ПараметрыШаблона.Вставить("ПараметрВкладка", ИдВкладки);
	ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюРедактировать", ПараметрыШаблона);

	Если НЕ этоАтрибут = Истина Тогда

		Если НЕ УзелСостояние(Вкладка, Узел, "Изменить") = Истина Тогда
			ПараметрыШаблона.Вставить("ПараметрКоманда", "struct");
			ПараметрыШаблона.Вставить("ПараметрПодсказка", "Структура");
		Иначе
			ПараметрыШаблона.Вставить("ПараметрКоманда", "view");
			ПараметрыШаблона.Вставить("ПараметрПодсказка", "Представление");
		КонецЕсли;
		ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

	КонецЕсли;

	Если УзелСостояние(Вкладка, Узел, "Изменить") = Истина Тогда

		ПараметрыШаблона.Вставить("ПараметрКоманда", "attradd");
		ПараметрыШаблона.Вставить("ПараметрПодсказка", "Новый атрибут");
		ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

		ПараметрыШаблона.Вставить("ПараметрКоманда", "childadd");
		ПараметрыШаблона.Вставить("ПараметрПодсказка", "Новый дочерний");
		ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

		ПараметрыШаблона.Вставить("ПараметрКоманда", "nextadd");
		ПараметрыШаблона.Вставить("ПараметрПодсказка", "Новый соседний");
		ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

	КонецЕсли;

	ПараметрыШаблона.Вставить("ПараметрКоманда", "nodecut");
	ПараметрыШаблона.Вставить("ПараметрПодсказка", "Вырезать узел");
	ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

	ПараметрыШаблона.Вставить("ПараметрКоманда", "nodecopy");
	ПараметрыШаблона.Вставить("ПараметрПодсказка", "Копировать узел");
	ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

	Если НЕ этоАтрибут = Истина Тогда
		ПараметрыШаблона.Вставить("ПараметрКоманда", "nodepasteattr");
		ПараметрыШаблона.Вставить("ПараметрПодсказка", "Вставить атрибут");
		ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

		ПараметрыШаблона.Вставить("ПараметрКоманда", "nodepastechild");
		ПараметрыШаблона.Вставить("ПараметрПодсказка", "Вставить дочерний");
		ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);
	КонецЕсли;

	ПараметрыШаблона.Вставить("ПараметрКоманда", "nodepastenext");
	ПараметрыШаблона.Вставить("ПараметрПодсказка", "Вставить соседний");
	ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

	Если НЕ этоАтрибут = Истина Тогда
		ПараметрыШаблона.Вставить("ПараметрКоманда", "attremove");
		ПараметрыШаблона.Вставить("ПараметрПодсказка", "Удалить все атрибуты");
		ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

		ПараметрыШаблона.Вставить("ПараметрКоманда", "childremove");
		ПараметрыШаблона.Вставить("ПараметрПодсказка", "Удалить все дочерние");
		ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);
	КонецЕсли;

	ПараметрыШаблона.Вставить("ПараметрКоманда", "noderemove");
	ПараметрыШаблона.Вставить("ПараметрПодсказка", "Удалить узел");
	ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

	ПараметрыШаблона = Новый Структура;
	ПараметрыШаблона.Вставить("ПараметрИдУзла", "designmenu");
	ПараметрыШаблона.Вставить("ПараметрМенюИнструменты", ПараметрМенюИнструменты);
	КнопкаИнструменты = Шаблон.ПолучитьОбласть("ОбластьМеню", ПараметрыШаблона);

	Возврат КнопкаИнструменты;

КонецФункции // ПоказатьМенюИнструменты()


Функция ПоказатьСтруктуруУзла(Узел, Вкладка, ЭтоАтрибут = Ложь, Атрибуты = "", Дочерний = "") Экспорт

	Представление = "" ;

	УзелОткрыт = УзелСостояние(Вкладка, Узел, "УзелОткрыт");
	Если УзелОткрыт = Неопределено Тогда
		УзелОткрыт = Ложь;
	КонецЕсли;

	УзелИмя = Узел.Имя;

	УзелЗначение = "";
	Если Узел.Свойство("Значение") Тогда
		УзелЗначение = Узел.Значение;
	КонецЕсли;

	УзелРедактируется = УзелСостояние(Вкладка, Узел, "УзелРедактируется");
	АтрибутРедактируется = УзелСостояние(Вкладка, Узел, "АтрибутРедактируется");
	РедактироватьЗначение = УзелСостояние(Вкладка, Узел, "РедактироватьЗначение");
	РедактироватьИмя = УзелСостояние(Вкладка, Узел, "РедактироватьИмя");

	Если АтрибутРедактируется = Истина Тогда
		УзелРедактируется = Истина;
		ЭтоАтрибут = Истина;
	КонецЕсли;

	Если этоАтрибут = Истина Тогда
		УзелИмя = СтрЗаменить(УзелИмя, "xml_lang", "xml:lang");
		УзелИмя = СтрЗаменить(УзелИмя, "_", "-");
	КонецЕсли;

	КнопкаУзел = "";

	Если НЕ УзелСвойство(Узел, "Дочерний") = Неопределено Тогда
		ПараметрыШаблона = Новый Структура;
		ПараметрыШаблона.Вставить("ПараметрИдУзла", "" + Вкладка.ИдВкладки + "_" + Узел.Код);
		ПараметрыШаблона.Вставить("ПараметрКоманда", ?(УзелОткрыт, "nodeclose", "nodeopen"));
		ПараметрыШаблона.Вставить("ПараметрНадписьНаКнопке", ?(УзелОткрыт, "⚪" , "⚫"));
		КнопкаУзел = Шаблон.ПолучитьОбласть("ОбластьКнопкаУзел", ПараметрыШаблона);
	КонецЕсли;

	КнопкиИнструменты = "";
	ПараметрМенюИнструменты = "";

	Если УзелРедактируется = Истина Тогда

		ПараметрыШаблона = Новый Структура;
		ПараметрыШаблона.Вставить("ПараметрИдУзла", "" + Вкладка.ИдВкладки + "_" + Узел.Код);
		КнопкиИнструменты = Шаблон.ПолучитьОбласть("ОбластьКнопкаИнструменты", ПараметрыШаблона);

	КонецЕсли;

	Если РедактироватьИмя = Истина Тогда

		ПараметрыШаблона = Новый Структура;
		ПараметрыШаблона.Вставить("ПараметрИдУзла", "" + Вкладка.ИдВкладки + "_" + Узел.Код);
		ПараметрыШаблона.Вставить("ПараметрКоманда", "submitname");
		ПараметрыШаблона.Вставить("ПараметрИмяЗначение", СтрЭкранироватьСкрипт(УзелИмя));
		ПараметрИмя = Шаблон.ПолучитьОбласть("ОбластьИзменитьИмяЗначение", ПараметрыШаблона);

	Иначе

		ПараметрыШаблона = Новый Структура;
		ПараметрыШаблона.Вставить("ПараметрИдУзла", "" + Вкладка.ИдВкладки + "_" + Узел.Код);
		ПараметрыШаблона.Вставить("ПараметрНеактивно", "");
		ПараметрыШаблона.Вставить("ПараметрКоманда", ?(УзелРедактируется = Истина, "namedit", ?(ЭтоАтрибут = Истина, "attredit", "nodedit")));
		ПараметрыШаблона.Вставить("ПараметрНадписьНаКнопке", СтрЭкранироватьРазметку(УзелИмя));
		ПараметрИмя = Шаблон.ПолучитьОбласть("ОбластьКнопкаИмяЗначение", ПараметрыШаблона);

	КонецЕсли;

	Если РедактироватьЗначение = Истина Тогда

		ПараметрыШаблона = Новый Структура;
		ПараметрыШаблона.Вставить("ПараметрИдУзла", "" + Вкладка.ИдВкладки + "_" + Узел.Код);
		ПараметрыШаблона.Вставить("ПараметрКоманда", "submitvalue");
		ПараметрыШаблона.Вставить("ПараметрИмяЗначение", СтрЭкранироватьСкрипт(УзелЗначение));
		ПараметрЗначение = Шаблон.ПолучитьОбласть("ОбластьИзменитьИмяЗначение", ПараметрыШаблона);

	ИначеЕсли НЕ УзелЗначение = "" ИЛИ (УзелРедактируется = Истина) Тогда

		ПараметрыШаблона = Новый Структура;
		ПараметрыШаблона.Вставить("ПараметрИдУзла", "" + Вкладка.ИдВкладки + "_" + Узел.Код);
		ПараметрыШаблона.Вставить("ПараметрНеактивно", ?(УзелРедактируется = Истина, "", "disabled"));
		ПараметрыШаблона.Вставить("ПараметрКоманда", "valuedit");
		ПараметрыШаблона.Вставить("ПараметрНадписьНаКнопке", СтрЭкранироватьРазметку(УзелЗначение));
		ПараметрЗначение = Шаблон.ПолучитьОбласть("ОбластьКнопкаИмяЗначение", ПараметрыШаблона);

	КонецЕсли;

	ПараметрыШаблона = Новый Структура;
	ПараметрыШаблона.Вставить("ПараметрИдУзла", "" + Вкладка.ИдВкладки + "_" + Узел.Код);
	ПараметрыШаблона.Вставить("ПараметрИнструменты", КнопкиИнструменты);
	ПараметрыШаблона.Вставить("ПараметрИмя", ПараметрИмя);
	ПараметрыШаблона.Вставить("ПараметрЗначение", ПараметрЗначение);
	ПараметрИмяУзла = КнопкаУзел + Шаблон.ПолучитьОбласть("ОбластьИмяЗначение", ПараметрыШаблона);

	Если НЕ ЭтоАтрибут Тогда

		ПараметрЗаголовокУзла = ПараметрИмяУзла + Атрибуты;

		ПараметрДочернийУзел = Дочерний;

		ПараметрыШаблона = Новый Структура;
		ПараметрыШаблона.Вставить("ПараметрИдУзла", "" + Вкладка.ИдВкладки + "_" + Узел.Код);
		ПараметрыШаблона.Вставить("ПараметрЗаголовокУзла", ПараметрЗаголовокУзла);
		ПараметрыШаблона.Вставить("ПараметрДочернийУзел", ПараметрДочернийУзел);
		Представление = Шаблон.ПолучитьОбласть("ОбластьУзел", ПараметрыШаблона);

	Иначе

		Представление = ПараметрИмяУзла;

	КонецЕсли;

	УзелСостояниеЗначение(Вкладка, Узел, "Структура", Представление);

	Возврат Представление;

КонецФункции


Функция ОтобразитьDOM(Вкладка, КодУзла, Знач ОбновитьУзел = Ложь, Знач ТипУзла = "", Знач НачальныйУзел = Ложь)

	Данные = Вкладка.Данные;

	Узел = Данные.ПолучитьУзел(КодУзла);
	Если Узел = Неопределено Тогда
		Возврат "Узел " + КодУзла + " не найден!";
	КонецЕсли;

	Если НЕ ОбновитьУзел Тогда
		Если НЕ УзелСостояние(Вкладка, Узел, "ОбновитьУзел") = Ложь Тогда
			ОбновитьУзел = Истина;
			НачальныйУзел = Истина;
		КонецЕсли;
	КонецЕсли;

	Представление = "";

	УзелИзменить = Ложь;
	Если Вкладка.Режим = "design" Тогда
		УзелИзменить = (УзелСостояние(Вкладка, Узел, "Изменить") = Истина);
	КонецЕсли;

	Если ОбновитьУзел Тогда

		УзелСостояниеЗначение(Вкладка, Узел, "ОбновитьУзел", Ложь);

		Если Вкладка.Режим = "struct" ИЛИ УзелИзменить Тогда
			Представление = "" + УзелСостояние(Вкладка, Узел, "Структура");
		Иначе
			Представление = "" + УзелСостояние(Вкладка, Узел, "Вид");
		КонецЕсли;

		Если Представление = "" Тогда
			Атрибуты = "";
			УзелАтрибут = УзелСвойство(Узел, "Атрибут");
			Если НЕ УзелАтрибут = Неопределено Тогда
				Атрибуты = ОтобразитьDOM(Вкладка, УзелАтрибут, ОбновитьУзел, "Атрибут");
			КонецЕсли;

			Дочерний = "";
			Если НЕ (Вкладка.Режим = "struct" ИЛИ УзелИзменить) ИЛИ УзелСостояние(Вкладка, Узел, "УзелОткрыт") = Истина  Тогда
				УзелДочерний = УзелСвойство(Узел, "Дочерний");
				Если НЕ УзелДочерний = Неопределено Тогда
					Дочерний = ОтобразитьDOM(Вкладка, УзелДочерний, ОбновитьУзел, "Дочерний");
				КонецЕсли;
			КонецЕсли;

			Если Вкладка.Режим = "struct" ИЛИ УзелИзменить Тогда
				Представление = ПоказатьСтруктуруУзла(Узел, Вкладка, (ТипУзла = "Атрибут"), Атрибуты, Дочерний);
			Иначе
				Представление = ПоказатьУзел(Узел, Вкладка, (ТипУзла = "Атрибут"), Атрибуты, Дочерний);
			КонецЕсли;
		КонецЕсли;

		Если НЕ НачальныйУзел Тогда
			УзелСоседний = УзелСвойство(Узел, "Соседний");
			Если НЕ УзелСоседний = Неопределено Тогда
				Соседний = ОтобразитьDOM(Вкладка, УзелСоседний, ОбновитьУзел, ТипУзла);
				Представление = Представление + Соседний;
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли УзелСостояние(Вкладка, Узел, "ОбновитьПодчиненный") = Истина Тогда

		УзелАтрибут = УзелСвойство(Узел, "Атрибут");
		Если НЕ УзелАтрибут = Неопределено Тогда
			Представление = ОтобразитьDOM(Вкладка, УзелАтрибут, , "Атрибут");
		КонецЕсли;

		Если Представление = "" Тогда
			Если НЕ (Вкладка.Режим = "struct" ИЛИ УзелИзменить) ИЛИ УзелСостояние(Вкладка, Узел, "УзелОткрыт") = Истина Тогда
				УзелДочерний = УзелСвойство(Узел, "Дочерний");
				Если НЕ УзелДочерний = Неопределено Тогда
					Представление = ОтобразитьDOM(Вкладка, УзелДочерний, , "Дочерний");
				КонецЕсли;
			КонецЕсли;

			Если Представление = "" Тогда
				УзелСоседний = УзелСвойство(Узел, "Соседний");
				Если НЕ УзелСоседний = Неопределено Тогда
					Представление = ОтобразитьDOM(Вкладка, УзелСоседний, , ТипУзла);
				КонецЕсли;

				Если Представление = "" Тогда
					УзелСостояниеЗначение(Вкладка, Узел, "ОбновитьПодчиненный", Ложь);
				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Возврат Представление;

КонецФункции // ОтобразитьDOM()


Функция ОбработатьКоманду(структЗадача) Экспорт

	Запрос = структЗадача.Запрос;

	ДействиеИмя = УзелСвойство(Запрос, "cmd");

	Если НЕ ДействиеИмя = Неопределено Тогда

		Если 	ДействиеИмя 	= "nodeopen"	Тогда ДействиеИмя = "ОткрытьУзел"
		ИначеЕсли ДействиеИмя	= "nodeclose"	Тогда ДействиеИмя = "ЗакрытьУзел"
		ИначеЕсли ДействиеИмя	= "nodedit"		Тогда ДействиеИмя = "РедактироватьУзел"
		ИначеЕсли ДействиеИмя	= "attredit"	Тогда ДействиеИмя = "РедактироватьАтрибут"
		ИначеЕсли ДействиеИмя	= "view"		Тогда ДействиеИмя = "УзелПросмотр"
		ИначеЕсли ДействиеИмя	= "nodereload"	Тогда ДействиеИмя = "ОбновитьУзел"
		ИначеЕсли ДействиеИмя	= "newtab"		Тогда ДействиеИмя = "НоваяВкладка"
		ИначеЕсли ДействиеИмя	= "tabselect"	Тогда ДействиеИмя = "ВыбратьВкладку"
		ИначеЕсли ДействиеИмя	= "tabclose"	Тогда ДействиеИмя = "ЗакрытьВкладку"
		ИначеЕсли ДействиеИмя	= "valuedit"	Тогда ДействиеИмя = "РедактироватьЗначение"
		ИначеЕсли ДействиеИмя	= "submitvalue"	Тогда ДействиеИмя = "НовоеЗначениеУзла"
		ИначеЕсли ДействиеИмя	= "submitname"	Тогда ДействиеИмя = "НовоеИмяУзла"
		ИначеЕсли ДействиеИмя	= "namedit"		Тогда ДействиеИмя = "РедактироватьИмя"
		ИначеЕсли ДействиеИмя	= "attradd"		Тогда ДействиеИмя = "НовыйАтрибут"
		ИначеЕсли ДействиеИмя	= "childadd"	Тогда ДействиеИмя = "НовыйДочерний"
		КонецЕсли;

		структЗадача.Действие = Новый Структура("Имя, Результат", ДействиеИмя);
		Возврат Истина;

	КонецЕсли;

	Возврат Ложь;

КонецФункции // ОбработатьКоманду()


Функция ЗапросВыполнитьЗадачу(структЗадача)
	Перем domupdate;

	Если структЗадача.Этап = "ВыполнитьЗадачу" Тогда

		Если структЗадача.Запрос.Свойство("domupdate", domupdate) Тогда
			Если domupdate = "0" Тогда
				ОбновитьПанель = Истина;
				Если НЕ ТекущиеДанные = Неопределено Тогда
					ТекущиеДанные.ОбновитьУзел = Истина;
				КонецЕсли;
				Если НЕ ТекущееОкно = Неопределено Тогда
					ТекущееОкно.ОбновитьУзел = Истина;
				КонецЕсли;
			КонецЕсли;
			структЗадача.Этап = "СформироватьОтвет";
		ИначеЕсли ОбработатьКоманду(структЗадача) Тогда
			структЗадача.Этап = "ВыполнитьДействия";
		Иначе
			структЗадача.Результат = НачальнаяСтраница();
			структЗадача.Этап = "ЕстьРезультат";
		КонецЕсли;

	КонецЕсли;

	Если структЗадача.Этап = "ВыполнитьДействия" Тогда
		Если ВыполнитьДействия(структЗадача) = Истина Тогда
		КонецЕсли;
		структЗадача.Этап = "УдалитьЗадачу";
	КонецЕсли;

	Если структЗадача.Этап = "СформироватьОтвет" Тогда

		структЗадача.Результат = структЗадача.Результат + ОбщийРезультат;
		ОбщийРезультат = "";

		Если НЕ ОбновитьПанель = Ложь Тогда
			структЗадача.Результат = структЗадача.Результат + ПоказатьПанель();
			ОбновитьПанель = Ложь;
		КонецЕсли;

		Если НЕ ТекущиеДанные = Неопределено Тогда
			Ответ = "" + ОтобразитьDOM(ТекущиеДанные, ТекущиеДанные.ИдУзла, ТекущиеДанные.ОбновитьУзел, , Истина);
			ТекущиеДанные.ОбновитьУзел = Ложь;
			структЗадача.Результат = структЗадача.Результат + Ответ;
		КонецЕсли;

		Если НЕ ТекущееОкно = Неопределено Тогда
			Ответ = "" + ОтобразитьDOM(ТекущееОкно, ТекущееОкно.ИдУзла, ТекущееОкно.ОбновитьУзел, , Истина);
			Если ТекущееОкно.ОбновитьУзел = Истина Тогда
				ПараметрыШаблона = Новый Структура;
				ПараметрыШаблона.Вставить("ПараметрЗаголовокОкна", ТекущееОкно.Заголовок);
				ПараметрыШаблона.Вставить("ПараметрСодержимоеОкна", Ответ);
				ПараметрыШаблона.Вставить("ПараметрВкладка", ТекущееОкно.ИдВкладки);
				Ответ = Шаблон.ПолучитьОбласть("ОбластьОкно", ПараметрыШаблона);
				ТекущееОкно.ОбновитьУзел = Ложь;
			КонецЕсли;
			структЗадача.Результат = структЗадача.Результат + Ответ;
		КонецЕсли;

		Если НЕ структЗадача.Результат = "" Тогда
			структЗадача.Этап = "ЕстьРезультат";
		КонецЕсли;
	КонецЕсли;

	Если структЗадача.Этап = "ЕстьРезультат" Тогда
		Соединение = Неопределено;
		Если ПередатьСтроку(Соединение, "<!--" + структЗадача.Запрос.taskid + "-->" + структЗадача.Результат + "<!--end-->") Тогда
			Если НЕ Соединение = Неопределено Тогда
				Соединение.Закрыть();
				структЗадача.Этап = "УдалитьЗадачу";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецФункции // ЗапросВыполнитьЗадачу()


Функция УзелСвойство(Узел, Свойство) Экспорт
	УзелСвойство = Неопределено;
	Если НЕ Узел = Неопределено Тогда
		Узел.Свойство(Свойство, УзелСвойство);
	КонецЕсли;
	Возврат УзелСвойство;
КонецФункции // УзелСвойство(Узел)


Функция УзелСвойствоЗначение(Узел, СвойствоИмя, СвойствоЗначение) Экспорт
	Если НЕ Узел = Неопределено Тогда
		Узел.Вставить(СвойствоИмя, СвойствоЗначение);
	КонецЕсли;
	Возврат Неопределено;
КонецФункции // УзелСвойствоЗначение(Узел)


Функция УзелСостояние(Вкладка, Узел, СостояниеИмя) Экспорт
	УзелСостояние = Вкладка.Состояния.Получить(Узел.Код);
	Если НЕ УзелСостояние = Неопределено Тогда
		УзелСостояние.Свойство(СостояниеИмя, УзелСостояние);
	КонецЕсли;
	Возврат УзелСостояние;
КонецФункции // УзелСостояние(Узел)


Функция УзелСостояниеЗначение(Вкладка, Узел, СостояниеИмя, СостояниеЗначение, Событие = Истина) Экспорт
	УзелСостояние = Вкладка.Состояния.Получить(Узел.Код);
	Если УзелСостояние = Неопределено Тогда
		УзелСостояние = Новый Структура();
		Вкладка.Состояния.Вставить(Узел.Код, УзелСостояние);
	КонецЕсли;
	УзелСостояние.Вставить(СостояниеИмя, СостояниеЗначение);
	Если Событие Тогда
		Если СостояниеИмя = "ОбновитьУзел" И СостояниеЗначение = Истина Тогда
			Сообщить("" + Вкладка.ИдВкладки + "_" + Узел.Код + " " + СостояниеИмя + "=" + Лев(СостояниеЗначение,30));
			НовоеСобытие(Новый Структура("Имя, Вкладка, Узел", "ОбновитьУзелИстина", Вкладка, Узел));
		КонецЕсли;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции // УзелСостояниеЗначение(Узел)


Функция НовоеСобытие(СтруктураСобытия)
	ИдСобытия = ИдСобытия + 1;
	Событие = Новый Структура(СтруктураСобытия);
	События.Вставить(ИдСобытия, Событие);
	Возврат Событие;
КонецФункции // НовоеСобытие()


Функция ОбработатьСобытия()
	Для каждого элСобытие Из События Цикл
		Событие = элСобытие.Значение;
		Если Событие.Имя = "ОбновитьУзелИстина" Тогда
			// Если Запрос.mode = "lisp" Тогда
			// 	Попытка
			// 		Значение = Данные.Интерпретировать(Данные.Окружение, Узел);
			// 	Исключение
			// 		Значение = ОписаниеОшибки();
			// 	КонецПопытки;
			// 	Узел.Вставить("Значение", Значение);
			// КонецЕсли;
			Для каждого элВкладка Из Вкладки Цикл
				Вкладка = ЭлВкладка.Значение;
				Если НЕ Вкладка = Событие.Вкладка Тогда
					Если Вкладка.Данные = Событие.Вкладка.Данные Тогда
						Сообщить("" + Вкладка.ИдВкладки + "_" + Событие.Узел.Код);
						ОбновитьСостояние(Вкладка, Событие.Узел, "ОбновитьУзел", Истина, Ложь)
						//УзелСостояниеЗначение(Вкладка, Событие.Узел, "ОбновитьУзел", Истина, Ложь);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			События.Удалить(элСобытие.Ключ);
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецФункции // ОбработатьСобытия()


Функция ОбновитьСостояние(Вкладка, Узел, Состояние, Значение, Событие = Ложь, НачальныйУзел = Ложь)

	Если Узел = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	Данные = Вкладка.Данные;

	Результат = Истина;

	Если Состояние = "Изменить" Тогда
		ОбновитьСостояние(Вкладка, Данные.Атрибут(Узел), "Изменить", Значение);
		ОбновитьСостояние(Вкладка, Данные.Дочерний(Узел), "Изменить", Значение);
		Если НачальныйУзел Тогда
			ОбновитьСостояние(Вкладка, Узел, "УзелРедактируется", Значение);
		Иначе
			ОбновитьСостояние(Вкладка, Данные.Соседний(Узел), "Изменить", Значение);
		КонецЕсли;

	ИначеЕсли Состояние = "НовоеЗначениеУзла" Тогда
		ОбновитьСостояние(Вкладка, Узел, "РедактироватьЗначение", Ложь, Истина);
		УзелСвойствоЗначение(Узел, "Значение", Значение);

	ИначеЕсли Состояние = "НовоеИмяУзла" Тогда
		ОбновитьСостояние(Вкладка, Узел, "РедактироватьИмя", Ложь, Истина);
		УзелСвойствоЗначение(Узел, "Имя", Значение);

	ИначеЕсли Состояние = "ОбновитьПодчиненный" ИЛИ Состояние = "ОбновитьУзел" Тогда
		ОбновитьСостояние(Вкладка, Данные.Старший(Узел), "ОбновитьПодчиненный", Истина, Событие);

	КонецЕсли;

	Если НЕ Результат = Ложь Тогда
		УзелСостояниеЗначение(Вкладка, Узел, Состояние, Значение, Событие);
		Если НЕ Состояние = "ОбновитьПодчиненный" Тогда
			Если НЕ Состояние = "ОбновитьУзел" Тогда
				ОбновитьСостояние(Вкладка, Узел, "ОбновитьУзел", Истина, Событие);
			КонецЕсли;
		КонецЕсли;
		УзелСостояниеЗначение(Вкладка, Узел, "Структура", "", Событие);
		УзелСостояниеЗначение(Вкладка, Узел, "Вид", "", Событие);
	КонецЕсли;

	Возврат Результат;

КонецФункции // ОбновитьСостояние()


Функция ВыполнитьДействия(структЗадача)
	Перем Вкладка;

	Действие = УзелСвойство(структЗадача, "Действие");
	Если НЕ Действие = Неопределено Тогда

		Запрос = структЗадача.Запрос;

		Если Действие.Имя = "savedata" Тогда
			Если НЕ ТекущиеДанные = Неопределено Тогда
				datafile = "" + procid + ".s";
				ТекущиеДанные.Данные.СохранитьДанные(ОбъединитьПути(ТекущийКаталог(), "data", ТекущиеДанные.БазаДанных + ".files", datafile));
				ОбщийРезультат = ОбщийРезультат + Шаблон.ПолучитьОбласть("ОбластьУведомление",
					Новый Структура("ПараметрТекстУведомления, ПараметрЗаголовокУведомления, ПараметрТипУведомления, ПараметрКоманда",
						"Данные сохранены",
						"showdata",
						1,
						"loaddata('/showdata/'+procid+'?osdb=" + ТекущиеДанные.БазаДанных + "&data=" + ТекущиеДанные.ИмяДанных + "&datafile=" + datafile + "&cmd=updatedb');"
						));
			КонецЕсли;
			Возврат Истина;
		КонецЕсли;

		tab = "" + УзелСвойство(Запрос, "tab");
		Если НЕ tab = "" Тогда
			tab = Число(tab);

			Вкладка = Вкладки.Получить(tab);
			Если Вкладка = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;

			Если Действие.Имя = "ЗакрытьВкладку" Тогда
				ОбщийРезультат = ОбщийРезультат + "<div id='"+tab+"_0'/>";
				Если Вкладка = ТекущиеДанные Тогда
					ТекущиеДанные = Неопределено;
				ИначеЕсли Вкладка = ТекущееОкно Тогда
					ТекущееОкно = Неопределено;
				КонецЕсли;
				Вкладки.Удалить(tab);
				удВкладка = Вкладка;

				Если tab = ТекущаяВкладка Тогда
					ТекущаяВкладка = Неопределено;
					Для каждого элВкладка Из ВкладкиСписок Цикл
						знВкладка = элВкладка.Значение;
						Если знВкладка = удВкладка Тогда
							tab = Неопределено;
							Продолжить;
						КонецЕсли;
						Если tab = Неопределено И НЕ ТекущаяВкладка = Неопределено Тогда
							Прервать;
						КонецЕсли;
						Если знВкладка.ТипВкладки = "data" Тогда
							Вкладка = знВкладка;
							ТекущаяВкладка = Вкладка.ИдВкладки;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;

				ВкладкиСписок.Удалить(ВкладкиСписок.НайтиПоЗначению(удВкладка));
				ОбновитьПанель = Истина;
				Возврат Истина;
			КонецЕсли;

			Вкладка.Вставить("Режим", УзелСвойство(Запрос, "mode"));
			Вкладка.Вставить("Прокрутка", УзелСвойство(Запрос, "scrolled"));

		КонецЕсли;

		Если Действие.Имя = "ВыбратьВкладку" Тогда
			tab = УзелСвойство(Запрос, "ntab");
			Если НЕ tab = Неопределено Тогда
				ТекущаяВкладка = Число(tab);
			КонецЕсли;
			ОбновитьПанель = Истина;
			Возврат Истина;
		КонецЕсли;

		Если Действие.Имя = "НоваяВкладка" Тогда
			ТекущиеДанные = НоваяВкладка(Запрос);
			ОбновитьПанель = Истина;
			Возврат Истина;
		КонецЕсли;

		ИдУзла = УзелСвойство(структЗадача.Запрос, "nodeid");
		НайтиИдУзла = Найти(ИдУзла, "_");
		Если НайтиИдУзла Тогда
			НайтиИдВкладки = Число(Лев(ИдУзла, НайтиИдУзла - 1));
			Вкладка = Вкладки.Получить(НайтиИдВкладки);
			ИдУзла = Сред(ИдУзла, НайтиИдУзла + 1);
		КонецЕсли;

		Если Вкладка = Неопределено Тогда
			Если ТекущиеДанные = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
			Вкладка = ТекущиеДанные;
		КонецЕсли;

		Данные = Вкладка.Данные;
		Если Данные = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;

		Узел = Данные.ПолучитьУзел(ИдУзла);

		Если Действие.Имя = "designmenu" Тогда
			ОбщийРезультат = ПоказатьМенюИнструменты(Вкладка, Узел);
			Возврат Истина;

		ИначеЕсли Действие.Имя = "ОткрытьУзел" Тогда
			Возврат ОбновитьСостояние(Вкладка, Узел, "УзелОткрыт", Истина);

		ИначеЕсли Действие.Имя = "ЗакрытьУзел" Тогда
			Возврат ОбновитьСостояние(Вкладка, Узел, "УзелОткрыт", Ложь);

		ИначеЕсли Действие.Имя = "РедактироватьУзел" Тогда
			Возврат ОбновитьСостояние(Вкладка, Узел, "УзелРедактируется", Истина);

		ИначеЕсли Действие.Имя = "РедактироватьАтрибут" Тогда
			Возврат ОбновитьСостояние(Вкладка, Узел, "АтрибутРедактируется", Истина);

		ИначеЕсли Действие.Имя = "РедактироватьЗначение" Тогда
			Возврат ОбновитьСостояние(Вкладка, Узел, "РедактироватьЗначение", Истина);

		ИначеЕсли Действие.Имя = "НовоеЗначениеУзла" Тогда
			Если Запрос.Свойство("valuedit") Тогда
				Возврат ОбновитьСостояние(Вкладка, Узел, "НовоеЗначениеУзла", Запрос.valuedit);
			Иначе
				Возврат ОбновитьСостояние(Вкладка, Узел, "РедактироватьЗначение", Ложь);
			КонецЕсли;

		ИначеЕсли Действие.Имя = "РедактироватьИмя" Тогда
			Возврат ОбновитьСостояние(Вкладка, Узел, "РедактироватьИмя", Истина);

		ИначеЕсли Действие.Имя = "НовоеИмяУзла" Тогда
			Если Запрос.Свойство("valuedit") Тогда
				Возврат ОбновитьСостояние(Вкладка, Узел, "НовоеИмяУзла", Запрос.valuedit);
			Иначе
				Возврат ОбновитьСостояние(Вкладка, Узел, "РедактироватьИмя", Ложь);
			КонецЕсли;

		ИначеЕсли Действие.Имя = "НовыйАтрибут" Тогда
			СтруктураУзла = Новый Структура("Имя, Значение, Старший", "", "", Узел.Код);
			УзелСоседний = Данные.Атрибут(Узел);
			Если НЕ УзелСоседний = Неопределено Тогда
				СтруктураУзла.Вставить("Соседний", УзелСоседний.Код);
			КонецЕсли;
			НовыйУзел = Данные.НовыйУзел(СтруктураУзла);
			Узел.Вставить("Атрибут", НовыйУзел.Код);
			Если НЕ УзелСоседний = Неопределено Тогда
				УзелСоседний.Вставить("Старший", НовыйУзел.Код);
			КонецЕсли;
			ОбновитьСостояние(Вкладка, НовыйУзел, "УзелРедактируется", Истина);
			ОбновитьСостояние(Вкладка, НовыйУзел, "РедактироватьИмя", Истина);
			//ОбновитьСостояние(Вкладка, НовыйУзел, "РедактироватьЗначение", Истина);
			Возврат ОбновитьСостояние(Вкладка, Узел, "ОбновитьУзел", Истина, Истина);

		ИначеЕсли Действие.Имя = "НовыйДочерний" Тогда
			СтруктураУзла = Новый Структура("Имя, Значение, Старший", "", "", Узел.Код);
			УзелСоседний = Данные.Дочерний(Узел);
			Если НЕ УзелСоседний = Неопределено Тогда
				СтруктураУзла.Вставить("Соседний", УзелСоседний.Код);
			КонецЕсли;
			НовыйУзел = Данные.НовыйУзел(СтруктураУзла);
			Узел.Вставить("Дочерний", НовыйУзел.Код);
			Если НЕ УзелСоседний = Неопределено Тогда
				УзелСоседний.Вставить("Старший", НовыйУзел.Код);
			КонецЕсли;
			ОбновитьСостояние(Вкладка, НовыйУзел, "УзелРедактируется", Истина);
			ОбновитьСостояние(Вкладка, НовыйУзел, "РедактироватьИмя", Истина);
			//ОбновитьСостояние(Вкладка, НовыйУзел, "РедактироватьЗначение", Истина);
			ОбновитьСостояние(Вкладка, Узел, "УзелОткрыт", Истина);
			Возврат Истина;

		ИначеЕсли Действие.Имя = "nextadd" Тогда
			СтруктураУзла = Новый Структура("Имя, Значение, Старший", "", "", Узел.Код);
			УзелСоседний = Данные.Соседний(Узел);
			Если НЕ УзелСоседний = Неопределено Тогда
				СтруктураУзла.Вставить("Соседний", УзелСоседний.Код);
			КонецЕсли;
			НовыйУзел = Данные.НовыйУзел(СтруктураУзла);
			Узел.Вставить("Соседний", НовыйУзел.Код);
			Если НЕ УзелСоседний = Неопределено Тогда
				УзелСоседний.Вставить("Старший", НовыйУзел.Код);
			КонецЕсли;
			ОбновитьСостояние(Вкладка, НовыйУзел, "УзелРедактируется", Истина);
			ОбновитьСостояние(Вкладка, НовыйУзел, "РедактироватьИмя", Истина);
			//ОбновитьСостояние(Вкладка, НовыйУзел, "РедактироватьЗначение", Истина);
			ОбновитьСостояние(Вкладка, Узел, "ОбновитьУзел", Истина);
			Возврат ОбновитьСостояние(Вкладка, Данные.Родитель(Узел), "ОбновитьУзел", Истина, Истина);

		ИначеЕсли Действие.Имя = "noderemove" Тогда
			ДанныеРодительУзел = Данные.Родитель(Узел);
			Данные.УдалитьУзел(Узел);
			ОбновитьСостояние(Вкладка, ДанныеРодительУзел, "ОбновитьУзел", Истина, Истина);
			Возврат Истина;

		ИначеЕсли Действие.Имя = "nodecopy" Тогда
			Если НЕ Буфер = Неопределено Тогда
				ОсвободитьОбъект(Буфер);
			КонецЕсли;
			Буфер = Новый Соответствие;
			БуферУзел = Узел.Код;
			Данные.КопироватьУзел(Узел, Буфер);
			Возврат Истина;

		ИначеЕсли Действие.Имя = "nodecut" Тогда
			Если НЕ Буфер = Неопределено Тогда
				ОсвободитьОбъект(Буфер);
			КонецЕсли;
			Буфер = Новый Соответствие;
			БуферУзел = Узел.Код;
			Данные.КопироватьУзел(Узел, Буфер);
			ДанныеРодительУзел = Данные.Родитель(Узел);
			Данные.УдалитьУзел(Узел, Ложь);
			ОбновитьСостояние(Вкладка, ДанныеРодительУзел, "ОбновитьУзел", Истина, Истина);
			Возврат Истина;

		ИначеЕсли Действие.Имя = "nodepasteattr" Тогда
			Если НЕ Буфер = Неопределено Тогда
				НовыйУзел = Данные.ВставитьУзел(Буфер, БуферУзел, Истина);
				НовыйУзел.Вставить("Старший", Узел.Код);
				НовыйУзел.Вставить("Атрибут", Неопределено);
				НовыйУзел.Вставить("Дочерний", Неопределено);
				УзелАтрибут = Данные.Атрибут(Узел);
				Узел.Вставить("Атрибут", НовыйУзел.Код);
				Если НЕ УзелАтрибут = Неопределено Тогда
					НовыйУзел.Вставить("Соседний", УзелАтрибут.Код);
					УзелАтрибут.Вставить("Старший", НовыйУзел.Код);
				КонецЕсли;
			КонецЕсли;
			Возврат ОбновитьСостояние(Вкладка, Узел, "ОбновитьУзел", Истина, Истина);

		ИначеЕсли Действие.Имя = "nodepastechild" Тогда
			Если НЕ Буфер = Неопределено Тогда
				НовыйУзел = Данные.ВставитьУзел(Буфер, БуферУзел);
				НовыйУзел.Вставить("Старший", Узел.Код);
				УзелДочерний = Данные.Дочерний(Узел);
				Узел.Вставить("Дочерний", НовыйУзел.Код);
				Если НЕ УзелДочерний = Неопределено Тогда
					НовыйУзел.Вставить("Соседний", УзелДочерний.Код);
					УзелДочерний.Вставить("Старший", НовыйУзел.Код);
				КонецЕсли;
			КонецЕсли;
			Возврат ОбновитьСостояние(Вкладка, Узел, "ОбновитьУзел", Истина, Истина);

		ИначеЕсли Действие.Имя = "nodepastenext" Тогда
			Если НЕ Буфер = Неопределено Тогда
				НовыйУзел = Данные.ВставитьУзел(Буфер, БуферУзел);
				НовыйУзел.Вставить("Старший", Узел.Код);
				УзелСоседний = Данные.Соседний(Узел);
				Узел.Вставить("Соседний", НовыйУзел.Код);
				Если НЕ УзелСоседний = Неопределено Тогда
					НовыйУзел.Вставить("Соседний", УзелСоседний.Код);
					УзелСоседний.Вставить("Старший", НовыйУзел.Код);
				КонецЕсли;
			КонецЕсли;
			Возврат ОбновитьСостояние(Вкладка, Данные.Родитель(Узел), "ОбновитьУзел", Истина, Истина);

		ИначеЕсли Действие.Имя = "attremove" Тогда
			Если НЕ УзелСвойство(Узел, "Атрибут") = Неопределено Тогда
				Данные.УдалитьУзел(Данные.Атрибут(Узел), Ложь);
				//Узел.Удалить("Атрибут");
				Узел.Атрибут = Неопределено;
			КонецЕсли;
			Возврат ОбновитьСостояние(Вкладка, Узел, "ОбновитьУзел", Истина, Истина);

		ИначеЕсли Действие.Имя = "childremove" Тогда
			Если НЕ УзелСвойство(Узел, "Дочерний") = Неопределено Тогда
				Данные.УдалитьУзел(Данные.Дочерний(Узел), Ложь);
				//Узел.Удалить("Дочерний");
				Узел.Дочерний = Неопределено;
			КонецЕсли;
			Возврат ОбновитьСостояние(Вкладка, Узел, "ОбновитьУзел", Истина, Истина);

		ИначеЕсли Действие.Имя = "struct" Тогда
			Возврат ОбновитьСостояние(Вкладка, Узел, "Изменить", Истина, , Истина);

		ИначеЕсли Действие.Имя = "УзелПросмотр" Тогда
			Возврат ОбновитьСостояние(Вкладка, Узел, "Изменить", Ложь, , Истина);

		ИначеЕсли Действие.Имя = "designmode" Тогда
			ТекущиеДанные.Режим = "design";
			Возврат Ложь;

		ИначеЕсли Действие.Имя = "editwin" Тогда
			ОбновитьСостояние(Вкладка, Узел, "УзелОткрыт", Истина);
			ТекущееОкно = Новый Структура("ИдВкладки, ТипВкладки, Данные, Состояния, Заголовок, Режим, ИдУзла, БазаДанных, ИмяДанных, ОбновитьУзел, Прокрутка",
				ИдВкладки,
				"win",
				Данные,
				Новый Соответствие,
				Вкладка.ИмяДанных + " ." + Узел.Имя,
				"struct",
				Узел.Код,
				Вкладка.БазаДанных,
				Вкладка.ИмяДанных,
				Истина,
				"0");
			ВкладкиСписок.Вставить(ВкладкиСписок.Индекс(ВкладкиСписок.НайтиПоЗначению(ТекущиеДанные)) + 1, ТекущееОкно);
			Вкладки.Вставить(ИдВкладки, ТекущееОкно);
			ТекущаяВкладка = ИдВкладки;
			ИдВкладки = ИдВкладки + 1;
			ОбновитьПанель = Истина;
			Возврат Истина;

		ИначеЕсли Действие.Имя = "edittab" Тогда
			ОбновитьСостояние(Вкладка, Узел, "УзелОткрыт", Истина);
			НовыеТекущиеДанные = Новый Структура("ИдВкладки, ТипВкладки, Данные, Состояния, Заголовок, Режим, ИдУзла, БазаДанных, ИмяДанных, ОбновитьУзел",
				ИдВкладки,
				"data",
				Данные,
				Новый Соответствие,
				Вкладка.ИмяДанных + " .struct",
				"struct",
				1,
				Вкладка.БазаДанных,
				Вкладка.ИмяДанных,
				Истина);
			ВкладкиСписок.Вставить(ВкладкиСписок.Индекс(ВкладкиСписок.НайтиПоЗначению(ТекущиеДанные)) + 1, НовыеТекущиеДанные);
			Вкладки.Вставить(ИдВкладки, НовыеТекущиеДанные);
			ТекущиеДанные = НовыеТекущиеДанные;
			ТекущаяВкладка = ИдВкладки;
			ИдВкладки = ИдВкладки + 1;
			ОбновитьПанель = Истина;
			Возврат Истина;

		КонецЕсли;

		Если Действие.Имя = "ОбновитьDOM" Тогда
			Возврат Истина;
		КонецЕсли;

	КонецЕсли;

	Возврат Ложь;
КонецФункции // ВыполнитьДействия()


Функция ПередатьСтроку(Соединение, СтрокаДанные)
	Попытка
		Соединение = Новый TCPСоединение(Хост, Порт);
		Соединение.ТаймаутОтправки = 50;
		Соединение.ОтправитьСтроку(СтрокаДанные);
		КоличествоПопыток = 100;
		Возврат Истина;
	Исключение
		Соединение = Неопределено;
		КоличествоПопыток = КоличествоПопыток - 1;
		Если КоличествоПопыток = 0 Тогда
			Сообщить("Хост недоступен");
		КонецЕсли;
		Возврат Ложь;
	КонецПопытки;
КонецФункции // ПередатьСтроку()



Если АргументыКоманднойСтроки.Количество() Тогда

	procid = АргументыКоманднойСтроки[0];

	Шаблон = ЗагрузитьСценарий(ОбъединитьПути(ТекущийКаталог(), "template.os"));
	Шаблон.ЗагрузитьМакет(ОбъединитьПути(ТекущийКаталог(), "resource", "showdata.html"));

	ПодключитьСценарий(ОбъединитьПути(ТекущийКаталог(), "pagedata.os"), "pagedata");

	ВсеДанные = Новый Соответствие;

	ВкладкиСписок = Новый СписокЗначений;
	Вкладки = Новый Соответствие;
	ИдВкладки = 0;

	Буфер = Неопределено;

	События = Новый Соответствие;
	ИдСобытия = 0;

	Хост = "127.0.0.1";
	Порт = 8888;
	Соединение = Неопределено;

	Задачи = Новый Соответствие;

	СтруктЗапрос = СтруктуруВСтроку(Новый Структура("procid", procid));
	КоличествоПопыток = 100;

	ОбщийРезультат = "";

	Попытка

		Пока Истина Цикл

			ПрерватьЦикл = Ложь;
			Пока Не ПрерватьЦикл Цикл
				ПрерватьЦикл = Истина;
				Для каждого элЗадача Из Задачи Цикл
					структЗадача = ЭлЗадача.Значение;
					Если структЗадача.Тип = "Запрос" Тогда
						ЗапросВыполнитьЗадачу(структЗадача);
					КонецЕсли;
					Если структЗадача.Этап = "УдалитьЗадачу" Тогда
						Задачи.Удалить(элЗадача.Ключ);
						ПрерватьЦикл = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;

			Если Соединение = Неопределено Тогда
				Если НЕ ПередатьСтроку(Соединение, СтруктЗапрос) Тогда
					Если НЕ КоличествоПопыток > 0 Тогда
						Прервать;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Если НЕ Соединение.Активно Тогда
					Соединение = Неопределено;
					Продолжить;
				КонецЕсли;
			КонецЕсли;

			Попытка
				ЗадачиКоличество = Задачи.Количество();
				Если ЗадачиКоличество Тогда
					Соединение.ТаймаутЧтения = 50;
				КонецЕсли;
				Запрос = Соединение.ПрочитатьСтроку();
			Исключение
				//Сообщить("Осталось задач: " + ЗадачиКоличество);
				ОбработатьСобытия();
				Продолжить;
			КонецПопытки;

			Попытка
				Запрос = СтрокуВСтруктуру(Запрос);
				структЗадача = Новый Структура("Тип, Этап, Запрос, Действие, Результат", "Запрос", "ВыполнитьЗадачу", Запрос, Неопределено, "");
			Исключение
				структЗадача = Новый Структура("Тип, Этап, Запрос, Результат", "Запрос", "ЕстьРезультат", Неопределено, "Неверный запрос");
			КонецПопытки;

			Задачи.Вставить(Запрос.taskid, структЗадача);

			Соединение.Закрыть();
			Соединение = Неопределено;

		КонецЦикла;

	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;

КонецЕсли;
