Перем procid;
Перем Шаблон;
Перем Буфер, БуферУзел;
Перем События, ИдСобытия;
Перем Хост, Порт;
Перем Вкладки, ВкладкиСписок, ИдВкладки;
Перем ОбновитьПанель;
Перем ТекущаяВкладка, ТекущиеДанные, ТекущееОкно;
Перем ЗадачиКоличество;
Перем ОбщийРезультат;
Перем КоличествоПопыток;
Перем НомерОбновления;
Перем УзлыЛисп;

//Перем ВсеДанные;



Функция СтрЭкранироватьСкрипт(Знач Стр)
	Стр = СтрЗаменить(Стр, """", "\""");
	Стр = СтрЗаменить(Стр, "'", "\'");
	Стр = СтрЗаменить(Стр, "<", "\<");
	Стр = СтрЗаменить(Стр, ">", "\>");
	Возврат Стр;
КонецФункции


Функция СтрЭкранироватьРазметку(Знач Стр)
	Стр = СтрЗаменить(Стр, "&", "&amp;");
	Стр = СтрЗаменить(Стр, """", "&quot;");
	Стр = СтрЗаменить(Стр, "'", "&#39;");
	Стр = СтрЗаменить(Стр, "<", "&lt;");
	Стр = СтрЗаменить(Стр, ">", "&gt;");
	Стр = СтрЗаменить(Стр, Символы.ПС, "<br/>");
	Возврат Стр;
КонецФункции


Функция СтрокаЗапрос(ПараметрыЗапроса)
	Стр = "";
	Для каждого Параметр Из ПараметрыЗапроса Цикл
		Если Стр = "" Тогда
			Стр = "?";
		Иначе
			Стр = Стр + "&amp;";
		КонецЕсли;
		Стр = Стр + Параметр.Ключ + "=" + Параметр.Значение;
	КонецЦикла;
	Возврат "/showdata/" + procid + Стр;
КонецФункции


Функция ПоказатьПанель()
	Текст = "";
	ПараметрыШаблона = Новый Структура;
	Для каждого элВкладка Из ВкладкиСписок Цикл
		Вкладка = элВкладка.Значение;
		ПараметрыШаблона.Вставить("ПараметрВкладка", Вкладка.ИдВкладки);
		ПараметрыШаблона.Вставить("ПараметрЗаголовок", Вкладка.Заголовок);
		ПараметрыШаблона.Вставить("ПараметрАктивный", ?(Вкладка.ИдВкладки = ТекущаяВкладка, "active", ""));
		ПараметрыШаблона.Вставить("ПараметрРежим", Вкладка.Режим);
		ПараметрыШаблона.Вставить("ПараметрТипВкладки", Вкладка.ТипВкладки);
		ПараметрыШаблона.Вставить("ПараметрИдВкладки", Вкладка.ИдВкладки);
		ПараметрыШаблона.Вставить("ПараметрПрокрутка", Вкладка.Прокрутка);
		Текст = Текст + Шаблон.ПолучитьОбласть("ОбластьВкладка" + ?(Вкладка.ИдВкладки = 0, "0", ""), ПараметрыШаблона);
	КонецЦикла;
	// ПараметрыШаблона.Вставить("ПараметрВкладка", ИдВкладки);
	// Текст = Текст + Шаблон.ПолучитьОбласть("ОбластьНоваяВкладка", ПараметрыШаблона);
	МенюИнструменты = "";
	// ПараметрыШаблона = Новый Структура;
	// МенюИнструменты = МенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);
	ПараметрыШаблона = Новый Структура;
	ПараметрыШаблона.Вставить("ПараметрВкладки", Текст);
	ПараметрыШаблона.Вставить("ПараметрВкладка", ИдВкладки);
	ПараметрыШаблона.Вставить("ПараметрМенюИнструменты", МенюИнструменты);
	Текст = Шаблон.ПолучитьОбласть("ОбластьПанель", ПараметрыШаблона);
	Возврат Текст;
КонецФункции // ПоказатьПанель()


Функция ПерваяВкладка(Данные)
	Узел = Данные.НовыйУзел(Новый Структура("Имя", "div"));
	Узел = Данные.НовыйДочерний(Узел, Новый Структура("Имя", "p"));
	дУзел = Данные.НовыйДочерний(Узел, Новый Структура("Имя, Значение", "a", "Объектно-ориентированная система управления базами данных в среде OneScript"));
	Данные.НовыйАтрибут(дУзел, Новый Структура("Имя, Значение", "target", "_blank"));
	Данные.НовыйАтрибут(дУзел, Новый Структура("Имя, Значение", "href", "https://github.com/vasvl123/OneScriptDB/"));
	Узел = Данные.НовыйСоседний(Узел, Новый Структура("Имя, Значение", "p", "Список файлов:"));
	СписокБаз = НайтиФайлы(ОбъединитьПути(ТекущийКаталог(), "data"), "*.osdb", Истина);
	Если СписокБаз.Количество() Тогда
		Для каждого БазаДанных Из СписокБаз Цикл
			ИндексИмя = ОбъединитьПути(ТекущийКаталог(), "data", БазаДанных.ИмяБезРасширения + ".files", "index");
			Индекс = Новый Файл(ИндексИмя);
			Если НЕ Индекс.Существует() Тогда
				Соединение = Неопределено;
				ПередатьСтроку(Соединение, "osdb	" + БазаДанных.ИмяБезРасширения);
				Попытка
					ИндексИмя = Соединение.ПрочитатьСтроку();
					Соединение.Закрыть();
				Исключение
					Сообщить(ОписаниеОшибки());
					Продолжить;
				КонецПопытки;
			КонецЕсли;
			Индекс = Новый ТекстовыйДокумент;
			Индекс.Прочитать(ОбъединитьПути(ТекущийКаталог(), "data", БазаДанных.ИмяБезРасширения + ".files", ИндексИмя));
			Для н = 1 По Индекс.КоличествоСтрок() Цикл
				нУзел = СтрокуВСтруктуру(Индекс.ПолучитьСтроку(н));
				Узел = Данные.НовыйСоседний(Узел, Новый Структура("Имя, Значение", "p", БазаДанных.ИмяБезРасширения + "."));
				дУзел = Данные.НовыйДочерний(Узел, Новый Структура("Имя, Значение", "a", нУзел.dataposition));
				Данные.НовыйАтрибут(дУзел, Новый Структура("Имя, Значение", "href", ""));
				Данные.НовыйАтрибут(дУзел, Новый Структура("Имя, Значение", "onclick", "sendcmd('osdb=" + БазаДанных.ИмяБезРасширения + "&data=" + нУзел.data + "&dataposition=" + нУзел.dataposition + "&cmd=newtab'); return false;"));
				Данные.НовыйСоседний(дУзел, Новый Структура("Имя, Значение", "text", " " + УзелСвойство(нУзел, "date") + " " + нУзел.data));
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	СписокФайлов = НайтиФайлы(ОбъединитьПути(ТекущийКаталог(), "data", ".files"), "*.*", Истина);
	Если СписокФайлов.Количество() Тогда
		Для каждого элФайл Из СписокФайлов Цикл
			Узел = Данные.НовыйСоседний(Узел, Новый Структура("Имя", "p"));
			дУзел = Данные.НовыйДочерний(Узел, Новый Структура("Имя, Значение", "a", элФайл.Имя));
			Данные.НовыйАтрибут(дУзел, Новый Структура("Имя, Значение", "href", ""));
			Данные.НовыйАтрибут(дУзел, Новый Структура("Имя, Значение", "onclick", "sendcmd('osdb=&data=" + элФайл.Имя + "&cmd=newtab'); return false;"));
		КонецЦикла;
	КонецЕсли;

	Узел = Данные.НовыйСоседний(Узел, Новый Структура("Имя", "p"));
	дУзел = Данные.НовыйДочерний(Узел, Новый Структура("Имя, Значение", "button", "Перезапустить"));
	Данные.НовыйАтрибут(дУзел, Новый Структура("Имя, Значение", "href", ""));
	Данные.НовыйАтрибут(дУзел, Новый Структура("Имя, Значение", "class", "btn btn-primary btn-sm"));
	Данные.НовыйАтрибут(дУзел, Новый Структура("Имя, Значение", "onclick", "window.location.href='/tasks/restartserver'; return false;"));

	Узел = Данные.НовыйСоседний(Узел, Новый Структура("Имя", "p"));
	дУзел = Данные.НовыйДочерний(Узел, Новый Структура("Имя, Значение", "button", "Завершить"));
	Данные.НовыйАтрибут(дУзел, Новый Структура("Имя, Значение", "href", ""));
	Данные.НовыйАтрибут(дУзел, Новый Структура("Имя, Значение", "class", "btn btn-primary btn-sm"));
	Данные.НовыйАтрибут(дУзел, Новый Структура("Имя, Значение", "onclick", "window.location.href='/tasks/stopserver'; return false;"));

КонецФункции


Функция НоваяВкладка(Параметры)
	БазаДанных = "" + УзелСвойство(Параметры, "osdb");
	ИмяДанных = "" + УзелСвойство(Параметры, "data");
	ПозицияДанных = "" + УзелСвойство(Параметры, "dataposition");
	Если НЕ "" + БазаДанных = "" Тогда
		Соединение = Неопределено;
		ПередатьСтроку(Соединение, "osdb	" + БазаДанных + "	dataposition	" + ПозицияДанных);
		Попытка
			ФайлДанных = Соединение.ПрочитатьСтроку();
			Соединение.Закрыть();
		Исключение
			Сообщить(ОписаниеОшибки());
			Возврат Неопределено;
		КонецПопытки;
		Данные = Новый pagedata(ОбъединитьПути(ТекущийКаталог(), "data", БазаДанных + ".files", ФайлДанных));
	Иначе
		Если НЕ "" + ИмяДанных = "" Тогда
			Данные = Новый pagedata(ОбъединитьПути(ТекущийКаталог(), "data", ".files", ИмяДанных));
		Иначе
			Данные = Новый pagedata();
			ПерваяВкладка(Данные);
			ИмяДанных = "OnescriptDB";
		КонецЕсли;
	КонецЕсли;
	ТекущаяВкладка = ИдВкладки;
	структВкладка = Новый Структура("ИдВкладки, ТипВкладки, Данные, Состояния, Заголовок, Режим, ИдУзла, БазаДанных, ИмяДанных, ОбновитьУзел, Прокрутка",
		ИдВкладки,
		"data",
		Данные,
		Новый Соответствие,
		ИмяДанных,
		"view",
		"1",
		БазаДанных,
		ИмяДанных,
		Истина,
		"0");
	ВкладкиСписок.Добавить(структВкладка);
	Вкладки.Вставить(ИдВкладки, структВкладка);
	ИдВкладки = ИдВкладки + 1;
	Возврат структВкладка;
КонецФункции


Функция НачальнаяСтраница()
	Текст = Шаблон.ПолучитьОбласть("ОбластьШапка", Новый Структура("ПараметрИдПроцесса", procid));
	Текст = Текст + Шаблон.ПолучитьОбласть("ОбластьПодвал");
	Возврат Текст;
КонецФункции


Функция СтрокуВСтруктуру(Знач Стр)
	Стр = СтрРазделить(Стр, Символы.Таб);
	Ключ = Неопределено;
	Рез = Неопределено;
	Для Каждого знСтр Из Стр Цикл
		Если Ключ = Неопределено Тогда
			Ключ = знСтр;
		Иначе
			Если Рез = Неопределено Тогда
				Рез = Новый Структура;
			КонецЕсли;
			Рез.Вставить(Ключ, знСтр);
			Ключ = Неопределено;
		КонецЕсли;
	КонецЦикла;
	Возврат Рез;
КонецФункции


Функция СтруктуруВСтроку(Структ)
	Результат = "";
	Для каждого Элемент Из Структ Цикл
		Результат = Результат + ?(Результат = "", "", Символы.Таб) + Элемент.Ключ + Символы.Таб + Элемент.Значение;
	КонецЦикла;
	Возврат Результат;
КонецФункции


Функция ПоказатьУзел(Вкладка, Узел, ЭтоАтрибут = Ложь, Атрибуты = "", Дочерний = "") Экспорт

	Представление = "";

	Если ЭтоАтрибут Тогда

		АтрибутИмя = Узел.Имя;
		Если АтрибутИмя = "id" Тогда
			АтрибутИмя = "old-id";
		КонецЕсли;
		АтрибутИмя = СтрЗаменить(АтрибутИмя, "xml_lang", "xml:lang");
		АтрибутИмя = СтрЗаменить(АтрибутИмя, "_", "-");
		АтрибутЗначение = Узел.Значение;
		Представление = Представление + " " + АтрибутИмя + "=""" + АтрибутЗначение + """";

	Иначе

		Если Узел.Имя = "comment" Тогда
			Если Узел.Свойство("Значение") Тогда
				Представление = Представление + "<!-- " + Узел.Значение + " -->";
			КонецЕсли;
		Иначе
			Атрибуты = Атрибуты + " id=""" + Вкладка.ИдВкладки + "_" + Узел.Код + """";
			Представление = Представление + "<" + Узел.Имя + Атрибуты + ">";
			Если Узел.Свойство("Значение") Тогда
				Представление = Представление + Узел.Значение;
			КонецЕсли;
			Представление = Представление + Дочерний + "</" + Узел.Имя + ">";
		КонецЕсли;

	КонецЕсли;

	УзелСостояниеЗначение(Вкладка, Узел, "Вид", Представление);

	Возврат Представление;

КонецФункции // ПоказатьУзел()


Функция ПоказатьГлавноеМеню(Вкладка)

	ПараметрыШаблона = Новый Структура;
	ПараметрМенюИнструменты = "";

	ПараметрыШаблона.Вставить("ПараметрКоманда", "savedata");
	ПараметрыШаблона.Вставить("ПараметрПодсказка", "Сохранить");
	ПараметрыШаблона.Вставить("ПараметрИдУзла", "");
	ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

	ПараметрыШаблона.Вставить("ПараметрКоманда", "designmode");
	ПараметрыШаблона.Вставить("ПараметрПодсказка", "Дизайнер");
	ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

	ПараметрыШаблона.Вставить("ПараметрКоманда", "edittab");
	ПараметрыШаблона.Вставить("ПараметрПодсказка", "Структура");
	ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

	ПараметрыШаблона = Новый Структура;
	ПараметрыШаблона.Вставить("ПараметрВидМеню", "mainmenu");
	ПараметрыШаблона.Вставить("ПараметрМенюИнструменты", ПараметрМенюИнструменты);
	КнопкаМеню = Шаблон.ПолучитьОбласть("ОбластьМеню", ПараметрыШаблона);

	Возврат КнопкаМеню;

КонецФункции


Функция ПоказатьМенюИнструменты(Вкладка, Узел, ЭтоАтрибут = Ложь)

	ПараметрыШаблона = Новый Структура;
	ПараметрыШаблона.Вставить("ПараметрИдУзла", "" + Вкладка.ИдВкладки + "_" + Узел.Код);
	ПараметрыШаблона.Вставить("ПараметрНеактивно", "");
	ПараметрыШаблона.Вставить("ПараметрВидимость", "");

	ПараметрМенюИнструменты = "";

	Если Вкладка.Режим = "design" Тогда

		ПараметрыШаблона.Вставить("ПараметрВкладка", ИдВкладки);
		ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюРедактировать", ПараметрыШаблона);

		Если НЕ УзелСостояние(Вкладка, Узел, "Изменить") = Истина Тогда
			ПараметрыШаблона.Вставить("ПараметрКоманда", "struct");
			ПараметрыШаблона.Вставить("ПараметрПодсказка", "Структура");
		Иначе
			ПараметрыШаблона.Вставить("ПараметрКоманда", "view");
			ПараметрыШаблона.Вставить("ПараметрПодсказка", "Представление");
		КонецЕсли;
		ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

	Иначе

		ПараметрыШаблона.Вставить("ПараметрКоманда", "namedit");
		ПараметрыШаблона.Вставить("ПараметрПодсказка", "Изменить имя");
		ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

		ПараметрыШаблона.Вставить("ПараметрКоманда", "attradd");
		ПараметрыШаблона.Вставить("ПараметрПодсказка", "Новый атрибут");
		ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

		ПараметрыШаблона.Вставить("ПараметрКоманда", "childadd");
		ПараметрыШаблона.Вставить("ПараметрПодсказка", "Новый дочерний");
		ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

		ПараметрыШаблона.Вставить("ПараметрКоманда", "nextadd");
		ПараметрыШаблона.Вставить("ПараметрПодсказка", "Новый соседний");
		ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

	КонецЕсли;

	ПараметрыШаблона.Вставить("ПараметрКоманда", "nodecut");
	ПараметрыШаблона.Вставить("ПараметрПодсказка", "Вырезать узел");
	ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

	ПараметрыШаблона.Вставить("ПараметрКоманда", "nodecopy");
	ПараметрыШаблона.Вставить("ПараметрПодсказка", "Копировать узел");
	ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

	Если НЕ этоАтрибут = Истина Тогда
		ПараметрыШаблона.Вставить("ПараметрКоманда", "nodepasteattr");
		ПараметрыШаблона.Вставить("ПараметрПодсказка", "Вставить атрибут");
		ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

		ПараметрыШаблона.Вставить("ПараметрКоманда", "nodepastechild");
		ПараметрыШаблона.Вставить("ПараметрПодсказка", "Вставить дочерний");
		ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);
	КонецЕсли;

	ПараметрыШаблона.Вставить("ПараметрКоманда", "nodepastenext");
	ПараметрыШаблона.Вставить("ПараметрПодсказка", "Вставить соседний");
	ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

	Если НЕ этоАтрибут = Истина Тогда
		ПараметрыШаблона.Вставить("ПараметрКоманда", "attremove");
		ПараметрыШаблона.Вставить("ПараметрПодсказка", "Удалить все атрибуты");
		ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

		ПараметрыШаблона.Вставить("ПараметрКоманда", "childremove");
		ПараметрыШаблона.Вставить("ПараметрПодсказка", "Удалить все дочерние");
		ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);
	КонецЕсли;

	ПараметрыШаблона.Вставить("ПараметрКоманда", "noderemove");
	ПараметрыШаблона.Вставить("ПараметрПодсказка", "Удалить узел");
	ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

	ПараметрыШаблона = Новый Структура;
	ПараметрыШаблона.Вставить("ПараметрВидМеню", "designmenu");
	ПараметрыШаблона.Вставить("ПараметрМенюИнструменты", ПараметрМенюИнструменты);
	КнопкаИнструменты = Шаблон.ПолучитьОбласть("ОбластьМеню", ПараметрыШаблона);

	Возврат КнопкаИнструменты;

КонецФункции // ПоказатьМенюИнструменты()


Функция ПоказатьСтруктуруУзла(Вкладка, Узел, ЭтоАтрибут = Ложь, Атрибуты = "", Дочерний = "") Экспорт

	Представление = "" ;

	УзелОткрыт = УзелСостояние(Вкладка, Узел, "УзелОткрыт");
	Если УзелОткрыт = Неопределено Тогда
		УзелОткрыт = Ложь;
	КонецЕсли;

	УзелИмя = Узел.Имя;

	УзелЗначение = "";
	Если Узел.Свойство("Значение") Тогда
		УзелЗначение = Узел.Значение;
	КонецЕсли;

	РедактироватьЗначение = УзелСостояние(Вкладка, Узел, "РедактироватьЗначение");
	РедактироватьИмя = УзелСостояние(Вкладка, Узел, "РедактироватьИмя");

	Если этоАтрибут = Истина Тогда
		УзелИмя = СтрЗаменить(УзелИмя, "xml_lang", "xml:lang");
		УзелИмя = СтрЗаменить(УзелИмя, "_", "-");
	КонецЕсли;

	КнопкаУзел = "";

	Если НЕ УзелСвойство(Узел, "Дочерний") = Неопределено Тогда
		ПараметрыШаблона = Новый Структура;
		ПараметрыШаблона.Вставить("ПараметрИдУзла", "" + Вкладка.ИдВкладки + "_" + Узел.Код);
		ПараметрыШаблона.Вставить("ПараметрКоманда", ?(УзелОткрыт, "nodeclose", "nodeopen"));
		ПараметрыШаблона.Вставить("ПараметрНадписьНаКнопке", ?(УзелОткрыт, "⚪" , "⚫"));
		КнопкаУзел = Шаблон.ПолучитьОбласть("ОбластьКнопкаУзел", ПараметрыШаблона);
	КонецЕсли;

	КнопкиИнструменты = "";
	ПараметрМенюИнструменты = "";

	Если РедактироватьИмя = Истина Тогда

		ПараметрыШаблона = Новый Структура;
		ПараметрыШаблона.Вставить("ПараметрИдУзла", "" + Вкладка.ИдВкладки + "_" + Узел.Код);
		ПараметрыШаблона.Вставить("ПараметрКоманда", "submitname");
		ПараметрыШаблона.Вставить("ПараметрИмяЗначение", СтрЭкранироватьСкрипт(УзелИмя));
		ПараметрИмя = Шаблон.ПолучитьОбласть("ОбластьИзменитьИмяЗначение", ПараметрыШаблона);

	Иначе

		ПараметрыШаблона = Новый Структура;
		ПараметрыШаблона.Вставить("ПараметрИдУзла", "" + Вкладка.ИдВкладки + "_" + Узел.Код);
		ПараметрыШаблона.Вставить("ПараметрНеактивно", "");
		ПараметрыШаблона.Вставить("ПараметрКоманда", "designmenu");
		ПараметрыШаблона.Вставить("ПараметрНадписьНаКнопке", СтрЭкранироватьРазметку(УзелИмя));
		ПараметрИмя = Шаблон.ПолучитьОбласть("ОбластьКнопкаИмяЗначение", ПараметрыШаблона);

	КонецЕсли;

	Если РедактироватьЗначение = Истина Тогда

		ПараметрыШаблона = Новый Структура;
		ПараметрыШаблона.Вставить("ПараметрИдУзла", "" + Вкладка.ИдВкладки + "_" + Узел.Код);
		ПараметрыШаблона.Вставить("ПараметрКоманда", "submitvalue");
		ПараметрыШаблона.Вставить("ПараметрИмяЗначение", СтрЭкранироватьСкрипт(УзелЗначение));
		ПараметрЗначение = Шаблон.ПолучитьОбласть("ОбластьИзменитьИмяЗначение", ПараметрыШаблона);

	Иначе

		ПараметрыШаблона = Новый Структура;
		ПараметрыШаблона.Вставить("ПараметрИдУзла", "" + Вкладка.ИдВкладки + "_" + Узел.Код);
		ПараметрыШаблона.Вставить("ПараметрНеактивно", "");
		ПараметрыШаблона.Вставить("ПараметрКоманда", "valuedit");
		ПараметрыШаблона.Вставить("ПараметрНадписьНаКнопке", СтрЭкранироватьРазметку(УзелЗначение));
		ПараметрЗначение = Шаблон.ПолучитьОбласть("ОбластьКнопкаИмяЗначение", ПараметрыШаблона);

	КонецЕсли;

	ПараметрыШаблона = Новый Структура;
	ПараметрыШаблона.Вставить("ПараметрИдУзла", "" + Вкладка.ИдВкладки + "_" + Узел.Код);
	ПараметрыШаблона.Вставить("ПараметрИнструменты", КнопкиИнструменты);
	ПараметрыШаблона.Вставить("ПараметрИмя", ПараметрИмя);
	ПараметрыШаблона.Вставить("ПараметрЗначение", ПараметрЗначение);
	ПараметрИмяУзла = КнопкаУзел + Шаблон.ПолучитьОбласть("ОбластьИмяЗначение", ПараметрыШаблона);

	Если НЕ ЭтоАтрибут Тогда

		ПараметрЗаголовокУзла = ПараметрИмяУзла + Атрибуты;

		ПараметрДочернийУзел = Дочерний;

		ПараметрыШаблона = Новый Структура;
		ПараметрыШаблона.Вставить("ПараметрИдУзла", "" + Вкладка.ИдВкладки + "_" + Узел.Код);
		ПараметрыШаблона.Вставить("ПараметрЗаголовокУзла", ПараметрЗаголовокУзла);
		ПараметрыШаблона.Вставить("ПараметрДочернийУзел", ПараметрДочернийУзел);
		Представление = Шаблон.ПолучитьОбласть("ОбластьУзел", ПараметрыШаблона);

	Иначе

		Представление = ПараметрИмяУзла;

	КонецЕсли;

	УзелСостояниеЗначение(Вкладка, Узел, "Структура", Представление);

	Возврат Представление;

КонецФункции


Функция Интерпретировать(Вкладка, Узел) Экспорт

	Представление = ""; //"<div id=" + Вкладка.ИдВкладки + "_" + Узел.Код + ">";
	Попытка
		УзелОкружение = Неопределено;
		СтаршийУзел = Вкладка.Данные.Старший(Узел);
		Пока УзелОкружение = Неопределено И НЕ СтаршийУзел = Неопределено Цикл
			УзелОкружение = УзелСвойство(СтаршийУзел, "Окружение");
			СтаршийУзел = Вкладка.Данные.Старший(СтаршийУзел);
		КонецЦикла;
		Если УзелОкружение = Неопределено Тогда
			УзелОкружение = Вкладка.Данные.Окружение;
		КонецЕсли;
		Значение = Вкладка.Данные.Интерпретировать(УзелОкружение, Узел);
		Если ТипЗнч(Значение) = Тип("Структура") Тогда
			Значение = ОтобразитьDOM(Вкладка, Значение.Код, Истина, "Дочерний", Истина);
		КонецЕсли;
		Представление = Представление + Значение;
	Исключение
		Представление = Представление + ОписаниеОшибки();
	КонецПопытки;
	//Представление = Представление + "</div>";

	УзелСостояниеЗначение(Вкладка, Узел, "Вид", Представление);
	Возврат Представление;

КонецФункции


Функция ОтобразитьDOM(Вкладка, КодУзла, Знач ОбновитьУзел = Ложь, Знач ТипУзла = "", Знач НачальныйУзел = Ложь)

	Данные = Вкладка.Данные;

	Узел = Данные.ПолучитьУзел(КодУзла);
	Если Узел = Неопределено Тогда
		Возврат "Узел " + КодУзла + " не найден!";
	КонецЕсли;

	Если НЕ ОбновитьУзел Тогда
		Если НЕ УзелСостояние(Вкладка, Узел, "ОбновитьУзел") = Ложь Тогда
			ОбновитьУзел = Истина;
			НачальныйУзел = Истина;
		КонецЕсли;
	КонецЕсли;

	Представление = "";

	УзелИзменить = Ложь;
	Если Вкладка.Режим = "design" Тогда
		УзелИзменить = (УзелСостояние(Вкладка, Узел, "Изменить") = Истина);
	КонецЕсли;

	Если ОбновитьУзел Тогда

		УзелЛисп = (УзлыЛисп.Получить(Узел.Имя) = "");

		УзелСостояниеЗначение(Вкладка, Узел, "ОбновитьУзел", Ложь);

		Если Вкладка.Режим = "struct" ИЛИ УзелИзменить Тогда
			Представление = "" + УзелСостояние(Вкладка, Узел, "Структура");
		Иначе
			Представление = "" + УзелСостояние(Вкладка, Узел, "Вид");
		КонецЕсли;

		Если Представление = "" Тогда
			Атрибуты = "";
			УзелАтрибут = УзелСвойство(Узел, "Атрибут");
			Если НЕ УзелАтрибут = Неопределено Тогда
				Атрибуты = ОтобразитьDOM(Вкладка, УзелАтрибут, ОбновитьУзел, "Атрибут");
			КонецЕсли;

			Дочерний = "";
			Если НЕ (Вкладка.Режим = "struct" ИЛИ УзелИзменить) ИЛИ УзелСостояние(Вкладка, Узел, "УзелОткрыт") = Истина  Тогда
				УзелДочерний = УзелСвойство(Узел, "Дочерний");
				Если НЕ УзелДочерний = Неопределено И НЕ (УзелЛисп И НЕ Вкладка.Режим = "struct") Тогда
					Дочерний = ОтобразитьDOM(Вкладка, УзелДочерний, ОбновитьУзел, "Дочерний");
				КонецЕсли;
			КонецЕсли;

			Если Вкладка.Режим = "struct" ИЛИ УзелИзменить Тогда
				Представление = ПоказатьСтруктуруУзла(Вкладка, Узел, (ТипУзла = "Атрибут"), Атрибуты, Дочерний);
			Иначе
				Если НЕ Узел.Имя = "" Тогда
					Если УзелЛисп Тогда
						Представление = Интерпретировать(Вкладка, Узел);
					Иначе
						Представление = ПоказатьУзел(Вкладка, Узел, (ТипУзла = "Атрибут"), Атрибуты, Дочерний);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если НЕ НачальныйУзел Тогда
			УзелСоседний = УзелСвойство(Узел, "Соседний");
			Если НЕ УзелСоседний = Неопределено Тогда
				Соседний = ОтобразитьDOM(Вкладка, УзелСоседний, ОбновитьУзел, ТипУзла);
				Представление = Представление + Соседний;
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли УзелСостояние(Вкладка, Узел, "ОбновитьПодчиненный") = Истина Тогда

		УзелЛисп = (УзлыЛисп.Получить(Узел.Имя) = "");

		УзелАтрибут = УзелСвойство(Узел, "Атрибут");
		Если НЕ УзелАтрибут = Неопределено Тогда
			Представление = ОтобразитьDOM(Вкладка, УзелАтрибут, , "Атрибут");
		КонецЕсли;

		Если Представление = "" Тогда
			Если НЕ (Вкладка.Режим = "struct" ИЛИ УзелИзменить) ИЛИ УзелСостояние(Вкладка, Узел, "УзелОткрыт") = Истина Тогда
				УзелДочерний = УзелСвойство(Узел, "Дочерний");
				Если НЕ УзелДочерний = Неопределено И НЕ (УзелЛисп И НЕ Вкладка.Режим = "struct") Тогда
					Представление = ОтобразитьDOM(Вкладка, УзелДочерний, , "Дочерний");
				КонецЕсли;
			КонецЕсли;

			Если Представление = "" Тогда
				УзелСоседний = УзелСвойство(Узел, "Соседний");
				Если НЕ УзелСоседний = Неопределено Тогда
					Представление = ОтобразитьDOM(Вкладка, УзелСоседний, , ТипУзла);
				КонецЕсли;

				Если Представление = "" Тогда
					УзелСостояниеЗначение(Вкладка, Узел, "ОбновитьПодчиненный", Ложь);
				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Возврат Представление;

КонецФункции // ОтобразитьDOM()


Функция ОбработатьКоманду(структЗадача) Экспорт

	Запрос = структЗадача.Запрос;

	ДействиеИмя = УзелСвойство(Запрос, "cmd");

	Если НЕ ДействиеИмя = Неопределено Тогда

		Если 	ДействиеИмя 	= "nodeopen"	Тогда ДействиеИмя = "ОткрытьУзел"
		ИначеЕсли ДействиеИмя	= "nodeclose"	Тогда ДействиеИмя = "ЗакрытьУзел"
		ИначеЕсли ДействиеИмя	= "view"		Тогда ДействиеИмя = "УзелПросмотр"
		ИначеЕсли ДействиеИмя	= "nodereload"	Тогда ДействиеИмя = "ОбновитьУзел"
		ИначеЕсли ДействиеИмя	= "newtab"		Тогда ДействиеИмя = "НоваяВкладка"
		ИначеЕсли ДействиеИмя	= "tabselect"	Тогда ДействиеИмя = "ВыбратьВкладку"
		ИначеЕсли ДействиеИмя	= "tabclose"	Тогда ДействиеИмя = "ЗакрытьВкладку"
		ИначеЕсли ДействиеИмя	= "valuedit"	Тогда ДействиеИмя = "РедактироватьЗначение"
		ИначеЕсли ДействиеИмя	= "submitvalue"	Тогда ДействиеИмя = "НовоеЗначениеУзла"
		ИначеЕсли ДействиеИмя	= "submitname"	Тогда ДействиеИмя = "НовоеИмяУзла"
		ИначеЕсли ДействиеИмя	= "namedit"		Тогда ДействиеИмя = "РедактироватьИмя"
		ИначеЕсли ДействиеИмя	= "attradd"		Тогда ДействиеИмя = "НовыйАтрибут"
		ИначеЕсли ДействиеИмя	= "childadd"	Тогда ДействиеИмя = "НовыйДочерний"
		КонецЕсли;

		структЗадача.Действие = Новый Структура("Имя, Результат", ДействиеИмя);
		Возврат Истина;

	КонецЕсли;

	Возврат Ложь;

КонецФункции // ОбработатьКоманду()


Функция ЗапросВыполнитьЗадачу(структЗадача)
	Перем domupdate;

	Если структЗадача.Этап = "ВыполнитьЗадачу" Тогда

		Если структЗадача.Запрос.Свойство("domupdate", domupdate) Тогда
			Если Число(domupdate) > НомерОбновления Тогда
				структЗадача.Этап = "ЕстьРезультат";
			Иначе
				Если domupdate = "0" Тогда
					Если НЕ Вкладки.Количество() Тогда
						ТекущиеДанные = НоваяВкладка(Новый Структура);
					КонецЕсли;
					Скрипт = "";
					Для каждого элВкладка Из Вкладки Цикл
						Вкладка = элВкладка.Значение;
						Вкладка.ОбновитьУзел = Истина;
						Скрипт = Скрипт + "newtab('" + Вкладка.ИдВкладки + "','" + Вкладка.ТипВкладки + "');";
					КонецЦикла;
					структЗадача.Результат = структЗадача.Результат + "<div id='insert'><script>" + Скрипт + "</script></div>";
					ОбновитьПанель = Истина;
				КонецЕсли;
				структЗадача.Этап = "СформироватьОтвет";
			КонецЕсли;
		ИначеЕсли ОбработатьКоманду(структЗадача) Тогда
			структЗадача.Этап = "ВыполнитьДействия";
		Иначе
			структЗадача.Результат = НачальнаяСтраница();
			структЗадача.Этап = "ЕстьРезультат";
		КонецЕсли;

	КонецЕсли;

	Если структЗадача.Этап = "ВыполнитьДействия" Тогда
		Если ВыполнитьДействия(структЗадача) = Истина Тогда
		КонецЕсли;
		структЗадача.Этап = "УдалитьЗадачу";
	КонецЕсли;

	Если структЗадача.Этап = "СформироватьОтвет" Тогда

		структЗадача.Результат = структЗадача.Результат + ОбщийРезультат;
		ОбщийРезультат = "";

		Если ОбновитьПанель Тогда
			структЗадача.Результат = структЗадача.Результат + ПоказатьПанель();
		КонецЕсли;

		Режим = "";
		Прокрутка = "";
		ТипВкладки = "";
		РежимДанных = "";

		Для каждого элВкладка Из Вкладки Цикл
			Вкладка = элВкладка.Значение;
			Ответ = "" + ОтобразитьDOM(Вкладка, Вкладка.ИдУзла, Вкладка.ОбновитьУзел, , Истина);
			Если Вкладка.ТипВкладки = "win" Тогда
				Если Вкладка.ОбновитьУзел = Истина Тогда
					ПараметрыШаблона = Новый Структура;
					ПараметрыШаблона.Вставить("ПараметрЗаголовокОкна", Вкладка.Заголовок);
					ПараметрыШаблона.Вставить("ПараметрСодержимоеОкна", Ответ);
					ПараметрыШаблона.Вставить("ПараметрВкладка", Вкладка.ИдВкладки);
					Ответ = Шаблон.ПолучитьОбласть("ОбластьОкно", ПараметрыШаблона);
				КонецЕсли;
			КонецЕсли;
			Если Вкладка.ИдВкладки = ТекущаяВкладка Тогда
				Режим = Вкладка.Режим;
				ТипВкладки = Вкладка.ТипВкладки;
			КонецЕсли;
			Если Вкладка = ТекущиеДанные Тогда
				РежимДанных = Вкладка.Режим;
				Прокрутка = Вкладка.Прокрутка;
			КонецЕсли;
			структЗадача.Результат = структЗадача.Результат + Ответ;
			Вкладка.ОбновитьУзел = Ложь;
		КонецЦикла;

		Если ОбновитьПанель Тогда
			ПараметрыШаблона = Новый Структура;
			ПараметрыШаблона.Вставить("ПараметрРежим", Режим);
			ПараметрыШаблона.Вставить("ПараметрРежДанных", РежимДанных);
			ПараметрыШаблона.Вставить("ПараметрТекущееОкно", "" + УзелСвойство(ТекущееОкно, "ИдВкладки"));
			ПараметрыШаблона.Вставить("ПараметрТекущиеДанные", "" + УзелСвойство(ТекущиеДанные, "ИдВкладки"));
			ПараметрыШаблона.Вставить("ПараметрТипВкладки", ТипВкладки);
			ПараметрыШаблона.Вставить("ПараметрПрокрутка", Прокрутка);
			ПараметрыШаблона.Вставить("ПараметрИдВкладки", ТекущаяВкладка);
			структЗадача.Результат = структЗадача.Результат + Шаблон.ПолучитьОбласть("ОбластьСкрипт", ПараметрыШаблона);
			ОбновитьПанель = Ложь;
		КонецЕсли;

		Если НЕ структЗадача.Результат = "" Тогда
			структЗадача.Этап = "ЕстьРезультат";
		Иначе
			структЗадача.Этап = "ВыполнитьЗадачу";
		КонецЕсли;
	КонецЕсли;

	Если структЗадача.Этап = "ЕстьРезультат" Тогда
		Соединение = Неопределено;
		Если ПередатьСтроку(Соединение, "<!--" + структЗадача.Запрос.taskid + "-->" + структЗадача.Результат + "<!--end-->") Тогда
			Если НЕ Соединение = Неопределено Тогда
				Соединение.Закрыть();
				структЗадача.Этап = "УдалитьЗадачу";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецФункции // ЗапросВыполнитьЗадачу()


Функция УзелСвойство(Узел, Свойство) Экспорт
	УзелСвойство = Неопределено;
	Если НЕ Узел = Неопределено Тогда
		Узел.Свойство(Свойство, УзелСвойство);
	КонецЕсли;
	Возврат УзелСвойство;
КонецФункции // УзелСвойство(Узел)


Функция УзелСвойствоЗначение(Узел, СвойствоИмя, СвойствоЗначение) Экспорт
	Если НЕ Узел = Неопределено Тогда
		Узел.Вставить(СвойствоИмя, СвойствоЗначение);
	КонецЕсли;
	Возврат Неопределено;
КонецФункции // УзелСвойствоЗначение(Узел)


Функция УзелСостояние(Вкладка, Узел, СостояниеИмя) Экспорт
	УзелСостояние = Вкладка.Состояния.Получить(Узел.Код);
	Если НЕ УзелСостояние = Неопределено Тогда
		УзелСостояние.Свойство(СостояниеИмя, УзелСостояние);
	КонецЕсли;
	Возврат УзелСостояние;
КонецФункции // УзелСостояние(Узел)


Функция УзелСостояниеЗначение(Вкладка, Узел, СостояниеИмя, СостояниеЗначение, Событие = Истина) Экспорт
	УзелСостояние = Вкладка.Состояния.Получить(Узел.Код);
	Если УзелСостояние = Неопределено Тогда
		УзелСостояние = Новый Структура();
		Вкладка.Состояния.Вставить(Узел.Код, УзелСостояние);
	КонецЕсли;
	УзелСостояние.Вставить(СостояниеИмя, СостояниеЗначение);
	Если Событие Тогда
		Если СостояниеИмя = "ОбновитьУзел" И СостояниеЗначение = Истина Тогда
			Сообщить("" + Вкладка.ИдВкладки + "_" + Узел.Код + " " + СостояниеИмя + "=" + Лев(СостояниеЗначение,30));
			НовоеСобытие(Новый Структура("Имя, Вкладка, Узел", "ОбновитьУзелИстина", Вкладка, Узел));
		КонецЕсли;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции // УзелСостояниеЗначение(Узел)


Функция НовоеСобытие(СтруктураСобытия)
	ИдСобытия = ИдСобытия + 1;
	Событие = Новый Структура(СтруктураСобытия);
	События.Вставить(ИдСобытия, Событие);
	Возврат Событие;
КонецФункции // НовоеСобытие()


Функция ОбработатьСобытия()
	Для каждого элСобытие Из События Цикл
		Событие = элСобытие.Значение;
		Если Событие.Имя = "ОбновитьУзелИстина" Тогда
			Для каждого элВкладка Из Вкладки Цикл
				Вкладка = ЭлВкладка.Значение;
				Если НЕ Вкладка = Событие.Вкладка Тогда
					Если Вкладка.Данные = Событие.Вкладка.Данные Тогда
						Сообщить("" + Вкладка.ИдВкладки + "_" + Событие.Узел.Код);
						ОбновитьСостояние(Вкладка, Событие.Узел, "ОбновитьУзел", Истина, Ложь)
						//УзелСостояниеЗначение(Вкладка, Событие.Узел, "ОбновитьУзел", Истина, Ложь);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			События.Удалить(элСобытие.Ключ);
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецФункции // ОбработатьСобытия()


Функция ОбновитьСостояние(Вкладка, Узел, Состояние, Значение, Событие = Ложь, НачальныйУзел = Ложь)

	Если Узел = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	Данные = Вкладка.Данные;

	Результат = Истина;

	Если Состояние = "Изменить" Тогда
		ОбновитьСостояние(Вкладка, Данные.Атрибут(Узел), "Изменить", Значение);
		ОбновитьСостояние(Вкладка, Данные.Дочерний(Узел), "Изменить", Значение);
		Если НЕ НачальныйУзел Тогда
			ОбновитьСостояние(Вкладка, Данные.Соседний(Узел), "Изменить", Значение);
		КонецЕсли;

	ИначеЕсли Состояние = "НовоеЗначениеУзла" Тогда
		ОбновитьСостояние(Вкладка, Узел, "РедактироватьЗначение", Ложь, Истина);
		УзелСвойствоЗначение(Узел, "Значение", Значение);

	ИначеЕсли Состояние = "НовоеИмяУзла" Тогда
		ОбновитьСостояние(Вкладка, Узел, "РедактироватьИмя", Ложь, Истина);
		УзелСвойствоЗначение(Узел, "Имя", Значение);

	ИначеЕсли Состояние = "ОбновитьПодчиненный" ИЛИ Состояние = "ОбновитьУзел" Тогда
		ОбновитьСостояние(Вкладка, Данные.Старший(Узел), "ОбновитьПодчиненный", Истина, Событие);

	КонецЕсли;

	Если НЕ Результат = Ложь Тогда
		УзелСостояниеЗначение(Вкладка, Узел, Состояние, Значение, Событие);
		Если НЕ Состояние = "ОбновитьПодчиненный" Тогда
			Если НЕ Состояние = "ОбновитьУзел" Тогда
				ОбновитьСостояние(Вкладка, Узел, "ОбновитьУзел", Истина, Событие);
			КонецЕсли;
		КонецЕсли;
		УзелСостояниеЗначение(Вкладка, Узел, "Структура", "", Событие);
		УзелСостояниеЗначение(Вкладка, Узел, "Вид", "", Событие);
	КонецЕсли;

	Возврат Результат;

КонецФункции // ОбновитьСостояние()


Функция ВыполнитьДействия(структЗадача)
	Перем Вкладка;

	Действие = УзелСвойство(структЗадача, "Действие");
	Если НЕ Действие = Неопределено Тогда

		Запрос = структЗадача.Запрос;

		Если Действие.Имя = "savedata" Тогда
			стрСообщение = "Неизвестно";
			Если НЕ ТекущиеДанные = Неопределено Тогда
				Если "" + ТекущиеДанные.БазаДанных = "" Тогда
					ТекущиеДанные.Данные.СохранитьДанные(ОбъединитьПути(ТекущийКаталог(), "data", ".files", ТекущиеДанные.ИмяДанных));
					стрСообщение = "Данные сохранены " + ТекущиеДанные.ИмяДанных;
				Иначе
					datafile = "" + procid + ".s";
					ТекущиеДанные.Данные.СохранитьДанные(ОбъединитьПути(ТекущийКаталог(), "data", ТекущиеДанные.БазаДанных + ".files", datafile));
					Соединение = Неопределено;
					Если ПередатьСтроку(Соединение, "osdb	" + ТекущиеДанные.БазаДанных + "	data	" + ТекущиеДанные.ИмяДанных + "	datafile	" + datafile) Тогда
						Попытка
							ФайлИмя = Соединение.ПрочитатьСтроку();
							Соединение.Закрыть();
							стрСообщение = "Данные сохранены " + ФайлИмя;
						Исключение
							стрСообщение = ОписаниеОшибки();
						КонецПопытки;
					КонецЕсли;
				КонецЕсли
			КонецЕсли;
			ОбщийРезультат = ОбщийРезультат + Шаблон.ПолучитьОбласть("ОбластьУведомление",
				Новый Структура("ПараметрТекстУведомления, ПараметрЗаголовокУведомления, ПараметрТипУведомления, ПараметрКоманда",
					стрСообщение,
					"showdata",
					1,
					""
					));
			Возврат Истина;
		КонецЕсли;

		datatab = "" + УзелСвойство(Запрос, "datatab");
		Если НЕ datatab = "" И НЕ datatab = "undefined" Тогда
			datatab = Число(datatab);
			Вкладка = Вкладки.Получить(datatab);
			Если НЕ Вкладка = Неопределено Тогда
				Вкладка.Вставить("Прокрутка", УзелСвойство(Запрос, "scrolled"));
				Вкладка.Вставить("Режим", УзелСвойство(Запрос, "datamode"));
			КонецЕсли;
		КонецЕсли;

		Если Действие.Имя = "mainmenu" Тогда
			ОбщийРезультат = ОбщийРезультат + ПоказатьГлавноеМеню(Вкладка);
			Возврат Истина;
		КонецЕсли;

		Если Действие.Имя = "НоваяВкладка" Тогда
			ТекущиеДанные = НоваяВкладка(Запрос);
			ОбщийРезультат = ОбщийРезультат + "<div id='insert'><script>newtab('" + ТекущиеДанные.ИдВкладки + "','" + ТекущиеДанные.ТипВкладки + "');</script></div>";
			ОбновитьПанель = Истина;
			Возврат Истина;
		КонецЕсли;

		Если Действие.Имя = "designmode" Тогда
			Если ТекущиеДанные = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
			ТекущиеДанные.Режим = "design";
			ОбновитьПанель = Истина;
			Возврат Истина;
		КонецЕсли;

		Если Действие.Имя = "edittab" Тогда
			Если ТекущиеДанные = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
			НовыеТекущиеДанные = Новый Структура("ИдВкладки, ТипВкладки, Данные, Состояния, Заголовок, Режим, ИдУзла, БазаДанных, ИмяДанных, ОбновитьУзел, Прокрутка",
				ИдВкладки,
				"data",
				ТекущиеДанные.Данные,
				Новый Соответствие,
				ТекущиеДанные.ИмяДанных + " .struct",
				"struct",
				"1",
				ТекущиеДанные.БазаДанных,
				ТекущиеДанные.ИмяДанных,
				Истина,
				"0");
			ВкладкиСписок.Вставить(ВкладкиСписок.Индекс(ВкладкиСписок.НайтиПоЗначению(ТекущиеДанные)) + 1, НовыеТекущиеДанные);
			Вкладки.Вставить(ИдВкладки, НовыеТекущиеДанные);
			ТекущиеДанные = НовыеТекущиеДанные;
			ТекущаяВкладка = ИдВкладки;
			ИдВкладки = ИдВкладки + 1;
			ОбщийРезультат = ОбщийРезультат + "<div id='insert'><script>newtab('" + ТекущиеДанные.ИдВкладки + "','" + ТекущиеДанные.ТипВкладки + "');</script></div>";
			ОбновитьПанель = Истина;
			Возврат Истина;
		КонецЕсли;

		tab = "" + УзелСвойство(Запрос, "tab");
		Если НЕ tab = "" И НЕ tab = "undefined" Тогда
			tab = Число(tab);
			Вкладка = Вкладки.Получить(tab);
			Если Вкладка = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;

			Если Действие.Имя = "ЗакрытьВкладку" Тогда
				ОбщийРезультат = ОбщийРезультат + "<div id='" + tab + "_0'/>";
				Если Вкладка = ТекущиеДанные Тогда
					ТекущиеДанные = Неопределено;
				ИначеЕсли Вкладка = ТекущееОкно Тогда
					ТекущееОкно = Неопределено;
				КонецЕсли;
				Вкладки.Удалить(tab);
				удВкладка = Вкладка;

				Если tab = ТекущаяВкладка Тогда
					ТекущаяВкладка = Неопределено;
					Для каждого элВкладка Из ВкладкиСписок Цикл
						знВкладка = элВкладка.Значение;
						Если знВкладка = удВкладка Тогда
							tab = Неопределено;
							Продолжить;
						КонецЕсли;
						Если tab = Неопределено И НЕ ТекущаяВкладка = Неопределено Тогда
							Прервать;
						КонецЕсли;
						Если знВкладка.ТипВкладки = "data" Тогда
							Вкладка = знВкладка;
							ТекущаяВкладка = Вкладка.ИдВкладки;
							ТекущиеДанные = Вкладка;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;

				ВкладкиСписок.Удалить(ВкладкиСписок.НайтиПоЗначению(удВкладка));
				ОбновитьПанель = Истина;
				Возврат Истина;
			КонецЕсли;

			Если Действие.Имя = "ВыбратьВкладку" Тогда
				ТекущаяВкладка = tab;
				Если Вкладка.ТипВкладки = "data" Тогда
					ТекущиеДанные = Вкладка;
					ТекущееОкно = Неопределено;
				КонецЕсли;
				Если Вкладка.ТипВкладки = "win" Тогда
					ТекущееОкно = Вкладка;
				КонецЕсли;
				ОбновитьПанель = Истина;
				Возврат Истина;
			КонецЕсли;

		КонецЕсли;

		ИдУзла = УзелСвойство(структЗадача.Запрос, "nodeid");
		НайтиИдУзла = Найти(ИдУзла, "_");
		Если НайтиИдУзла Тогда
			НайтиИдВкладки = Число(Лев(ИдУзла, НайтиИдУзла - 1));
			Вкладка = Вкладки.Получить(НайтиИдВкладки);
			ИдУзла = Сред(ИдУзла, НайтиИдУзла + 1);
		Иначе
			//Возврат Ложь;
		КонецЕсли;

		Данные = Вкладка.Данные;
		Если Данные = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;

		Узел = Данные.ПолучитьУзел(ИдУзла);

		Если Действие.Имя = "exec" Тогда
			ОбщийРезультат = ОбщийРезультат + Интерпретировать(Вкладка, Узел);
			Возврат Истина;

		ИначеЕсли Действие.Имя = "designmenu" Тогда
			ОбщийРезультат = ОбщийРезультат + ПоказатьМенюИнструменты(Вкладка, Узел);
			Возврат Истина;

		ИначеЕсли Действие.Имя = "ОткрытьУзел" Тогда
			Возврат ОбновитьСостояние(Вкладка, Узел, "УзелОткрыт", Истина);

		ИначеЕсли Действие.Имя = "ЗакрытьУзел" Тогда
			Возврат ОбновитьСостояние(Вкладка, Узел, "УзелОткрыт", Ложь);

		ИначеЕсли Действие.Имя = "РедактироватьЗначение" Тогда
			Возврат ОбновитьСостояние(Вкладка, Узел, "РедактироватьЗначение", Истина);

		ИначеЕсли Действие.Имя = "НовоеЗначениеУзла" Тогда
			Если Запрос.Свойство("valuedit") Тогда
				Возврат ОбновитьСостояние(Вкладка, Узел, "НовоеЗначениеУзла", Запрос.valuedit);
			Иначе
				Возврат ОбновитьСостояние(Вкладка, Узел, "РедактироватьЗначение", Ложь);
			КонецЕсли;

		ИначеЕсли Действие.Имя = "РедактироватьИмя" Тогда
			Возврат ОбновитьСостояние(Вкладка, Узел, "РедактироватьИмя", Истина);

		ИначеЕсли Действие.Имя = "НовоеИмяУзла" Тогда
			Если Запрос.Свойство("valuedit") Тогда
				Возврат ОбновитьСостояние(Вкладка, Узел, "НовоеИмяУзла", Запрос.valuedit);
			Иначе
				Возврат ОбновитьСостояние(Вкладка, Узел, "РедактироватьИмя", Ложь);
			КонецЕсли;

		ИначеЕсли Действие.Имя = "НовыйАтрибут" Тогда
			НовыйУзел = Данные.НовыйАтрибут(Узел, Новый Структура("Имя, Значение, Старший", "", "", Узел.Код));
			ОбновитьСостояние(Вкладка, НовыйУзел, "РедактироватьИмя", Истина);
			//ОбновитьСостояние(Вкладка, НовыйУзел, "РедактироватьЗначение", Истина);
			Возврат ОбновитьСостояние(Вкладка, Узел, "ОбновитьУзел", Истина, Истина);

		ИначеЕсли Действие.Имя = "НовыйДочерний" Тогда
			НовыйУзел = Данные.НовыйДочерний(Узел, Новый Структура("Имя, Значение, Старший", "", "", Узел.Код));
			ОбновитьСостояние(Вкладка, НовыйУзел, "РедактироватьИмя", Истина);
			//ОбновитьСостояние(Вкладка, НовыйУзел, "РедактироватьЗначение", Истина);
			ОбновитьСостояние(Вкладка, Узел, "УзелОткрыт", Истина);
			Возврат Истина;

		ИначеЕсли Действие.Имя = "nextadd" Тогда
			НовыйУзел = Данные.НовыйСоседний(Узел, Новый Структура("Имя, Значение, Старший", "", "", Узел.Код));
			ОбновитьСостояние(Вкладка, НовыйУзел, "РедактироватьИмя", Истина);
			//ОбновитьСостояние(Вкладка, НовыйУзел, "РедактироватьЗначение", Истина);
			ОбновитьСостояние(Вкладка, Данные.Родитель(НовыйУзел), "ОбновитьУзел", Истина, Истина);
			Возврат Истина;

		ИначеЕсли Действие.Имя = "noderemove" Тогда
			ДанныеРодительУзел = Данные.Родитель(Узел);
			Данные.УдалитьУзел(Узел);
			ОбновитьСостояние(Вкладка, ДанныеРодительУзел, "ОбновитьУзел", Истина, Истина);
			Возврат Истина;

		ИначеЕсли Действие.Имя = "nodecopy" Тогда
			Если НЕ Буфер = Неопределено Тогда
				ОсвободитьОбъект(Буфер);
			КонецЕсли;
			Буфер = Новый Соответствие;
			БуферУзел = Узел.Код;
			Данные.КопироватьУзел(Узел, Буфер);
			Возврат Истина;

		ИначеЕсли Действие.Имя = "nodecut" Тогда
			Если НЕ Буфер = Неопределено Тогда
				ОсвободитьОбъект(Буфер);
			КонецЕсли;
			Буфер = Новый Соответствие;
			БуферУзел = Узел.Код;
			Данные.КопироватьУзел(Узел, Буфер);
			ДанныеРодительУзел = Данные.Родитель(Узел);
			Данные.УдалитьУзел(Узел, Ложь);
			ОбновитьСостояние(Вкладка, ДанныеРодительУзел, "ОбновитьУзел", Истина, Истина);
			Возврат Истина;

		ИначеЕсли Действие.Имя = "nodepasteattr" Тогда
			Если НЕ Буфер = Неопределено Тогда
				НовыйУзел = Данные.ВставитьУзел(Буфер, БуферУзел, Истина);
				НовыйУзел.Вставить("Старший", Узел.Код);
				НовыйУзел.Вставить("Родитель", Узел.Код);
				НовыйУзел.Вставить("Атрибут", Неопределено);
				НовыйУзел.Вставить("Дочерний", Неопределено);
				УзелАтрибут = Данные.Атрибут(Узел);
				Узел.Вставить("Атрибут", НовыйУзел.Код);
				Если НЕ УзелАтрибут = Неопределено Тогда
					НовыйУзел.Вставить("Соседний", УзелАтрибут.Код);
					УзелАтрибут.Вставить("Старший", НовыйУзел.Код);
				КонецЕсли;
			КонецЕсли;
			Возврат ОбновитьСостояние(Вкладка, Узел, "ОбновитьУзел", Истина, Истина);

		ИначеЕсли Действие.Имя = "nodepastechild" Тогда
			Если НЕ Буфер = Неопределено Тогда
				НовыйУзел = Данные.ВставитьУзел(Буфер, БуферУзел);
				НовыйУзел.Вставить("Старший", Узел.Код);
				НовыйУзел.Вставить("Родитель", Узел.Код);
				УзелДочерний = Данные.Дочерний(Узел);
				Узел.Вставить("Дочерний", НовыйУзел.Код);
				Если НЕ УзелДочерний = Неопределено Тогда
					НовыйУзел.Вставить("Соседний", УзелДочерний.Код);
					УзелДочерний.Вставить("Старший", НовыйУзел.Код);
				КонецЕсли;
			КонецЕсли;
			Возврат ОбновитьСостояние(Вкладка, Узел, "УзелОткрыт", Истина, Истина);

		ИначеЕсли Действие.Имя = "nodepastenext" Тогда
			Если НЕ Буфер = Неопределено Тогда
				НовыйУзел = Данные.ВставитьУзел(Буфер, БуферУзел);
				НовыйУзел.Вставить("Старший", Узел.Код);
				НовыйУзел.Вставить("Родитель", УзелСвойство(Узел, "Родитель"));
				УзелСоседний = Данные.Соседний(Узел);
				Узел.Вставить("Соседний", НовыйУзел.Код);
				Если НЕ УзелСоседний = Неопределено Тогда
					НовыйУзел.Вставить("Соседний", УзелСоседний.Код);
					УзелСоседний.Вставить("Старший", НовыйУзел.Код);
				КонецЕсли;
			КонецЕсли;
			Возврат ОбновитьСостояние(Вкладка, Данные.Родитель(НовыйУзел), "ОбновитьУзел", Истина, Истина);

		ИначеЕсли Действие.Имя = "attremove" Тогда
			Если НЕ УзелСвойство(Узел, "Атрибут") = Неопределено Тогда
				Данные.УдалитьУзел(Данные.Атрибут(Узел), Ложь);
				//Узел.Удалить("Атрибут");
				Узел.Атрибут = Неопределено;
			КонецЕсли;
			Возврат ОбновитьСостояние(Вкладка, Узел, "ОбновитьУзел", Истина, Истина);

		ИначеЕсли Действие.Имя = "childremove" Тогда
			Если НЕ УзелСвойство(Узел, "Дочерний") = Неопределено Тогда
				Данные.УдалитьУзел(Данные.Дочерний(Узел), Ложь);
				//Узел.Удалить("Дочерний");
				Узел.Дочерний = Неопределено;
			КонецЕсли;
			Возврат ОбновитьСостояние(Вкладка, Узел, "ОбновитьУзел", Истина, Истина);

		ИначеЕсли Действие.Имя = "struct" Тогда
			Возврат ОбновитьСостояние(Вкладка, Узел, "Изменить", Истина, , Истина);

		ИначеЕсли Действие.Имя = "УзелПросмотр" Тогда
			Возврат ОбновитьСостояние(Вкладка, Узел, "Изменить", Ложь, , Истина);

		ИначеЕсли Действие.Имя = "editwin" Тогда
			ОбновитьСостояние(Вкладка, Узел, "УзелОткрыт", Истина);
			ТекущееОкно = Новый Структура("ИдВкладки, ТипВкладки, Данные, Состояния, Заголовок, Режим, ИдУзла, БазаДанных, ИмяДанных, ОбновитьУзел, Прокрутка",
				ИдВкладки,
				"win",
				Данные,
				Новый Соответствие,
				Вкладка.ИмяДанных + " ." + Узел.Имя,
				"struct",
				Узел.Код,
				Вкладка.БазаДанных,
				Вкладка.ИмяДанных,
				Истина,
				"0");
			ВкладкиСписок.Вставить(ВкладкиСписок.Индекс(ВкладкиСписок.НайтиПоЗначению(ТекущиеДанные)) + 1, ТекущееОкно);
			Вкладки.Вставить(ИдВкладки, ТекущееОкно);
			ТекущаяВкладка = ИдВкладки;
			ИдВкладки = ИдВкладки + 1;
			ОбновитьПанель = Истина;
			Возврат Истина;

		КонецЕсли;

	КонецЕсли;

	Возврат Ложь;
КонецФункции // ВыполнитьДействия()


Функция ПередатьСтроку(Соединение, СтрокаДанные)
	Попытка
		Соединение = Новый TCPСоединение(Хост, Порт);
		Соединение.ТаймаутОтправки = 50;
		Соединение.ОтправитьСтроку(СтрокаДанные);
		КоличествоПопыток = 100;
		Возврат Истина;
	Исключение
		Соединение = Неопределено;
		КоличествоПопыток = КоличествоПопыток - 1;
		Если КоличествоПопыток = 0 Тогда
			Сообщить("Хост недоступен");
		КонецЕсли;
		Возврат Ложь;
	КонецПопытки;
КонецФункции // ПередатьСтроку()



Если АргументыКоманднойСтроки.Количество() Тогда

	procid = АргументыКоманднойСтроки[0];

	Шаблон = ЗагрузитьСценарий(ОбъединитьПути(ТекущийКаталог(), "template.os"));
	Шаблон.ЗагрузитьМакет(ОбъединитьПути(ТекущийКаталог(), "resource", "showdata.html"));

	ПодключитьСценарий(ОбъединитьПути(ТекущийКаталог(), "pagedata.os"), "pagedata");

	ВсеДанные = Новый Соответствие;

	ВкладкиСписок = Новый СписокЗначений;
	Вкладки = Новый Соответствие;
	ИдВкладки = 0;

	Буфер = Неопределено;

	УзлыЛисп = Новый Соответствие;
	УзлыЛисп.Вставить("Список", "");
	УзлыЛисп.Вставить("Пусть", "");
	УзлыЛисп.Вставить("Свойство", "");
	УзлыЛисп.Вставить("Значение", "");
	УзлыЛисп.Вставить("Объект", "");
	УзлыЛисп.Вставить("Узел", "");
	УзлыЛисп.Вставить("Функция", "");

	События = Новый Соответствие;
	ИдСобытия = 0;

	Хост = "127.0.0.1";
	Порт = 8888;
	Соединение = Неопределено;

	Задачи = Новый СписокЗначений;

	СтруктЗапрос = СтруктуруВСтроку(Новый Структура("procid", procid));
	КоличествоПопыток = 100;

	ОбщийРезультат = "";

	Попытка

		Пока Истина Цикл

			ПрерватьЦикл = Ложь;
			Пока Не ПрерватьЦикл Цикл
				ПрерватьЦикл = Истина;
				Для каждого элЗадача Из Задачи Цикл
					структЗадача = ЭлЗадача.Значение;
					Если структЗадача.Тип = "Запрос" Тогда
						Попытка
							ЗапросВыполнитьЗадачу(структЗадача);
						Исключение
							Сообщить(ОписаниеОшибки());
							структЗадача.Этап = "УдалитьЗадачу";
						КонецПопытки;
					КонецЕсли;
					Если структЗадача.Этап = "УдалитьЗадачу" Тогда
						Задачи.Удалить(элЗадача);
						ПрерватьЦикл = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;

			Если Соединение = Неопределено Тогда
				Если НЕ ПередатьСтроку(Соединение, СтруктЗапрос) Тогда
					Если НЕ КоличествоПопыток > 0 Тогда
						Прервать;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Если НЕ Соединение.Активно Тогда
					Соединение = Неопределено;
					Продолжить;
				КонецЕсли;
			КонецЕсли;

			Попытка
				ЗадачиКоличество = Задачи.Количество();
				Если ЗадачиКоличество Тогда
					Соединение.ТаймаутЧтения = 50;
				КонецЕсли;
				Запрос = Соединение.ПрочитатьСтроку();
			Исключение
				//Сообщить("Осталось задач: " + ЗадачиКоличество);
				ОбработатьСобытия();
				Продолжить;
			КонецПопытки;

			Попытка
				Запрос = СтрокуВСтруктуру(Запрос);
				domupdate = "" + УзелСвойство(Запрос, "domupdate");
				Если НЕ domupdate = "" Тогда
					НомерОбновления = Число(domupdate);
				КонецЕсли;
				структЗадача = Новый Структура("Тип, Этап, Запрос, Действие, Результат", "Запрос", "ВыполнитьЗадачу", Запрос, Неопределено, "");
			Исключение
				структЗадача = Новый Структура("Тип, Этап, Запрос, Результат", "Запрос", "ЕстьРезультат", Неопределено, "Неверный запрос");
			КонецПопытки;

			Задачи.Добавить(структЗадача);

			Соединение.Закрыть();
			Соединение = Неопределено;

		КонецЦикла;

	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;

КонецЕсли;
