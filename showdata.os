Перем procid;
Перем Шаблон;
Перем Буфер, БуферУзел;
Перем Хост, Порт;
Перем Вкладки, ВкладкиСписок, ИдВкладки;
Перем ОбновитьВкладки;
Перем ТекущаяВкладка, ТекущиеДанные, ТекущееОкно;
Перем ЗадачиКоличество;
Перем ОбщийРезультат;
Перем КоличествоПопыток;
Перем НомерОбновления;
Перем Команды;
Перем ВсеДанные;
Перем ИмяДанных;
Перем Журнал, ДанныеЖурнала;


Функция РазмерПоля(Знач Стр)
	Размер = Цел(СтрДлина(стр)/3);
	Если Размер < 3 Тогда
		Размер = 3;
	ИначеЕсли Размер > 12 Тогда
		Размер = 12;
	КонецЕсли;
	Возврат Строка(Размер);
КонецФункции


Функция СтрЭкранироватьРазметку(Знач Стр, огрДлины = 0)
	Стр = СтрЗаменить(Стр, "&", "&amp;");
	Стр = СтрЗаменить(Стр, """", "&quot;");
	Стр = СтрЗаменить(Стр, "'", "&#39;");
	Стр = СтрЗаменить(Стр, "<", "&lt;");
	Стр = СтрЗаменить(Стр, ">", "&gt;");
	Стр = СтрЗаменить(Стр, Символы.ПС, "<br/>");
	Если огрДлины > 0 Тогда
		длСтр = СтрДлина(Стр);
		Если длСтр > огрДлины Тогда
			Стр = Лев(Стр, огрДлины) + " ...";
		КонецЕсли;
	КонецЕсли;
	Возврат Стр;
КонецФункции


Функция СтрокаЗапрос(ПараметрыЗапроса)
	Стр = "";
	Для каждого Параметр Из ПараметрыЗапроса Цикл
		Если Стр = "" Тогда
			Стр = "?";
		Иначе
			Стр = Стр + "&amp;";
		КонецЕсли;
		Стр = Стр + Параметр.Ключ + "=" + Параметр.Значение;
	КонецЦикла;
	Возврат "/showdata/" + procid + Стр;
КонецФункции


Функция ПоказатьВкладки()
	Текст = "";
	ПараметрыШаблона = Новый Структура;
	Для каждого элВкладка Из ВкладкиСписок Цикл
		Вкладка = элВкладка.Значение;
		ПараметрыШаблона.Вставить("ПараметрВкладка", Вкладка.ИдВкладки);
		ПараметрыШаблона.Вставить("ПараметрЗаголовок", Вкладка.Заголовок);
		ПараметрыШаблона.Вставить("ПараметрАктивный", ?(Вкладка.ИдВкладки = ТекущаяВкладка, "active", ""));
		ПараметрыШаблона.Вставить("ПараметрРежим", Вкладка.Режим);
		ПараметрыШаблона.Вставить("ПараметрТипВкладки", Вкладка.ТипВкладки);
		ПараметрыШаблона.Вставить("ПараметрИдВкладки", Вкладка.ИдВкладки);
		ПараметрыШаблона.Вставить("ПараметрПрокрутка", Вкладка.Прокрутка);
		Текст = Текст + Шаблон.ПолучитьОбласть("ОбластьВкладка", ПараметрыШаблона);
	КонецЦикла;
	// ПараметрыШаблона.Вставить("ПараметрВкладка", ИдВкладки);
	// Текст = Текст + Шаблон.ПолучитьОбласть("ОбластьНоваяВкладка", ПараметрыШаблона);
	ПараметрыШаблона = Новый Структура;
	ПараметрыШаблона.Вставить("ПараметрВкладки", Текст);
	ПараметрыШаблона.Вставить("ПараметрТекущаяВкладка", ТекущаяВкладка);
	ПараметрыШаблона.Вставить("ПараметрЗаголовокСтраницы", "" + УзелСвойство(ТекущиеДанные, "Заголовок") + " - OneScriptDB");
	ПараметрыШаблона.Вставить("ПараметрРежим", УзелСвойство(Вкладки.Получить(ТекущаяВкладка), "Режим"));
	Текст = Шаблон.ПолучитьОбласть("ОбластьВкладки", ПараметрыШаблона);
	Если ПараметрыШаблона.ПараметрРежим = "design" Тогда
		Текст = Текст + Шаблон.ПолучитьОбласть("ОбластьРежимРедактор");
	ИначеЕсли ПараметрыШаблона.ПараметрРежим = "view" Тогда
		Текст = Текст + Шаблон.ПолучитьОбласть("ОбластьРежимПросмотр");
	Иначе
		Текст = Текст + Шаблон.ПолучитьОбласть("ОбластьРежимСтруктура");
	КонецЕсли;
	Возврат Текст;
КонецФункции // ПоказатьВкладки()


Функция НоваяСтруктураВкладка(Данные, ТипВкладки, Заголовок, Режим, УзелКод, БазаДанных, ИмяДанных)

	НоваяВкладка = Новый Структура("ИдВкладки, ТипВкладки, Данные, Состояния, Заголовок, Режим, ИдУзла, БазаДанных, ИмяДанных, ОбновитьУзел, Прокрутка",
		ИдВкладки, ТипВкладки, Данные, Новый Соответствие, Заголовок, Режим, УзелКод, БазаДанных, ИмяДанных, Истина, "0");
	Если НЕ ТекущаяВкладка = Неопределено Тогда
		ВкладкиСписок.Вставить(ВкладкиСписок.Индекс(ВкладкиСписок.НайтиПоЗначению(Вкладки.Получить(ТекущаяВкладка))) + 1, НоваяВкладка);
	Иначе
		ВкладкиСписок.Добавить(НоваяВкладка);
	КонецЕсли;
	Вкладки.Вставить(ИдВкладки, НоваяВкладка);
	ТекущаяВкладка = ИдВкладки;
	ИдВкладки = ИдВкладки + 1;
	ОбщийРезультат = ОбщийРезультат + "<div id='insert'><script>newtab('" + НоваяВкладка.ИдВкладки + "','" + НоваяВкладка.ТипВкладки + "');</script></div>";
	ОбновитьВкладки = Истина;

	Возврат НоваяВкладка;

КонецФункции // НоваяСтруктураВкладка()


Функция НоваяВкладка(Параметры)
	БазаДанных = "" + УзелСвойство(Параметры, "osdb");
	ИмяДанных = "" + УзелСвойство(Параметры, "data");
	ПозицияДанных = "" + УзелСвойство(Параметры, "dataposition");
	Данные = ВсеДанные.Получить(БазаДанных + "/" + ИмяДанных);
	Если Данные = Неопределено Тогда
		Если НЕ "" + БазаДанных = "" Тогда
			Соединение = Неопределено;
			ПередатьСтроку(Соединение, "osdb	" + БазаДанных + "	dataposition	" + ПозицияДанных);
			Попытка
				ИмяДанных = Соединение.ПрочитатьСтроку();
				Соединение.Закрыть();
			Исключение
				Сообщить(ОписаниеОшибки());
				Возврат Неопределено;
			КонецПопытки;
		КонецЕсли;
		Данные = Новый pagedata(ЭтотОбъект, ОбъединитьПути(ТекущийКаталог(), "data", БазаДанных + ".files", ИмяДанных));
		ВсеДанные.Вставить(БазаДанных + "/" + ИмяДанных, Данные);
	КонецЕсли;
	Данные.Обновить = Истина;
	Возврат НоваяСтруктураВкладка(Данные, "data", ИмяДанных, "view", "1", БазаДанных, ИмяДанных);

КонецФункции


Функция НачальнаяСтраница()
	Текст = Шаблон.ПолучитьОбласть("ОбластьШапка", Новый Структура("ПараметрИдПроцесса", procid));
	Текст = Текст + Шаблон.ПолучитьОбласть("ОбластьПодвал");
	Возврат Текст;
КонецФункции


Функция СтрокуВСтруктуру(Знач Стр)
	Стр = СтрРазделить(Стр, Символы.Таб);
	Ключ = Неопределено;
	Рез = Неопределено;
	Для Каждого знСтр Из Стр Цикл
		Если Ключ = Неопределено Тогда
			Ключ = знСтр;
		Иначе
			Если Рез = Неопределено Тогда
				Рез = Новый Структура;
			КонецЕсли;
			Рез.Вставить(Ключ, знСтр);
			Ключ = Неопределено;
		КонецЕсли;
	КонецЦикла;
	Возврат Рез;
КонецФункции


Функция СтруктуруВСтроку(Структ)
	Результат = "";
	Для каждого Элемент Из Структ Цикл
		Результат = Результат + ?(Результат = "", "", Символы.Таб) + Элемент.Ключ + Символы.Таб + Элемент.Значение;
	КонецЦикла;
	Возврат Результат;
КонецФункции


Функция ПоказатьМенюИнструменты(Вкладка, Узел, ЭтоАтрибут = Ложь)

	ПараметрыШаблона = Новый Структура;
	ПараметрыШаблона.Вставить("ПараметрИдУзла", "" + Вкладка.ИдВкладки + "_" + Узел.Код);
	ПараметрыШаблона.Вставить("ПараметрЭтоАтрибут", Число(ЭтоАтрибут));
	ПараметрыШаблона.Вставить("ПараметрНеактивно", "");
	ПараметрыШаблона.Вставить("ПараметрВидимость", "");

	ПараметрМенюИнструменты = "";

	Если Вкладка.Режим = "design" Тогда

		ПараметрыШаблона.Вставить("ПараметрВкладка", ИдВкладки);
		ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюРедактировать", ПараметрыШаблона);

		// Если НЕ УзелСостояние(Вкладка, Узел, "Изменить") = Истина Тогда
		// 	ПараметрыШаблона.Вставить("ПараметрКоманда", Команды["УзелСтруктура"]);
		// 	ПараметрыШаблона.Вставить("ПараметрПодсказка", "Структура");
		// Иначе
		// 	ПараметрыШаблона.Вставить("ПараметрКоманда", Команды["УзелПросмотр"]);
		// 	ПараметрыШаблона.Вставить("ПараметрПодсказка", "Представление");
		// КонецЕсли;
		// ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

	Иначе

		ПараметрыШаблона.Вставить("ПараметрКоманда", Команды["РедактироватьУзел"]);
		ПараметрыШаблона.Вставить("ПараметрПодсказка", "Редактировать узел");
		ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

		ПараметрыШаблона.Вставить("ПараметрКоманда", Команды["ЗначениеУзла"]);
		ПараметрыШаблона.Вставить("ПараметрПодсказка", "Значение узла");
		ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

		ПараметрыШаблона.Вставить("ПараметрКоманда", Команды["Окружение"]);
		ПараметрыШаблона.Вставить("ПараметрПодсказка", "Окружение");
		ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

		ПараметрыШаблона.Вставить("ПараметрКоманда", Команды["НовыйАтрибут"]);
		ПараметрыШаблона.Вставить("ПараметрПодсказка", "Новый атрибут");
		ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

		ПараметрыШаблона.Вставить("ПараметрКоманда", Команды["НовыйДочерний"]);
		ПараметрыШаблона.Вставить("ПараметрПодсказка", "Новый дочерний");
		ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

		ПараметрыШаблона.Вставить("ПараметрКоманда", Команды["НовыйСоседний"]);
		ПараметрыШаблона.Вставить("ПараметрПодсказка", "Новый соседний");
		ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

		ПараметрыШаблона.Вставить("ПараметрКоманда", Команды["НовыйРодитель"]);
		ПараметрыШаблона.Вставить("ПараметрПодсказка", "Новый родитель");
		ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

	КонецЕсли;

	ПараметрыШаблона.Вставить("ПараметрКоманда", Команды["ВырезатьУзел"]);
	ПараметрыШаблона.Вставить("ПараметрПодсказка", "Вырезать узел");
	ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

	ПараметрыШаблона.Вставить("ПараметрКоманда", Команды["КопироватьУзел"]);
	ПараметрыШаблона.Вставить("ПараметрПодсказка", "Копировать узел");
	ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

	Если НЕ этоАтрибут = Истина Тогда
		ПараметрыШаблона.Вставить("ПараметрКоманда", Команды["ВставитьАтрибут"]);
		ПараметрыШаблона.Вставить("ПараметрПодсказка", "Вставить атрибут");
		ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

		ПараметрыШаблона.Вставить("ПараметрКоманда", Команды["ВставитьДочерний"]);
		ПараметрыШаблона.Вставить("ПараметрПодсказка", "Вставить дочерний");
		ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);
	КонецЕсли;

	ПараметрыШаблона.Вставить("ПараметрКоманда", Команды["ВставитьСоседний"]);
	ПараметрыШаблона.Вставить("ПараметрПодсказка", "Вставить соседний");
	ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

	Если НЕ этоАтрибут = Истина Тогда
		ПараметрыШаблона.Вставить("ПараметрКоманда", Команды["УдалитьАтрибуты"]);
		ПараметрыШаблона.Вставить("ПараметрПодсказка", "Удалить все атрибуты");
		ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

		ПараметрыШаблона.Вставить("ПараметрКоманда", Команды["УдалитьРодителя"]);
		ПараметрыШаблона.Вставить("ПараметрПодсказка", "Удалить родителя");
		ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);
	КонецЕсли;

	ПараметрыШаблона.Вставить("ПараметрКоманда", Команды["УдалитьУзел"]);
	ПараметрыШаблона.Вставить("ПараметрПодсказка", "Удалить узел");
	ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

	ПараметрыШаблона = Новый Структура;
	ПараметрыШаблона.Вставить("ПараметрВидМеню", Команды["МенюРедактора"]);
	ПараметрыШаблона.Вставить("ПараметрМенюИнструменты", ПараметрМенюИнструменты);
	КнопкаИнструменты = Шаблон.ПолучитьОбласть("ОбластьМеню", ПараметрыШаблона);

	Возврат КнопкаИнструменты;

КонецФункции // ПоказатьМенюИнструменты()


Функция ПоказатьСтруктуруУзла(Вкладка, Узел, ЭтоАтрибут = Ложь, Атрибуты = "", Дочерний = "") Экспорт

	Представление = "" ;

	УзелОткрыт = УзелСостояние(Вкладка, Узел, "УзелОткрыт");
	Если УзелОткрыт = Неопределено Тогда
		УзелОткрыт = Ложь;
	КонецЕсли;

	УзелИмя = Узел.Имя;

	УзелЗначение = "";
	Если Узел.Свойство("Значение") Тогда
		УзелЗначение = Узел.Значение;
	КонецЕсли;

	РедактироватьЗначение = УзелСостояние(Вкладка, Узел, "РедактироватьЗначение");
	РедактироватьИмя = УзелСостояние(Вкладка, Узел, "РедактироватьИмя");

	Если этоАтрибут = Истина Тогда
		УзелИмя = СтрЗаменить(УзелИмя, "xml_lang", "xml:lang");
		УзелИмя = СтрЗаменить(УзелИмя, "_", "-");
	КонецЕсли;

	КнопкаУзел = "";

	Если НЕ этоАтрибут = Истина Тогда
		ПараметрыШаблона = Новый Структура;
		ПараметрыШаблона.Вставить("ПараметрИдУзла", "" + Вкладка.ИдВкладки + "_" + Узел.Код);
		ПараметрыШаблона.Вставить("ПараметрКоманда", ?(УзелОткрыт, Команды["ЗакрытьУзел"], Команды["ОткрытьУзел"]));
		ПараметрыШаблона.Вставить("ПараметрНадписьНаКнопке", ?(УзелОткрыт ИЛИ УзелСвойство(Узел, "Дочерний") = Неопределено, "⚪" , "⚫"));
		КнопкаУзел = Шаблон.ПолучитьОбласть("ОбластьКнопкаУзел", ПараметрыШаблона);
	КонецЕсли;

	Если РедактироватьИмя = Истина Тогда

		ПараметрыШаблона = Новый Структура;
		ПараметрыШаблона.Вставить("ПараметрИдУзла", "" + Вкладка.ИдВкладки + "_" + Узел.Код);
		ПараметрыШаблона.Вставить("ПараметрКоманда", Команды["НовоеИмяУзла"]);
		ПараметрыШаблона.Вставить("ПараметрИмяЗначение", КодироватьСтроку(УзелИмя, СпособКодированияСтроки.КодировкаURL));
		//ПараметрыШаблона.Вставить("ПараметрДлинаСтроки", РазмерПоля(УзелИмя));
		ПараметрыШаблона.Вставить("ПараметрЭтоАтрибут", Число(ЭтоАтрибут));
		ПараметрИмя = Шаблон.ПолучитьОбласть("ОбластьИзменитьИмяЗначение", ПараметрыШаблона);

	Иначе

		ПараметрыШаблона = Новый Структура;
		ПараметрыШаблона.Вставить("ПараметрИдУзла", Узел.Код);
		ПараметрыШаблона.Вставить("ПараметрИдВкладки", "" + Вкладка.ИдВкладки);
		ПараметрыШаблона.Вставить("ПараметрКоманда", Команды["МенюРедактора"]);
		ПараметрыШаблона.Вставить("ПараметрНадписьНаКнопке", СтрЭкранироватьРазметку(УзелИмя, 50));
		ПараметрыШаблона.Вставить("ПараметрЭтоАтрибут", Число(ЭтоАтрибут));
		ПараметрИмя = Шаблон.ПолучитьОбласть("ОбластьКнопкаИмяЗначение", ПараметрыШаблона);

	КонецЕсли;

	Если РедактироватьЗначение = Истина Тогда

		ПараметрыШаблона = Новый Структура;
		ПараметрыШаблона.Вставить("ПараметрИдУзла", "" + Вкладка.ИдВкладки + "_" + Узел.Код);
		ПараметрыШаблона.Вставить("ПараметрКоманда", Команды["НовоеЗначениеУзла"]);
		ПараметрыШаблона.Вставить("ПараметрИмяЗначение", КодироватьСтроку(УзелЗначение, СпособКодированияСтроки.КодировкаURL));
		//ПараметрыШаблона.Вставить("ПараметрДлинаСтроки", РазмерПоля(УзелЗначение));
		ПараметрыШаблона.Вставить("ПараметрЭтоАтрибут", Число(ЭтоАтрибут));
		ПараметрЗначение = Шаблон.ПолучитьОбласть("ОбластьИзменитьИмяЗначение", ПараметрыШаблона);

	Иначе

		ПараметрыШаблона = Новый Структура;
		ПараметрыШаблона.Вставить("ПараметрИдУзла", Узел.Код);
		ПараметрыШаблона.Вставить("ПараметрИдВкладки", "" + Вкладка.ИдВкладки);
		ПараметрыШаблона.Вставить("ПараметрКоманда", Команды["РедактироватьЗначение"]);
		ПараметрыШаблона.Вставить("ПараметрНадписьНаКнопке", СтрЭкранироватьРазметку(УзелЗначение, 100));
		ПараметрыШаблона.Вставить("ПараметрЭтоАтрибут", Число(ЭтоАтрибут));
		ПараметрЗначение = Шаблон.ПолучитьОбласть("ОбластьКнопкаИмяЗначение", ПараметрыШаблона);

	КонецЕсли;

	ПараметрыШаблона = Новый Структура;
	ПараметрыШаблона.Вставить("ПараметрИдУзла", "" + Вкладка.ИдВкладки + "_" + Узел.Код);
	ПараметрыШаблона.Вставить("ПараметрИмя", ПараметрИмя);
	ПараметрыШаблона.Вставить("ПараметрЗначение", ПараметрЗначение);
	ПараметрИмяУзла = КнопкаУзел + Шаблон.ПолучитьОбласть("ОбластьИмяЗначение", ПараметрыШаблона);

	Если НЕ ЭтоАтрибут Тогда

		ПараметрЗаголовокУзла = ПараметрИмяУзла + Атрибуты;

		ПараметрДочернийУзел = Дочерний;

		ПараметрыШаблона = Новый Структура;
		ПараметрыШаблона.Вставить("ПараметрИдУзла", "" + Вкладка.ИдВкладки + "_" + Узел.Код);
		ПараметрыШаблона.Вставить("ПараметрЗаголовокУзла", ПараметрЗаголовокУзла);
		ПараметрыШаблона.Вставить("ПараметрДочернийУзел", ПараметрДочернийУзел);
		Представление = Шаблон.ПолучитьОбласть("ОбластьУзел", ПараметрыШаблона);

	Иначе

		Представление = ПараметрИмяУзла;

	КонецЕсли;

	Если УзелСостояние(Вкладка, Узел, "РедактироватьУзел") = Истина Тогда
		ПараметрыШаблона = Новый Структура;
		ПараметрыШаблона.Вставить("ПараметрВкладка", "" + Вкладка.ИдВкладки);
		ПараметрыШаблона.Вставить("ПараметрИдУзла", "" + Вкладка.ИдВкладки + "_" + Узел.Код);
		ПараметрыШаблона.Вставить("ПараметрИмяУзла", СтрЭкранироватьРазметку(УзелИмя));
		ПараметрыШаблона.Вставить("ПараметрЗначениеУзла", КодироватьСтроку(УзелЗначение, СпособКодированияСтроки.КодировкаURL));
		ПараметрыШаблона.Вставить("ПараметрЭтоАтрибут", Число(ЭтоАтрибут));
		Представление = Представление + Шаблон.ПолучитьОбласть("ОбластьРедактироватьУзел", ПараметрыШаблона);
	КонецЕсли;

	Возврат Представление;

КонецФункции


Функция ОтобразитьDOM(Вкладка, КодУзла, Знач Обновить = Ложь, Знач ТипУзла = "", Знач НачальныйУзел = Ложь)

	Данные = Вкладка.Данные;

	Узел = Данные.ПолучитьУзел(КодУзла);
	Если Узел = Неопределено Тогда
		Возврат "Узел " + КодУзла + " не найден!";
	КонецЕсли;

	Представление = Неопределено;

	Если УзелСостояние(Вкладка, Узел, "ОбновитьУзел") = Истина Тогда
		Обновить = Истина;
	Иначе
		Представление = УзелСостояние(Вкладка, Узел, "Представление");
		Если НЕ Представление = Неопределено И НЕ Обновить Тогда
			Представление = "";
		КонецЕсли;
	КонецЕсли;

	Если Представление = Неопределено Тогда
		Если Обновить Тогда
			Атрибуты = "";
			УзелАтрибут = УзелСвойство(Узел, "Атрибут");
			Если НЕ УзелАтрибут = Неопределено Тогда
				Атрибуты = ОтобразитьDOM(Вкладка, УзелАтрибут, Обновить, "Атрибут");
			КонецЕсли;

			Дочерний = "";
			Если УзелСостояние(Вкладка, Узел, "УзелОткрыт") = Истина  Тогда
				УзелДочерний = УзелСвойство(Узел, "Дочерний");
				Если НЕ УзелДочерний = Неопределено Тогда
					Дочерний = ОтобразитьDOM(Вкладка, УзелДочерний, Обновить, "Дочерний");
				КонецЕсли;
			КонецЕсли;

			Представление = ПоказатьСтруктуруУзла(Вкладка, Узел, (ТипУзла = "Атрибут"), Атрибуты, Дочерний);
			УзелСостояниеЗначение(Вкладка, Узел, "Представление", Представление);
			УзелСостояниеЗначение(Вкладка, Узел, "ОбновитьУзел", Ложь);
		Иначе
			УзелДочерний = УзелСвойство(Узел, "Дочерний");
			Если НЕ УзелДочерний = Неопределено Тогда
				Представление = ОтобразитьDOM(Вкладка, УзелДочерний, Обновить, "Дочерний");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если НЕ НачальныйУзел Тогда
		УзелСоседний = УзелСвойство(Узел, "Соседний");
		Если НЕ УзелСоседний = Неопределено Тогда
			Соседний = ОтобразитьDOM(Вкладка, УзелСоседний, Обновить, ТипУзла);
			Представление = "" + Представление + Соседний;
		КонецЕсли;
	КонецЕсли;

	Возврат "" + Представление;

КонецФункции // ОтобразитьDOM()


Функция ОбработатьКоманду(структЗадача) Экспорт

	Запрос = структЗадача.Запрос;

	ДействиеИмя = УзелСвойство(Запрос, "cmd");

	Если НЕ ДействиеИмя = Неопределено Тогда

		структЗадача.Действие = Новый Структура("Имя, Результат", ДействиеИмя);
		Возврат Истина;

	КонецЕсли;

	Возврат Ложь;

КонецФункции // ОбработатьКоманду()


Функция ЗапросВыполнитьЗадачу(структЗадача)
	Перем domupdate;

	Если структЗадача.Этап = "ВыполнитьЗадачу" Тогда

		Если структЗадача.Запрос.Свойство("domupdate", domupdate) Тогда
			Если Число(domupdate) > НомерОбновления Тогда
				структЗадача.Этап = "ЕстьРезультат";
			Иначе
				Если domupdate = "0" Тогда
					Если НЕ Вкладки.Количество() Тогда
						ТекущиеДанные = НоваяВкладка(Новый Структура("data", ИмяДанных));
					КонецЕсли;
					Скрипт = "";
					Для каждого элВкладка Из Вкладки Цикл
						Вкладка = элВкладка.Значение;
						Вкладка.ОбновитьУзел = Истина;
						Вкладка.Данные.Обновить = Истина;
						Скрипт = Скрипт + "newtab('" + Вкладка.ИдВкладки + "','" + Вкладка.ТипВкладки + "');";
					КонецЦикла;
					структЗадача.Результат = структЗадача.Результат + "<div id='insert'><script>" + Скрипт + "</script></div>";
					ОбновитьВкладки = Истина;
				КонецЕсли;
				структЗадача.Этап = "СформироватьОтвет";
			КонецЕсли;
		ИначеЕсли ОбработатьКоманду(структЗадача) Тогда
			структЗадача.Этап = "ВыполнитьДействия";
		Иначе
			ИмяДанных = "" + УзелСвойство(структЗадача.Запрос, "data");
			Если ИмяДанных = "" Тогда
				ИмяДанных = "expldb";
			КонецЕсли;
			структЗадача.Результат = НачальнаяСтраница();
			структЗадача.Этап = "ЕстьРезультат";
		КонецЕсли;

	КонецЕсли;

	Если структЗадача.Этап = "ВыполнитьДействия" Тогда
		Если ВыполнитьДействия(структЗадача) = Истина Тогда
		КонецЕсли;
		структЗадача.Этап = "УдалитьЗадачу";
	КонецЕсли;

	Если структЗадача.Этап = "СформироватьОтвет" Тогда

		структЗадача.Результат = структЗадача.Результат + ОбщийРезультат;
		ОбщийРезультат = "";

		Для каждого ЭлДанные Из ВсеДанные Цикл
			текДанные = ЭлДанные.Значение;
			Попытка
				текДанные.ОбновитьПредставление();
			Исключение
				ЗаписатьСобытие(ЭлДанные.Ключ, ОписаниеОшибки(), 3);
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
			текДанные.Обновить = Ложь;
		КонецЦикла;

		Для каждого элВкладка Из Вкладки Цикл
			Вкладка = элВкладка.Значение;
			Если Вкладка.Режим = "view" ИЛИ Вкладка.Режим = "design" Тогда
				Ответ = "" + СтрЗаменить(Вкладка.Данные.Представление, "id=""_", "id=""" + Вкладка.ИдВкладки + "_");
			ИначеЕсли Вкладка.Режим = "struct" Тогда
				Ответ = "" + ОтобразитьDOM(Вкладка, Вкладка.ИдУзла, Вкладка.ОбновитьУзел, , Истина);
			ИначеЕсли Вкладка.ОбновитьУзел = Истина Тогда
				Ответ = Вкладка.Данные.Представление;
			КонецЕсли;
			Если Вкладка.ТипВкладки = "win" Тогда
				Если Вкладка.ОбновитьУзел = Истина Тогда
					ПараметрыШаблона = Новый Структура;
					ПараметрыШаблона.Вставить("ПараметрЗаголовокОкна", Вкладка.Заголовок);
					ПараметрыШаблона.Вставить("ПараметрСодержимоеОкна", Ответ);
					ПараметрыШаблона.Вставить("ПараметрВкладка", Вкладка.ИдВкладки);
					ПараметрыШаблона.Вставить("ПараметрИдУзла", Вкладка.ИдУзла);
					Ответ = Шаблон.ПолучитьОбласть("ОбластьПанель", ПараметрыШаблона);
				КонецЕсли;
			КонецЕсли;
			структЗадача.Результат = структЗадача.Результат + Ответ;
			Если Вкладка.ОбновитьУзел И (Вкладка = ТекущиеДанные ИЛИ Вкладка = ТекущееОкно) Тогда
				ПараметрыШаблона = Новый Структура;
				ПараметрыШаблона.Вставить("ПараметрТипВкладки", Вкладка.ТипВкладки);
				ПараметрыШаблона.Вставить("ПараметрПрокрутка", Вкладка.Прокрутка);
				ПараметрыШаблона.Вставить("ПараметрИдВкладки", Вкладка.ИдВкладки);
				ПараметрыШаблона.Вставить("ПараметрРежим", Вкладка.Режим);
				ПараметрыШаблона.Вставить("ПараметрТекущаяВкладка", ТекущаяВкладка);
				структЗадача.Результат = структЗадача.Результат + Шаблон.ПолучитьОбласть("ОбластьСкрипт", ПараметрыШаблона);
			КонецЕсли;
			Вкладка.ОбновитьУзел = Ложь;
		КонецЦикла;

		Если ОбновитьВкладки = Истина Тогда
			структЗадача.Результат = структЗадача.Результат + ПоказатьВкладки();
			ОбновитьВкладки = Ложь;
		КонецЕсли;

		Если НЕ структЗадача.Результат = "" Тогда
			структЗадача.Этап = "ЕстьРезультат";
		Иначе
			структЗадача.Этап = "ВыполнитьЗадачу";
		КонецЕсли;
	КонецЕсли;

	Если структЗадача.Этап = "ЕстьРезультат" Тогда
		Соединение = Неопределено;
		Если ПередатьСтроку(Соединение, "<!--" + структЗадача.Запрос.taskid + "-->" + структЗадача.Результат + "<!--end-->") Тогда
			Если НЕ Соединение = Неопределено Тогда
				Соединение.Закрыть();
				структЗадача.Этап = "УдалитьЗадачу";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецФункции // ЗапросВыполнитьЗадачу()


Функция УзелСвойство(Узел, Свойство) Экспорт
	УзелСвойство = Неопределено;
	Если НЕ Узел = Неопределено Тогда
		Узел.Свойство(Свойство, УзелСвойство);
	КонецЕсли;
	Возврат УзелСвойство;
КонецФункции // УзелСвойство(Узел)


Функция УзелСвойствоЗначение(Узел, СвойствоИмя, СвойствоЗначение) Экспорт
	Если НЕ Узел = Неопределено Тогда
		Узел.Вставить(СвойствоИмя, СвойствоЗначение);
	КонецЕсли;
	Возврат Неопределено;
КонецФункции // УзелСвойствоЗначение(Узел)


Функция УзелСостояние(Вкладка, Узел, СостояниеИмя) Экспорт
	УзелСостояние = Вкладка.Состояния.Получить(Узел.Код);
	Если НЕ УзелСостояние = Неопределено Тогда
		УзелСостояние.Свойство(СостояниеИмя, УзелСостояние);
	КонецЕсли;
	Возврат УзелСостояние;
КонецФункции // УзелСостояние(Узел)


Функция УзелСостояниеЗначение(Вкладка, Узел, СостояниеИмя, СостояниеЗначение, Событие = Ложь) Экспорт
	УзелСостояние = Вкладка.Состояния.Получить(Узел.Код);
	Если УзелСостояние = Неопределено Тогда
		УзелСостояние = Новый Структура();
		Вкладка.Состояния.Вставить(Узел.Код, УзелСостояние);
	КонецЕсли;
	УзелСостояние.Вставить(СостояниеИмя, СостояниеЗначение);
	//Сообщить("" + Вкладка.ИдВкладки + "_" + Узел.Код + " " + СостояниеИмя + "=" + (Лев(СостояниеЗначение,30)));
	Если Событие Тогда
		Если СостояниеИмя = "ОбновитьУзел" И СостояниеЗначение = Истина Тогда
			Вкладка.Данные.ОбновитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции // УзелСостояниеЗначение(Узел)


Функция ОбновитьСостояние(Вкладка, Узел, Состояние, Значение, Событие = Ложь, НачальныйУзел = Ложь)

	Если Узел = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	Данные = Вкладка.Данные;

	Результат = Истина;

	Если Состояние = "Изменить" Тогда
		// ОбновитьСостояние(Вкладка, Данные.Атрибут(Узел), "Изменить", Значение);
		// ОбновитьСостояние(Вкладка, Данные.Дочерний(Узел), "Изменить", Значение);
		// Если НЕ НачальныйУзел Тогда
		// 	ОбновитьСостояние(Вкладка, Данные.Соседний(Узел), "Изменить", Значение);
		// КонецЕсли;

	ИначеЕсли Состояние = "НовоеЗначениеУзла" Тогда
		ОбновитьСостояние(Вкладка, Узел, "РедактироватьЗначение", Ложь, Истина);
		УзелСвойствоЗначение(Узел, "Значение", Значение);

	ИначеЕсли Состояние = "НовоеИмяУзла" Тогда
		ОбновитьСостояние(Вкладка, Узел, "РедактироватьИмя", Ложь, Истина);
		ОбновитьСостояние(Вкладка, Узел, "РедактироватьЗначение", Истина, Истина);
		УзелСвойствоЗначение(Узел, "Имя", Значение);

	ИначеЕсли Состояние = "ОбновитьУзел" И Значение = Истина Тогда
		ОбновитьСостояние(Вкладка, Узел, "Представление", Неопределено, Ложь);

	ИначеЕсли Состояние = "Представление" И Значение = Неопределено Тогда
		ОбновитьСостояние(Вкладка, Данные.Родитель(Узел), "Представление", Значение, Событие);

	КонецЕсли;

	Если НЕ Результат = Ложь Тогда
		УзелСостояниеЗначение(Вкладка, Узел, Состояние, Значение, Событие);
		Если НЕ Состояние = "ОбновитьУзел" И НЕ Состояние = "Представление" Тогда
			ОбновитьСостояние(Вкладка, Узел, "ОбновитьУзел", Истина, Событие);
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ОбновитьСостояние()


Функция ВыполнитьДействия(структЗадача)
	Перем Вкладка;

	Действие = УзелСвойство(структЗадача, "Действие");
	Если НЕ Действие = Неопределено Тогда

		Запрос = структЗадача.Запрос;

		Если Действие.Имя = Команды["СохранитьДанные"] Тогда
			стрСообщение = "Неизвестно";
			Вкладка = Вкладки.Получить(ТекущаяВкладка);
			Если НЕ Вкладка = Неопределено Тогда
				Если "" + Вкладка.БазаДанных = "" Тогда
					Вкладка.Данные.СохранитьДанные(ОбъединитьПути(ТекущийКаталог(), "data", ".files", Вкладка.ИмяДанных));
					стрСообщение = "Данные сохранены " + Вкладка.ИмяДанных;
				Иначе
					datafile = "" + procid + ".s";
					Вкладка.Данные.СохранитьДанные(ОбъединитьПути(ТекущийКаталог(), "data", Вкладка.БазаДанных + ".files", datafile));
					Соединение = Неопределено;
					Если ПередатьСтроку(Соединение, "osdb	" + Вкладка.БазаДанных + "	data	" + Вкладка.ИмяДанных + "	datafile	" + datafile) Тогда
						Попытка
							ФайлИмя = Соединение.ПрочитатьСтроку();
							Соединение.Закрыть();
							стрСообщение = "Данные сохранены";
						Исключение
							стрСообщение = ОписаниеОшибки();
						КонецПопытки;
					КонецЕсли;
				КонецЕсли
			КонецЕсли;
			ЗаписатьСобытие(Вкладка.БазаДанных + "/" + Вкладка.ИмяДанных, стрСообщение, 1);
			Возврат Истина;
		КонецЕсли;

		datascrolled = "" + УзелСвойство(Запрос, "datascrolled");
		Если НЕ datascrolled = "" И НЕ datascrolled = "undefined" Тогда
			Если НЕ ТекущиеДанные = Неопределено Тогда
				ТекущиеДанные.Вставить("Прокрутка", datascrolled);
			КонецЕсли;
		КонецЕсли;

		winscrolled = "" + УзелСвойство(Запрос, "winscrolled");
		Если НЕ winscrolled = "" И НЕ winscrolled = "undefined" Тогда
			Если НЕ ТекущееОкно = Неопределено Тогда
				ТекущееОкно.Вставить("Прокрутка", winscrolled);
			КонецЕсли;
		КонецЕсли;

		Если Действие.Имя = Команды["НоваяВкладка"] Тогда
			ТекущиеДанные = НоваяВкладка(Запрос);
			Возврат Истина;
		КонецЕсли;

		Если Действие.Имя = Команды["РежимРедактор"] Тогда
			Если ТекущиеДанные = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
			ТекущиеДанные.Режим = "design";
			ОбщийРезультат = ОбщийРезультат + Шаблон.ПолучитьОбласть("ОбластьРежимРедактор");
			ОбновитьВкладки = Истина;
			Возврат Истина;
		КонецЕсли;

		Если Действие.Имя = Команды["РежимПросмотр"] Тогда
			Если ТекущиеДанные = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
			ТекущиеДанные.Режим = "view";
			ОбщийРезультат = ОбщийРезультат + Шаблон.ПолучитьОбласть("ОбластьРежимПросмотр");
			ОбновитьВкладки = Истина;
			Возврат Истина;
		КонецЕсли;

		tab = "" + УзелСвойство(Запрос, "tab");
		Если НЕ tab = "" И НЕ tab = "undefined" Тогда
			tab = Число(tab);
			Вкладка = Вкладки.Получить(tab);
			Если Вкладка = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;

			Если Действие.Имя = Команды["ЗакрытьВкладку"] Тогда
				ОбщийРезультат = ОбщийРезультат + "<div id='" + tab + "_0'/>";
				Если Вкладка = ТекущиеДанные Тогда
					ТекущиеДанные = Неопределено;
				ИначеЕсли Вкладка = ТекущееОкно Тогда
					ТекущееОкно = Неопределено;
				КонецЕсли;

				Вкладки.Удалить(tab);
				удВкладка = Вкладка;
				ВкладкиСписок.Удалить(ВкладкиСписок.НайтиПоЗначению(удВкладка));

				Если tab = ТекущаяВкладка Тогда
					Если ТекущиеДанные = Неопределено Тогда
						ТекущаяВкладка = Неопределено;
						Для каждого элВкладка Из ВкладкиСписок Цикл
							знВкладка = элВкладка.Значение;
							Если знВкладка = удВкладка Тогда
								tab = Неопределено;
								Продолжить;
							КонецЕсли;
							Если tab = Неопределено И НЕ ТекущаяВкладка = Неопределено Тогда
								Прервать;
							КонецЕсли;
							Если знВкладка.ТипВкладки = "data" Тогда
								Вкладка = знВкладка;
								ТекущаяВкладка = Вкладка.ИдВкладки;
								ТекущиеДанные = Вкладка;
								Вкладка.ОбновитьУзел = Истина;
							КонецЕсли;
						КонецЦикла;
					Иначе
						ТекущаяВкладка = ТекущиеДанные.ИдВкладки;
					КонецЕсли;
				КонецЕсли;

				ОбновитьВкладки = Истина;
				Возврат Истина;
			КонецЕсли;

			Если Действие.Имя = Команды["ВыбратьВкладку"] Тогда
				ТекущаяВкладка = tab;
				Если Вкладка.ТипВкладки = "data" Тогда
					ТекущиеДанные = Вкладка;
					ТекущееОкно = Неопределено;
				КонецЕсли;
				Если Вкладка.ТипВкладки = "win" Тогда
					ТекущееОкно = Вкладка;
				КонецЕсли;
				//Вкладка.ОбновитьУзел = Истина;
				ОбновитьВкладки = Истина;
				Возврат Истина;
			КонецЕсли;

		КонецЕсли;

		ИдУзла = УзелСвойство(структЗадача.Запрос, "nodeid");
		НайтиИдУзла = Найти(ИдУзла, "_");
		Если НайтиИдУзла Тогда
			НайтиИдВкладки = Число(Лев(ИдУзла, НайтиИдУзла - 1));
			Вкладка = Вкладки.Получить(НайтиИдВкладки);
			ИдУзла = Сред(ИдУзла, НайтиИдУзла + 1);
		Иначе
			//Возврат Ложь;
		КонецЕсли;

		Если Вкладка = Неопределено Тогда
			Если НЕ ТекущаяВкладка = Неопределено Тогда
				Вкладка = Вкладки.Получить(ТекущаяВкладка);
			Иначе
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;

		Данные = Вкладка.Данные;
		Если Данные = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;

		Узел = Данные.ПолучитьУзел(ИдУзла);

		Если Действие.Имя = Команды["Выполнить"] Тогда
			ОбщийРезультат = ОбщийРезультат + Вкладка.Данные.Интерпретировать(Узел);
			Возврат Истина;

		ИначеЕсли Действие.Имя = Команды["МенюРедактора"] Тогда
			ОбщийРезультат = ОбщийРезультат + ПоказатьМенюИнструменты(Вкладка, Узел, УзелСвойство(Запрос, "attr") = "1");
			Возврат Истина;

		ИначеЕсли Действие.Имя = Команды["ОткрытьУзел"] Тогда
			Возврат ОбновитьСостояние(Вкладка, Узел, "УзелОткрыт", Истина);

		ИначеЕсли Действие.Имя = Команды["ЗакрытьУзел"] Тогда
			Возврат ОбновитьСостояние(Вкладка, Узел, "УзелОткрыт", Ложь);

		ИначеЕсли Действие.Имя = Команды["РедактироватьЗначение"] Тогда
			Если УзелСвойство(Запрос, "attr") = "1" Тогда
				ОбновитьСостояние(Вкладка, Данные.Родитель(Узел), "ОбновитьУзел", Истина);
			КонецЕсли;
			Возврат ОбновитьСостояние(Вкладка, Узел, "РедактироватьЗначение", Истина);

		ИначеЕсли Действие.Имя = Команды["НовоеЗначениеУзла"] Тогда
			Если УзелСвойство(Запрос, "attr") = "1" Тогда
				ОбновитьСостояние(Вкладка, Данные.Родитель(Узел), "ОбновитьУзел", Истина);
			КонецЕсли;
			Если Запрос.Свойство("valuedit") Тогда
				Возврат ОбновитьСостояние(Вкладка, Узел, "НовоеЗначениеУзла", Запрос.valuedit);
			Иначе
				Возврат ОбновитьСостояние(Вкладка, Узел, "РедактироватьЗначение", Ложь);
			КонецЕсли;

		ИначеЕсли Действие.Имя = Команды["РедактироватьИмя"] Тогда

			Если УзелСвойство(Запрос, "attr") = "1" Тогда
				ОбновитьСостояние(Вкладка, Данные.Родитель(Узел), "ОбновитьУзел", Истина);
			КонецЕсли;
			Возврат ОбновитьСостояние(Вкладка, Узел, "РедактироватьИмя", Истина);

		ИначеЕсли Действие.Имя = Команды["РедактироватьУзел"] Тогда

			ТекущееОкно = НоваяСтруктураВкладка(Данные, "win", Вкладка.ИмяДанных + " ." + Узел.Имя, "struct", Узел.Код, Вкладка.БазаДанных, Вкладка.ИмяДанных);
			Возврат ОбновитьСостояние(ТекущееОкно, Узел, "РедактироватьУзел", Истина);

		ИначеЕсли Действие.Имя = Команды["НовоеИмяУзла"] Тогда
			Если УзелСвойство(Запрос, "attr") = "1" Тогда
				ОбновитьСостояние(Вкладка, Данные.Родитель(Узел), "ОбновитьУзел", Истина);
			КонецЕсли;
			Если Запрос.Свойство("valuedit") Тогда
				Возврат ОбновитьСостояние(Вкладка, Узел, "НовоеИмяУзла", Запрос.valuedit);
			Иначе
				Возврат ОбновитьСостояние(Вкладка, Узел, "РедактироватьИмя", Ложь);
			КонецЕсли;

		ИначеЕсли Действие.Имя = Команды["СохранитьУзел"] Тогда
			Если УзелСвойство(Запрос, "attr") = "1" Тогда
				ОбновитьСостояние(Вкладка, Данные.Родитель(Узел), "ОбновитьУзел", Истина);
			КонецЕсли;
			ОбновитьСостояние(Вкладка, Узел, "НовоеИмяУзла", Запрос.name);
			Возврат ОбновитьСостояние(Вкладка, Узел, "НовоеЗначениеУзла", Запрос.value);

		ИначеЕсли Действие.Имя = Команды["НовыйАтрибут"] Тогда
			НовыйУзел = Данные.НовыйАтрибут(Узел, Новый Структура("Имя, Значение", "", ""));
			ОбновитьСостояние(Вкладка, НовыйУзел, "РедактироватьИмя", Истина);
			//ОбновитьСостояние(Вкладка, НовыйУзел, "РедактироватьЗначение", Истина);
			Возврат ОбновитьСостояние(Вкладка, Узел, "ОбновитьУзел", Истина, Истина);

		ИначеЕсли Действие.Имя = Команды["НовыйДочерний"] Тогда
			НовыйУзел = Данные.НовыйДочерний(Узел, Новый Структура("Имя, Значение", "", ""));
			ОбновитьСостояние(Вкладка, НовыйУзел, "РедактироватьИмя", Истина);
			//ОбновитьСостояние(Вкладка, НовыйУзел, "РедактироватьЗначение", Истина);
			ОбновитьСостояние(Вкладка, Узел, "УзелОткрыт", Истина);
			Возврат Истина;

		ИначеЕсли Действие.Имя = Команды["НовыйСоседний"] Тогда
			НовыйУзел = Данные.НовыйСоседний(Узел, Новый Структура("Имя, Значение", "", ""));
			ОбновитьСостояние(Вкладка, НовыйУзел, "РедактироватьИмя", Истина);
			//ОбновитьСостояние(Вкладка, НовыйУзел, "РедактироватьЗначение", Истина);
			ОбновитьСостояние(Вкладка, Данные.Родитель(НовыйУзел), "ОбновитьУзел", Истина, Истина);
			Возврат Истина;

		ИначеЕсли Действие.Имя = Команды["НовыйРодитель"] Тогда
			НовыйУзел = Данные.НовыйРодитель(Узел, Новый Структура("Имя, Значение", "", ""));
			ОбновитьСостояние(Вкладка, НовыйУзел, "РедактироватьИмя", Истина);
			ОбновитьСостояние(Вкладка, НовыйУзел, "УзелОткрыт", Истина);
			ОбновитьСостояние(Вкладка, Данные.Родитель(НовыйУзел), "ОбновитьУзел", Истина, Истина);
			Возврат Истина;

		ИначеЕсли Действие.Имя = Команды["УдалитьУзел"] Тогда
			ДанныеРодительУзел = Данные.Родитель(Узел);
			Данные.УдалитьУзел(Узел);
			ОбновитьСостояние(Вкладка, ДанныеРодительУзел, "ОбновитьУзел", Истина, Истина);
			Возврат Истина;

		ИначеЕсли Действие.Имя = Команды["КопироватьУзел"] Тогда
			Если НЕ Буфер = Неопределено Тогда
				ОсвободитьОбъект(Буфер);
			КонецЕсли;
			Буфер = Новый Соответствие;
			БуферУзел = Узел.Код;
			Данные.КопироватьУзел(Узел, Буфер);
			Возврат Истина;

		ИначеЕсли Действие.Имя = Команды["ВырезатьУзел"] Тогда
			Если НЕ Буфер = Неопределено Тогда
				ОсвободитьОбъект(Буфер);
			КонецЕсли;
			Буфер = Новый Соответствие;
			БуферУзел = Узел.Код;
			Данные.КопироватьУзел(Узел, Буфер);
			ДанныеРодительУзел = Данные.Родитель(Узел);
			Данные.УдалитьУзел(Узел, Ложь);
			ОбновитьСостояние(Вкладка, ДанныеРодительУзел, "ОбновитьУзел", Истина, Истина);
			Возврат Истина;

		ИначеЕсли Действие.Имя = Команды["ВставитьАтрибут"] Тогда
			Если НЕ Буфер = Неопределено Тогда
				НовыйУзел = Данные.ВставитьУзел(Буфер, БуферУзел, Истина);
				НовыйУзел.Вставить("Старший", Узел.Код);
				НовыйУзел.Вставить("Родитель", Узел.Код);
				НовыйУзел.Вставить("Атрибут", Неопределено);
				НовыйУзел.Вставить("Дочерний", Неопределено);
				УзелАтрибут = Данные.Атрибут(Узел);
				Узел.Вставить("Атрибут", НовыйУзел.Код);
				Если НЕ УзелАтрибут = Неопределено Тогда
					НовыйУзел.Вставить("Соседний", УзелАтрибут.Код);
					УзелАтрибут.Вставить("Старший", НовыйУзел.Код);
				КонецЕсли;
			КонецЕсли;
			Возврат ОбновитьСостояние(Вкладка, Узел, "ОбновитьУзел", Истина, Истина);

		ИначеЕсли Действие.Имя = Команды["ВставитьДочерний"] Тогда
			Если НЕ Буфер = Неопределено Тогда
				НовыйУзел = Данные.ВставитьУзел(Буфер, БуферУзел);
				НовыйУзел.Вставить("Старший", Узел.Код);
				НовыйУзел.Вставить("Родитель", Узел.Код);
				УзелДочерний = Данные.Дочерний(Узел);
				Узел.Вставить("Дочерний", НовыйУзел.Код);
				Если НЕ УзелДочерний = Неопределено Тогда
					НовыйУзел.Вставить("Соседний", УзелДочерний.Код);
					УзелДочерний.Вставить("Старший", НовыйУзел.Код);
				КонецЕсли;
			КонецЕсли;
			Возврат ОбновитьСостояние(Вкладка, Узел, "УзелОткрыт", Истина, Истина);

		ИначеЕсли Действие.Имя = Команды["ВставитьСоседний"] Тогда
			Если НЕ Буфер = Неопределено Тогда
				НовыйУзел = Данные.ВставитьУзел(Буфер, БуферУзел);
				НовыйУзел.Вставить("Старший", Узел.Код);
				НовыйУзел.Вставить("Родитель", УзелСвойство(Узел, "Родитель"));
				УзелСоседний = Данные.Соседний(Узел);
				Узел.Вставить("Соседний", НовыйУзел.Код);
				Если НЕ УзелСоседний = Неопределено Тогда
					НовыйУзел.Вставить("Соседний", УзелСоседний.Код);
					УзелСоседний.Вставить("Старший", НовыйУзел.Код);
				КонецЕсли;
			КонецЕсли;
			Возврат ОбновитьСостояние(Вкладка, Данные.Родитель(НовыйУзел), "ОбновитьУзел", Истина, Истина);

		ИначеЕсли Действие.Имя = Команды["УдалитьАтрибуты"] Тогда
			Если НЕ УзелСвойство(Узел, "Атрибут") = Неопределено Тогда
				Данные.УдалитьУзел(Данные.Атрибут(Узел), Ложь);
				//Узел.Удалить("Атрибут");
				Узел.Атрибут = Неопределено;
			КонецЕсли;
			Возврат ОбновитьСостояние(Вкладка, Узел, "ОбновитьУзел", Истина, Истина);

		ИначеЕсли Действие.Имя = Команды["УдалитьРодителя"] Тогда
			Если НЕ УзелСвойство(Узел, "Родитель") = Неопределено Тогда
				Данные.УдалитьРодителя(Узел);
			КонецЕсли;
			ОбновитьСостояние(Вкладка, Данные.Родитель(Узел), "ОбновитьУзел", Истина, Истина);
			Возврат ОбновитьСостояние(Вкладка, Узел, "ОбновитьУзел", Истина, Истина);

		// ИначеЕсли Действие.Имя = Команды["УзелСтруктура"] Тогда
		// 	Возврат ОбновитьСостояние(Вкладка, Узел, "Изменить", Истина, , Истина);
		//
		// ИначеЕсли Действие.Имя = Команды["УзелПросмотр"] Тогда
		// 	Возврат ОбновитьСостояние(Вкладка, Узел, "Изменить", Ложь, , Истина);

		ИначеЕсли Действие.Имя = Команды["СтруктураДанных"] Тогда

			ТекущееОкно = НоваяСтруктураВкладка(Данные, "win", Вкладка.ИмяДанных + " ." + Узел.Имя, "struct", Вкладка.ИдУзла, Вкладка.БазаДанных, Вкладка.ИмяДанных);
			ОбновитьСостояние(ТекущееОкно, Узел, "УзелОткрыт", Истина);
			Возврат Истина;

		ИначеЕсли Действие.Имя = Команды["ЗначениеУзла"] Тогда

			Данные.Обновить = Истина;
			УзелЗначение = Данные.Интерпретировать(Узел);
			Данные.Обновить = Ложь;
			Если ТипЗнч(УзелЗначение) = Тип("Структура") Тогда
				ТипУзла = "struct";
				ДанныеВкладки = Данные;
				УзелКод = УзелЗначение.Код;
			Иначе
				ТипУзла = "value";
				ДанныеВкладки = Новый Структура("Представление", УзелЗначение);
				УзелКод = Узел.Код;
			КонецЕсли;
			ТекущееОкно = НоваяСтруктураВкладка(ДанныеВкладки, "win", Вкладка.ИмяДанных + " ." + Узел.Имя, ТипУзла, УзелКод, "", "");
			Возврат Истина;

		ИначеЕсли Действие.Имя = Команды["Окружение"] Тогда

			УзелЗначение = Данные.ОкружениеУзла(Узел);
			ТипУзла = "struct";
			УзелКод = УзелЗначение.Код;
			ТекущееОкно = НоваяСтруктураВкладка(Данные, "win", Вкладка.ИмяДанных + " .Окружение", ТипУзла, УзелКод, "", "");
			Возврат Истина;

		КонецЕсли;

	КонецЕсли;

	Возврат Ложь;
КонецФункции // ВыполнитьДействия()


Функция ПередатьСтроку(Соединение, СтрокаДанные) Экспорт
	Попытка
		Соединение = Новый TCPСоединение(Хост, Порт);
		Соединение.ТаймаутОтправки = 50;
		Соединение.ОтправитьСтроку(СтрокаДанные);
		КоличествоПопыток = 100;
		Возврат Истина;
	Исключение
		Соединение = Неопределено;
		КоличествоПопыток = КоличествоПопыток - 1;
		Если КоличествоПопыток = 0 Тогда
			Сообщить("Хост недоступен");
		КонецЕсли;
		Возврат Ложь;
	КонецПопытки;
КонецФункции // ПередатьСтроку()


Функция ЗаписатьСобытие(стрЗаголовок, стрСообщение, ТипСобытия = 0, ПараметрКоманда = "") Экспорт
	// Журнал.НовыйДочерний(ДанныеЖурнала, Новый Структура("Имя, Значение", ТекущаяДата(), ?(ТипСобытия = 0, "Общее", ?(ТипСобытия = 1, "Успех", ?(ТипСобытия = 2, "Внимание", "Ошибка"))) + " [" + стрЗаголовок + "] " + стрСообщение));
	// Журнал.ОбновитьУзел(ДанныеЖурнала);
	ОбщийРезультат = ОбщийРезультат + Шаблон.ПолучитьОбласть("ОбластьУведомление",
		Новый Структура("ПараметрТекстУведомления, ПараметрЗаголовокУведомления, ПараметрТипУведомления, ПараметрКоманда",
			стрСообщение, стрЗаголовок, ТипСобытия,	ПараметрКоманда));
КонецФункции // ЗаписатьСобытие()


Если АргументыКоманднойСтроки.Количество() Тогда

	procid = АргументыКоманднойСтроки[0];
	Порт = АргументыКоманднойСтроки[1];

	Шаблон = ЗагрузитьСценарий(ОбъединитьПути(ТекущийКаталог(), "template.os"));
	Шаблон.ЗагрузитьМакет(ОбъединитьПути(ТекущийКаталог(), "resource", "showdata.html"));

	ПодключитьСценарий(ОбъединитьПути(ТекущийКаталог(), "pagedata.os"), "pagedata");

	ОбщийРезультат = "";

	ВсеДанные = Новый Соответствие;

	Журнал = Новый pagedata(ЭтотОбъект, ОбъединитьПути(ТекущийКаталог(), "data", ".files", "log"));
	ВсеДанные.Вставить("/log", Журнал);
	Журнал.ОбновитьПредставление();
	ДанныеЖурнала = Журнал.ЭлементОкружения(Журнал.Корень, "Данные");
	ДанныеЖурнала = Журнал.Родитель(ДанныеЖурнала);
	ЗаписатьСобытие("Процесс", "Запущен процесс procid=" + procid);

	ВкладкиСписок = Новый СписокЗначений;
	Вкладки = Новый Соответствие;
	ИдВкладки = 0;

	Команды = Новый Соответствие;
	Команды.Вставить("ОткрытьУзел", "nodeopen");
	Команды.Вставить("ЗакрытьУзел", "nodeclose");
	// Команды.Вставить("УзелСтруктура", "struct");
	// Команды.Вставить("УзелПросмотр", "view");
	Команды.Вставить("ОбновитьУзел", "nodereload");
	Команды.Вставить("НоваяВкладка", "newtab");
	Команды.Вставить("ВыбратьВкладку", "tabselect");
	Команды.Вставить("ЗакрытьВкладку", "tabclose");
	Команды.Вставить("РедактироватьЗначение", "valuedit");
	Команды.Вставить("ЗначениеУзла", "showvalue");
	Команды.Вставить("Окружение", "showenv");
	Команды.Вставить("НовоеЗначениеУзла", "submitvalue");
	Команды.Вставить("НовоеИмяУзла", "submitname");
	Команды.Вставить("РедактироватьИмя", "namedit");
	Команды.Вставить("РедактироватьУзел", "editnode");
	Команды.Вставить("СохранитьУзел", "savenode");
	Команды.Вставить("НовыйРодитель", "paradd");
	Команды.Вставить("НовыйАтрибут", "attradd");
	Команды.Вставить("НовыйДочерний", "childadd");
	Команды.Вставить("СтруктураДанных", "structwin");
	Команды.Вставить("СохранитьДанные", "savedata");
	Команды.Вставить("РежимРедактор", "designmode");
	Команды.Вставить("РежимПросмотр", "viewmode");
	Команды.Вставить("Выполнить", "exec");
	Команды.Вставить("МенюРедактора", "designmenu");
	Команды.Вставить("НовыйСоседний", "nextadd");
	Команды.Вставить("УдалитьУзел", "noderemove");
	Команды.Вставить("КопироватьУзел", "nodecopy");
	Команды.Вставить("ВырезатьУзел", "nodecut");
	Команды.Вставить("ВставитьАтрибут", "nodepasteattr");
	Команды.Вставить("ВставитьДочерний", "nodepastechild");
	Команды.Вставить("ВставитьСоседний", "nodepastenext");
	Команды.Вставить("УдалитьАтрибуты", "attremove");
	Команды.Вставить("УдалитьРодителя", "parremove");

	Буфер = Неопределено;

	Хост = "127.0.0.1";
	//Порт = 8888;
	Соединение = Неопределено;

	Задачи = Новый СписокЗначений;

	СтруктЗапрос = СтруктуруВСтроку(Новый Структура("procid", procid));
	КоличествоПопыток = 100;

	Попытка

		Пока Истина Цикл

			ПрерватьЦикл = Ложь;
			Пока Не ПрерватьЦикл Цикл
				ПрерватьЦикл = Истина;
				Для каждого элЗадача Из Задачи Цикл
					структЗадача = ЭлЗадача.Значение;
					Если структЗадача.Тип = "Запрос" Тогда
						Попытка
							ЗапросВыполнитьЗадачу(структЗадача);
						Исключение
							Сообщить(ОписаниеОшибки());
							структЗадача.Этап = "УдалитьЗадачу";
						КонецПопытки;
					КонецЕсли;
					Если структЗадача.Этап = "УдалитьЗадачу" Тогда
						Задачи.Удалить(элЗадача);
						ПрерватьЦикл = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;

			Если Соединение = Неопределено Тогда
				Если НЕ ПередатьСтроку(Соединение, СтруктЗапрос) Тогда
					Если НЕ КоличествоПопыток > 0 Тогда
						Прервать;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Если НЕ Соединение.Активно Тогда
					Соединение = Неопределено;
					Продолжить;
				КонецЕсли;
			КонецЕсли;

			Попытка
				ЗадачиКоличество = Задачи.Количество();
				Если ЗадачиКоличество Тогда
					Соединение.ТаймаутЧтения = 50;
				КонецЕсли;
				Запрос = Соединение.ПрочитатьСтроку();
			Исключение
				//Сообщить("Осталось задач: " + ЗадачиКоличество);
				Продолжить;
			КонецПопытки;

			Попытка
				Запрос = СтрокуВСтруктуру(Запрос);
				domupdate = "" + УзелСвойство(Запрос, "domupdate");
				Если НЕ domupdate = "" Тогда
					НомерОбновления = Число(domupdate);
				КонецЕсли;
				структЗадача = Новый Структура("Тип, Этап, Запрос, Действие, Результат", "Запрос", "ВыполнитьЗадачу", Запрос, Неопределено, "");
			Исключение
				структЗадача = Новый Структура("Тип, Этап, Запрос, Результат", "Запрос", "ЕстьРезультат", Неопределено, "Неверный запрос");
			КонецПопытки;

			Задачи.Добавить(структЗадача);

			Соединение.Закрыть();
			Соединение = Неопределено;

		КонецЦикла;

	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;

КонецЕсли;
